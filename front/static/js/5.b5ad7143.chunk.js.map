{"version":3,"sources":["../node_modules/lodash/keyBy.js","../node_modules/lodash/_createAggregator.js","../node_modules/lodash/_arrayAggregator.js","../node_modules/lodash/_baseAggregator.js","../node_modules/@coreui/coreui-plugin-chartjs-custom-tooltips/dist/umd/custom-tooltips.js","../node_modules/lodash/_baseAssignValue.js","../node_modules/lodash/_baseEach.js","../node_modules/lodash/_defineProperty.js","../node_modules/lodash/_createBaseEach.js","../node_modules/lodash/isEqual.js","../node_modules/react-chartjs-2/es/index.js","../node_modules/chart.js/dist/Chart.js"],"names":["baseAssignValue","__webpack_require__","keyBy","createAggregator","result","value","key","module","exports","arrayAggregator","baseAggregator","baseIteratee","isArray","setter","initializer","collection","iteratee","func","accumulator","array","index","length","baseEach","CustomTooltips","tooltipModel","_this","this","ClassName","ABOVE","BELOW","CHARTJS_TOOLTIP","NO_TRANSFORM","TOOLTIP_BODY","TOOLTIP_BODY_ITEM","TOOLTIP_BODY_ITEM_COLOR","TOOLTIP_BODY_ITEM_LABEL","TOOLTIP_BODY_ITEM_VALUE","TOOLTIP_HEADER","TOOLTIP_HEADER_ITEM","Selector","DIV","SPAN","TOOLTIP","_chart","canvas","id","_idMaker","Math","random","toString","_canvasId","_setCanvasId","tooltip","document","getElementById","createElement","className","parentNode","appendChild","opacity","classList","remove","yAlign","add","body","titleLines","title","tooltipHeader","forEach","tooltipHeaderTitle","innerHTML","tooltipBody","tooltipBodyItems","map","item","lines","i","tooltipBodyItem","colors","labelColors","tooltipBodyItemColor","style","backgroundColor","split","tooltipBodyItemLabel","tooltipBodyItemValue","pop","_tooltipBodyItemValue","position","getBoundingClientRect","positionY","offsetTop","positionX","offsetLeft","positionLeft","caretX","positionTop","caretY","halfWidth","width","left","top","customTooltips","Object","defineProperty","factory","object","configurable","enumerable","writable","baseForOwn","createBaseEach","getNative","e","isArrayLike","eachFunc","fromRight","iterable","baseIsEqual","other","process","d","__webpack_exports__","Doughnut","Pie","Line","Bar","Radar","Polar","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","chart_js__WEBPACK_IMPORTED_MODULE_2__","chart_js__WEBPACK_IMPORTED_MODULE_2___default","lodash_isEqual__WEBPACK_IMPORTED_MODULE_3__","lodash_isEqual__WEBPACK_IMPORTED_MODULE_3___default","lodash_keyBy__WEBPACK_IMPORTED_MODULE_4__","lodash_keyBy__WEBPACK_IMPORTED_MODULE_4___default","_extends","assign","target","arguments","source","prototype","hasOwnProperty","call","_objectWithoutProperties","obj","keys","indexOf","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","NODE_ENV","PUBLIC_URL","ChartComponent","_React$Component","_temp","_len","args","Array","_key","apply","concat","handleOnClick","event","chartInstance","_this$props","props","getDatasetAtEvent","getElementAtEvent","getElementsAtEvent","onElementsClick","ref","element","componentWillMount","undefined","componentDidMount","renderChart","componentDidUpdate","redraw","destroyChart","updateChart","shouldComponentUpdate","nextProps","_props","type","options","plugins","legend","height","nextData","transformDataProp","shadowDataProp","componentWillUnmount","data","memoizeDataProps","datasets","set","saveCurrentDatasets","checkDatasets","isDev","usingCustomKeyProvider","datasetKeyProvider","getLabelAsKey","multipleDatasets","shouldWarn","dataset","label","console","error","getCurrentDatasets","config","_this2","_this3","a","helpers","configMerge","currentDatasets","nextDatasets","currentDatasetsIndexed","next","current","splice","point","pid","otherProps","rest","update","_props2","node","defaultProps","values","destroy","render","_props3","onClick","Component","propTypes","oneOfType","isRequired","number","arrayOf","bool","propName","componentName","controllers","Error","display","_React$Component2","_this5","_ref","_React$Component3","_this7","_ref2","_React$Component4","_this9","_ref3","_React$Component5","_this11","_ref4","_React$Component6","HorizontalBar","_this13","_ref5","_React$Component7","_this15","_ref6","_React$Component8","_this17","_ref7","_React$Component9","Bubble","_this19","_ref8","_React$Component10","Scatter","_this21","_ref9","defaults","moment","conversions","rgb2hsl","rgb2hsv","rgb2hwb","rgb2cmyk","rgb2keyword","rgb2xyz","rgb2lab","rgb2lch","lab2lch","hsl2rgb","hsl2hsv","hsl","h","s","l","hsl2hwb","hsl2cmyk","hsl2keyword","hsv2rgb","hsv2hsl","hsv","sl","v","hsv2hwb","hsv2cmyk","hsv2keyword","hwb2rgb","hwb2hsl","hwb2hsv","hwb2cmyk","hwb2keyword","cmyk2rgb","cmyk2hsl","cmyk2hsv","cmyk2hwb","cmyk2keyword","keyword2rgb","keyword2hsl","keyword2hsv","keyword2hwb","keyword2cmyk","keyword2lab","keyword2xyz","xyz2rgb","xyz2lab","xyz2lch","lab2xyz","lab2rgb","lch2lab","lch2xyz","lch2rgb","rgb","r","g","b","min","max","delta","w","k","reverseKeywords","JSON","stringify","pow","x","y","z","xyz","t1","t2","t3","val","hi","floor","f","p","q","t","hwb","wh","bl","ratio","cmyk","c","m","lab","y2","hr","atan2","PI","sqrt","lch","cos","sin","keyword","cssKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","convert","Converter","arg","slice","pair","exec","from","to","round","convs","routeSpace","space","getValues","setValues","vals","fspace","colorConvert","colorName","colorString","getRgba","getHsla","getRgb","string","rgba","getHsl","hsla","getHwb","getAlpha","hexString","hexDouble","rgbString","alpha","rgbaString","percentString","percentaString","hslString","hslaString","hwbString","reverseNames","match","hexAlpha","parseInt","parseFloat","scale","isNaN","num","str","toUpperCase","name","Color","valid","lightness","whiteness","isValid","setSpace","rgbArray","hslArray","hsvArray","hwbArray","cmykArray","rgbaArray","hslaArray","setChannel","hue","saturation","saturationv","blackness","rgbNumber","luminosity","lum","chan","contrast","color2","lum1","lum2","level","contrastRatio","dark","light","negate","lighten","darken","saturate","desaturate","whiten","blacken","greyscale","clearer","opaquer","rotate","degrees","mix","mixinColor","weight","w1","w2","toJSON","clone","prop","spaces","maxes","charAt","capped","chans","sname","svalues","window","chartjsColor","noop","uid","isNullOrUndef","substr","isObject","isFinite","_isFinite","_x","Number","valueOrDefault","defaultValue","valueAtIndexOrDefault","callback","fn","thisArg","each","loopable","reverse","len","arrayEquals","a0","a1","ilen","v0","v1","klen","_merger","tval","sval","merge","_mergerIf","mergeIf","sources","merger","extend","setFn","inherits","extensions","me","ChartElement","Surrogate","__super__","helpers_core","callCallback","fromIndex","getValueOrDefault","getValueAtIndexOrDefault","effects","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","asin","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","helpers_easing","easingEffects","RAD_PER_DEG","DOUBLE_PI","HALF_PI","QUARTER_PI","TWO_THIRDS_PI","exports$1","clear","chart","ctx","clearRect","roundedRect","radius","right","bottom","moveTo","arc","closePath","rect","drawPoint","rotation","xOffset","yOffset","size","cornerRadius","rad","beginPath","lineTo","SQRT1_2","fill","stroke","drawImage","_isPointInArea","area","clipArea","save","clip","unclipArea","restore","previous","flip","stepped","steppedLine","midpoint","tension","bezierCurveTo","controlPointPreviousX","controlPointNextX","controlPointPreviousY","controlPointNextY","helpers_canvas","drawRoundedRectangle","_set","scope","defaultColor","defaultFontColor","defaultFontFamily","defaultFontSize","defaultFontStyle","defaultLineHeight","showLines","core_defaults","helpers_options","toLineHeight","matches","toPadding","_parseFont","globalDefaults","global","fontSize","font","family","fontFamily","lineHeight","fontStyle","toFontString","resolve","inputs","context","helpers$1","easing","Element","configuration","initialize","hidden","pivot","_view","_model","_start","transition","ease","model","start","view","actual","origin","c0","c1","interpolate","tooltipPosition","hasValue","isNumber","core_element","exports$2","currentStep","numSteps","onAnimationProgress","onAnimationComplete","core_animation","get","animation","duration","onProgress","onComplete","core_animations","animations","request","addAnimation","lazy","startTime","Date","now","animating","push","requestAnimationFrame","cancelAnimation","findIndex","requestAnimFrame","startDigest","advance","nextStep","arrayEvents","unlistenArrayEvents","listener","stub","_chartjs","listeners","DatasetController","datasetIndex","datasetElementType","dataElementType","linkScales","addElements","updateIndex","meta","getMeta","getDataset","xAxisID","scales","xAxes","yAxisID","yAxes","getDatasetMeta","getScaleForId","scaleID","_getValueScaleId","_getIndexScaleId","_getValueScale","_getIndexScale","reset","_data","createMetaDataset","_datasetIndex","createMetaData","_index","metaData","addElementAndReset","updateElement","buildOrUpdateElements","isExtensible","method","base","res","resyncElements","easingValue","elements","draw","removeHoverStyle","$previousStyle","setHoverStyle","custom","getHoverColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth","numMeta","numData","insertElements","count","onDataPush","onDataPop","onDataShift","shift","onDataSplice","onDataUnshift","core_datasetController","borderAlign","element_arc","inLabelRange","mouseX","vm","hoverRadius","inRange","chartX","chartY","pointRelativePosition","getAngleFromPoint","angle","distance","startAngle","endAngle","betweenAngles","withinRadius","innerRadius","outerRadius","getCenterPoint","halfAngle","halfRadius","getArea","centreAngle","rangeFromCentre","angleMargin","sA","eA","pixelMargin","fillStyle","lineWidth","lineJoin","strokeStyle","valueOrDefault$1","line","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","capBezierPoints","element_line","currentVM","spanGaps","points","_children","globalOptionLineElements","lastDrawnIndex","_loop","lineCap","setLineDash","lineDashOffset","previousItem","skip","valueOrDefault$2","defaultColor$1","xRange","abs","hitRadius","pointStyle","element_point","mouseY","inXRange","inYRange","padding","chartArea","defaultColor$2","isVertical","getBarBounds","x1","x2","y1","half","swap","orig","v2","parseBorderWidth","maxW","maxH","edge","borderSkipped","horizontal","parseBorderSkipped","_inRange","skipX","skipY","bounds","rectangle","element_rectangle","rects","border","outer","inner","boundingRects","fillRect","Arc","Point","Rectangle","resolve$1","hover","mode","categoryPercentage","barPercentage","offset","gridLines","offsetGridLines","controller_bar","stack","bar","_ruler","getRuler","_resolveElementOptions","_xScale","_yScale","datasetLabel","labels","_updateElementGeometry","vscale","getBasePixel","isHorizontal","ruler","vpixels","calculateBarValuePixels","ipixels","calculateBarIndexPixels","head","center","_getStacks","last","stacked","stacks","isDatasetVisible","getStackCount","getStackIndex","stackCount","end","pixels","getPixelForValue","barThickness","prev","curr","ticks","getTicks","getPixelForTick","computeMinSampleSize","imeta","ivalue","getRightValue","minBarLength","controller","range","percent","chunk","computeFlexCategoryTraits","thickness","computeFitCategoryTraits","stackIndex","maxBarThickness","Infinity","dataIndex","valueOrDefault$3","resolve$2","tooltips","callbacks","dataPoint","xLabel","yLabel","controller_bubble","xScale","yScale","dsIndex","getPixelForDecimal","NaN","_options","resolve$3","valueOrDefault$4","animateRotate","animateScale","legendCallback","text","join","generateLabels","ds","arcOpts","bw","legendItem","cutoutPercentage","circumference","tooltipItem","dataLabel","controller_doughnut","getRingIndex","ringIndex","j","opts","availableWidth","availableHeight","minSize","arcs","chartWeight","_getRingWeight","contains0","contains90","contains180","contains270","cutout","getMaxBorderWidth","radiusLength","_getVisibleDatasetWeightTotal","offsetX","offsetY","total","calculateTotal","_getRingWeightOffset","animationOpts","centerX","centerY","calculateCircumference","hoverWidth","ringWeightOffset","dataSetIndex","axis","controller_horizontalBar","valueOrDefault$5","resolve$4","isPointInArea","lineEnabled","showLine","controller_line","lineTension","_scale","_resolveLineOptions","updateBezierControlPoints","lineModel","_resolvePointOptions","calculatePointY","ELEMENT_OPTIONS","elementOptions","dsMeta","sumPos","sumNeg","stackedRightValue","rightValue","controlPoints","capControlPoint","pt","filter","cubicInterpolationMode","splineCurveMonotone","splineCurve","nextItem","halfBorderWidth","resolve$5","angleLines","circular","pointLabels","beginAtZero","controller_polarArea","starts","_starts","angles","_angles","_updateRadius","countVisibleElements","_computeAngle","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getDistanceFromCenterForValue","resetRadius","doughnut","controller_pie","valueOrDefault$6","resolve$6","controller_radar","pointPosition","getPointPositionForValue","bubble","horizontalBar","polarArea","pie","radar","scatter","getRelativePosition","native","parseVisibleItems","handler","jlen","getIntersectItems","getNearestItems","intersect","distanceMetric","minDistance","POSITIVE_INFINITY","nearestItems","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","indexMode","items","core_interaction","modes","single","x-axis","nearest","intersectsItem","filterByPosition","where","sortByWeight","_tmpIndex_","sort","addSizeByPosition","boxes","box","layout","core_layouts","addBox","fullWidth","removeBox","layoutItem","configure","layoutOptions","leftPadding","rightPadding","topPadding","bottomPadding","leftBoxes","rightBoxes","topBoxes","bottomBoxes","chartAreaBoxes","maxPadding","verticalBoxes","horizontalBoxes","outerBoxes","chartWidth","chartHeight","chartAreaWidth","verticalBoxWidth","maxChartAreaWidth","maxChartAreaHeight","outerBoxSizes","minBoxSizes","getPadding","boxPadding","findMaxPadding","fitBox","minBoxSize","findNextWhere","scaleMargin","leftPaddingAddition","topPaddingAddition","newMaxChartAreaHeight","newMaxChartAreaWidth","placeBox","minBox","stylesheet","freeze","default","EXPANDO_KEY","CSS_SIZE_MONITOR","CSS_PREFIX","CSS_RENDER_MONITOR","CSS_RENDER_ANIMATION","ANIMATION_START_EVENTS","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","readUsedSize","property","getStyle","eventListenerOptions","supports","addEventListener","passive","addListener","removeListener","removeEventListener","createEvent","nativeEvent","createDiv","cls","el","addResizeListener","expando","resizer","expand","shrink","_reset","scrollLeft","scrollTop","onScroll","bind","createResizer","ticking","throttled","container","maintainAspectRatio","clientWidth","proxy","renderProxy","animationName","reflow","offsetParent","watchForRender","insertBefore","firstChild","removeResizeListener","unwatchForRender","removeChild","platform_dom$2","disableCSSInjection","_enabled","_ensureLoaded","_loaded","platform","css","_style","setAttribute","getElementsByTagName","createTextNode","injectCSS","acquireContext","getContext","renderHeight","getAttribute","renderWidth","initial","displayWidth","aspectRatio","displayHeight","initCanvas","releaseContext","removeAttribute","proxies","pos","fromNativeEvent","addEvent","removeEvent","implementation","core_plugins","_plugins","_cacheId","register","plugin","unregister","idx","getAll","notify","hook","descriptor","params","descriptors","cache","$plugins","_invalidate","core_scaleService","constructors","registerScaleType","scaleConstructor","scaleDefaults","getScaleConstructor","getScaleDefaults","updateScaleDefaults","additions","addScalesToLayout","valueOrDefault$7","enabled","titleFontStyle","titleSpacing","titleMarginBottom","titleFontColor","titleAlign","bodySpacing","bodyFontColor","bodyAlign","footerFontStyle","footerSpacing","footerMarginTop","footerFontColor","footerAlign","yPadding","xPadding","caretPadding","caretSize","multiKeyBackground","displayColors","beforeTitle","tooltipItems","labelCount","afterTitle","beforeBody","beforeLabel","labelColor","activeElement","labelTextColor","afterLabel","afterBody","beforeFooter","footer","afterFooter","positioners","average","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","splitNewlines","String","createTooltipItem","indexScale","valueScale","getLabelForIndex","getBaseModel","tooltipOpts","xAlign","_bodyFontFamily","bodyFontFamily","_bodyFontStyle","bodyFontStyle","_bodyAlign","bodyFontSize","_titleFontFamily","titleFontFamily","_titleFontStyle","titleFontSize","_titleAlign","_footerFontFamily","footerFontFamily","_footerFontStyle","footerFontSize","_footerAlign","legendColorBackground","getAlignedX","align","getBeforeAfterBodyLines","exports$3","_lastActive","getTitle","getBeforeBody","getBody","bodyItems","bodyItem","before","after","getAfterBody","getFooter","changed","existingModel","active","_active","alignment","backgroundPoint","tooltipSize","labelTextColors","_eventPosition","itemSort","dataPoints","combinedBodyLength","reduce","titleLineCount","footerLineCount","widthPadding","maxLineWidth","measureText","fontString","getTooltipSize","lf","rf","olf","orf","yf","midX","midY","determineAlignment","paddingAndSize","radiusAndPadding","getBackgroundPoint","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","tmp","drawTitle","textAlign","textBaseline","fillText","drawBody","textColor","drawColorBoxes","xLinePadding","colorX","fillLineOfText","strokeRect","drawFooter","drawBackground","quadraticCurveTo","hasTooltipContent","globalAlpha","handleEvent","getElementsAtEventForMode","positioners_1","core_tooltip","valueOrDefault$8","mergeScaleConfig","slen","mergeConfig","positionIsHorizontal","events","onHover","animationDuration","responsive","responsiveAnimationDuration","Chart","construct","initConfig","_bufferedRender","instances","retinaScale","devicePixelRatio","bindEvents","resize","ensureScalesHaveIDs","buildOrUpdateScales","initToolTip","stop","silent","newWidth","getMaximumWidth","newHeight","getMaximumHeight","newSize","onResize","scalesOptions","scaleOptions","xAxisOptions","yAxisOptions","updated","dtype","dposition","isDefault","scaleType","scaleClass","mergeTicksOptions","hasUpdated","buildOrUpdateControllers","newControllers","destroyDatasetMeta","ControllerClass","resetElements","newOptions","updateConfig","updateLayout","updateDatasets","lastActive","_bufferedRequest","updateDataset","animationOptions","animationObject","easingFunction","stepDecimal","drawDatasets","_drawTooltip","drawDataset","getElementsAtXAxis","_meta","generateLegend","unbindEvents","toBase64Image","toDataURL","_chartInstance","_listeners","eventHandler","updateHoverStyle","bufferedRequest","hoverOptions","core_controller","abstract","DateAdapter","Controller","types","scaleMerge","formats","parse","format","diff","startOf","endOf","_create","override","members","core_adapters","_date","core_ticks","formatters","tickValue","logDelta","log10","tickString","maxTick","logTick","toExponential","numDecimal","toFixed","logarithmic","remain","valueOrDefault$9","labelsFromTicks","computeTextSize","tick","longestText","color","drawBorder","drawOnChartArea","drawTicks","tickMarkLength","zeroLineWidth","zeroLineColor","zeroLineBorderDash","zeroLineBorderDashOffset","scaleLabel","labelString","minRotation","maxRotation","mirror","autoSkip","autoSkipPadding","labelOffset","minor","major","core_scale","paddingLeft","paddingTop","paddingRight","paddingBottom","_ticks","beforeUpdate","maxWidth","maxHeight","margins","_maxLabelLines","longestLabelWidth","longestTextCache","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","beforeBuildTicks","buildTicks","afterBuildTicks","beforeTickToLabelConversion","convertTicksToLabels","afterTickToLabelConversion","beforeCalculateTickRotation","calculateTickRotation","afterCalculateTickRotation","beforeFit","fit","afterFit","afterUpdate","tickOpts","userCallback","tickFont","labelRotation","cosRotation","originalLabelWidth","labelWidth","tickWidth","angleRadians","toRadians","scaleLabelOpts","gridLineOpts","_isVisible","parseFont","isFullWidth","scaleLabelFont","scaleLabelPadding","deltaHeight","largestTextWidth","tallestLabelHeightInLines","numberOfLabelLines","lineSpace","tickPadding","sinRotation","labelHeight","firstLabelWidth","lastLabelWidth","offsetRight","handleMargins","rawValue","getValueForPixel","innerWidth","pixel","finalVal","innerHeight","decimal","valueOffset","getBaseValue","_autoSkip","optionTicks","tickCount","skipRatio","maxTicks","maxTicksLimit","ticksLength","_tickSize","axisLength","PaddingBottom","rot","borderValue","tickStart","tickEnd","optionMajorTicks","isRotated","isMirrored","tickFontColor","fontColor","majorTickFontColor","majorTickFont","tl","scaleLabelFontColor","labelRotationRadians","itemsToDraw","axisWidth","alignPixel","_alignPixel","lineColor","tx1","ty1","tx2","ty2","labelX","labelY","textOffset","zeroLineIndex","lineValue","getPixelForGridLine","labelYOffset","labelXOffset","glWidth","glColor","glBorderDash","glBorderDashOffset","itemToDraw","translate","scaleLabelX","scaleLabelY","halfLineHeight","isLeft","firstLineWidth","lastLineWidth","scale_category","getLabels","xLabels","yLabels","minIndex","maxIndex","valueCategory","offsetAmt","valueWidth","widthOffset","valueHeight","heightOffset","horz","valueDimension","_defaults","scale_linearbase","handleTickRangeOptions","minSign","sign","maxSign","setMin","suggestedMin","setMax","suggestedMax","getTickLimit","stepSize","ceil","_computeTickLimit","handleDirectionalChanges","numericGeneratorOptions","precision","fixedStepSize","generationOptions","dataRange","factor","niceMin","niceMax","numSpaces","unit","maxNumSpaces","rmin","rmax","spacing","niceNum","_decimalPlaces","almostWhole","almostEquals","generateTicks","ticksAsNumbers","defaultConfig$1","scale_linear","IDMatches","hasStacks","valuesPerStack","positiveValues","negativeValues","relativePoints","valuesForType","minVal","maxVal","innerDimension","_defaults$1","valueOrDefault$a","defaultConfig$2","nonNegativeOrDefault","scale_logarithmic","minNotZero","exp","significand","tickVal","endExp","endSignificand","lastTick","generateTicks$1","tickValues","_getFirstTickValue","firstTickValue","_defaults$2","valueOrDefault$b","valueAtIndexOrDefault$1","resolve$7","defaultConfig$3","animate","showLabelBackdrop","backdropColor","backdropPaddingY","backdropPaddingX","getValueCount","getTickBackdropHeight","determineLimits","getTextAlignForAngle","adjustPointPositionForLabelHeight","textSize","numberOrZero","param","scale_radialLinear","drawingArea","NEGATIVE_INFINITY","plFont","furthestLimits","furthestAngles","_pointLabelSizes","valueCount","getPointPosition","getIndexAngle","toDegrees","hLimits","vLimits","setReductions","fitWithPointLabels","setCenterPoint","largestPossibleRadius","radiusReductionLeft","radiusReductionRight","radiusReductionTop","radiusReductionBottom","leftMovement","rightMovement","topMovement","bottomMovement","maxRight","maxLeft","maxTop","maxBottom","angleMultiplier","startAngleRadians","scalingFactor","distanceFromCenter","thisAngle","getBasePosition","angleLineOpts","pointLabelOpts","tickBackdropHeight","outerDistance","outerPosition","extra","pointLabelPosition","pointLabelFontColor","drawPointLabels","yCenterOffset","drawRadiusLine","_defaults$3","valueOrDefault$c","MIN_INTEGER","MIN_SAFE_INTEGER","MAX_INTEGER","MAX_SAFE_INTEGER","INTERVALS","millisecond","common","steps","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","arrayUnique","hash","out","interpolate$1","table","skey","tkey","mid","i0","i1","lo","lookup","span","toTimestamp","input","adapter","_adapter","time","parser","determineMajorUnit","generate","capacity","timeOpts","minUnit","interval","determineUnitForAutoTicks","unitStepSize","weekday","isoWeekday","majorTicksEnabled","first","milliseconds","determineStepSize","scale_time","adapters","date","warn","displayFormats","timestamp","timestamps","dataLabels","_horizontal","_table","_timestamps","getLabelCapacity","_unit","determineUnitForFormatting","_majorUnit","distribution","buildLookupTable","_offsets","computeOffsets","majorUnit","ticksFromTimestamps","tooltipFormat","datetime","tickFormatFunction","minorFormat","majorFormat","majorTime","majorTickOpts","formatter","getPixelForOffset","isReverse","getLabelWidth","ticksOpts","tickLabelWidth","tickFontSize","exampleTime","exampleLabel","_defaults$4","displayFormat","category","radialLinear","FORMATS","_id","valueOf","_format","amount","as","filler","propagate","mappers","visible","boundary","decodeFill","computeBoundary","scaleBottom","scaleTop","scaleZero","resolveTarget","visited","createMapper","isDrawable","drawArea","curve0","curve1","len0","len1","plugin_filler","afterDatasetsUpdate","$filler","mapper","beforeDatasetDraw","loop","p0","p1","d0","d1","doFill","noop$1","valueOrDefault$d","getBoxWidth","labelOpts","usePointStyle","boxWidth","ci","onLeave","lineDash","Legend","legendHitBoxes","_hoveredItem","doughnutMode","beforeBuildLabels","buildLabels","afterBuildLabels","legendItems","labelFont","hitboxes","lineWidths","totalHeight","vPadding","columnWidths","totalWidth","currentColWidth","currentColHeight","itemHeight","itemWidth","lineDefault","legendWidth","cursor","textWidth","SQRT2","drawLegendBox","halfFontSize","xLeft","yMiddle","_getLegendItemAt","hitBox","lh","hoveredItem","createNewLegendAndAttach","legendOpts","plugin_legend","_element","beforeInit","afterEvent","noop$2","Title","lineCount","fontOpts","titleX","titleY","createNewTitleBlockAndAttach","titleOpts","titleBlock","parseMaxStyle","styleValue","parentProperty","valueInPixels","isConstrainedValue","getConstraintDimension","domNode","maxStyle","percentageProperty","defaultView","_getParentNode","constrainedNode","getComputedStyle","constrainedContainer","hasCNode","hasCContainer","infinity","filterCallback","filtered","arrayToSearch","startIndex","currentItem","findPreviousWhere","epsilon","rounded","exponent","log","LOG10E","powerOf10","isPowerOf10","radians","centrePoint","anglePoint","distanceFromXCenter","distanceFromYCenter","radialDistanceFromCenter","aliasPixel","pixelWidth","currentDevicePixelRatio","firstPoint","middlePoint","afterPoint","d01","d12","s01","s12","fa","fb","EPSILON","pointBefore","pointCurrent","pointAfter","alphaK","betaK","tauK","squaredMagnitude","pointsWithTangents","deltaK","mK","pointsLen","slopeDeltaX","fraction","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","evt","originalEvent","srcElement","boundingRect","touches","clientX","clientY","getConstraintWidth","getConstraintHeight","_calculatePadding","parentDimension","parent","host","cw","clientHeight","ch","currentStyle","getPropertyValue","forceRatio","pixelRatio","pixelSize","arrayOfThings","gc","garbageCollect","longest","thing","nestedThing","gcLen","numberOfLines","CanvasGradient","colorValue","CanvasPattern","core_helpers","_adapters","Animation","animationService","Interaction","layouts","Scale","scaleService","Ticks","Tooltip","src","pluginService","PluginBase","canvasHelpers","layoutService","LinearScaleBase","klass","cfg","toLowerCase"],"mappings":"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","file":"static/js/5.b5ad7143.chunk.js","sourcesContent":["var baseAssignValue = require('./_baseAssignValue'),\n    createAggregator = require('./_createAggregator');\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The corresponding value of\n * each key is the last element responsible for generating the key. The\n * iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * var array = [\n *   { 'dir': 'left', 'code': 97 },\n *   { 'dir': 'right', 'code': 100 }\n * ];\n *\n * _.keyBy(array, function(o) {\n *   return String.fromCharCode(o.code);\n * });\n * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n *\n * _.keyBy(array, 'dir');\n * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n */\n\n\nvar keyBy = createAggregator(function (result, value, key) {\n  baseAssignValue(result, key, value);\n});\nmodule.exports = keyBy;","var arrayAggregator = require('./_arrayAggregator'),\n    baseAggregator = require('./_baseAggregator'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\n\n\nfunction createAggregator(setter, initializer) {\n  return function (collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nmodule.exports = createAggregator;","/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n\n  return accumulator;\n}\n\nmodule.exports = arrayAggregator;","var baseEach = require('./_baseEach');\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\n\n\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function (value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nmodule.exports = baseAggregator;","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global['custom-tooltips'] = {}));\n})(this, function (exports) {\n  'use strict';\n  /**\n   * --------------------------------------------------------------------------\n   * CoreUI Plugins - Custom Tooltips for Chart.js (v1.3.1): custom-tooltips.js\n   * Licensed under MIT (https://coreui.io/license)\n   * --------------------------------------------------------------------------\n   */\n\n  function CustomTooltips(tooltipModel) {\n    var _this = this; // Add unique id if not exist\n\n\n    var _setCanvasId = function _setCanvasId() {\n      var _idMaker = function _idMaker() {\n        var _hex = 16;\n        var _multiplier = 0x10000;\n        return ((1 + Math.random()) * _multiplier | 0).toString(_hex);\n      };\n\n      var _canvasId = \"_canvas-\" + (_idMaker() + _idMaker());\n\n      _this._chart.canvas.id = _canvasId;\n      return _canvasId;\n    };\n\n    var ClassName = {\n      ABOVE: 'above',\n      BELOW: 'below',\n      CHARTJS_TOOLTIP: 'chartjs-tooltip',\n      NO_TRANSFORM: 'no-transform',\n      TOOLTIP_BODY: 'tooltip-body',\n      TOOLTIP_BODY_ITEM: 'tooltip-body-item',\n      TOOLTIP_BODY_ITEM_COLOR: 'tooltip-body-item-color',\n      TOOLTIP_BODY_ITEM_LABEL: 'tooltip-body-item-label',\n      TOOLTIP_BODY_ITEM_VALUE: 'tooltip-body-item-value',\n      TOOLTIP_HEADER: 'tooltip-header',\n      TOOLTIP_HEADER_ITEM: 'tooltip-header-item'\n    };\n    var Selector = {\n      DIV: 'div',\n      SPAN: 'span',\n      TOOLTIP: (this._chart.canvas.id || _setCanvasId()) + \"-tooltip\"\n    };\n    var tooltip = document.getElementById(Selector.TOOLTIP);\n\n    if (!tooltip) {\n      tooltip = document.createElement('div');\n      tooltip.id = Selector.TOOLTIP;\n      tooltip.className = ClassName.CHARTJS_TOOLTIP;\n\n      this._chart.canvas.parentNode.appendChild(tooltip);\n    } // Hide if no tooltip\n\n\n    if (tooltipModel.opacity === 0) {\n      tooltip.style.opacity = 0;\n      return;\n    } // Set caret Position\n\n\n    tooltip.classList.remove(ClassName.ABOVE, ClassName.BELOW, ClassName.NO_TRANSFORM);\n\n    if (tooltipModel.yAlign) {\n      tooltip.classList.add(tooltipModel.yAlign);\n    } else {\n      tooltip.classList.add(ClassName.NO_TRANSFORM);\n    } // Set Text\n\n\n    if (tooltipModel.body) {\n      var titleLines = tooltipModel.title || [];\n      var tooltipHeader = document.createElement(Selector.DIV);\n      tooltipHeader.className = ClassName.TOOLTIP_HEADER;\n      titleLines.forEach(function (title) {\n        var tooltipHeaderTitle = document.createElement(Selector.DIV);\n        tooltipHeaderTitle.className = ClassName.TOOLTIP_HEADER_ITEM;\n        tooltipHeaderTitle.innerHTML = title;\n        tooltipHeader.appendChild(tooltipHeaderTitle);\n      });\n      var tooltipBody = document.createElement(Selector.DIV);\n      tooltipBody.className = ClassName.TOOLTIP_BODY;\n      var tooltipBodyItems = tooltipModel.body.map(function (item) {\n        return item.lines;\n      });\n      tooltipBodyItems.forEach(function (item, i) {\n        var tooltipBodyItem = document.createElement(Selector.DIV);\n        tooltipBodyItem.className = ClassName.TOOLTIP_BODY_ITEM;\n        var colors = tooltipModel.labelColors[i];\n        var tooltipBodyItemColor = document.createElement(Selector.SPAN);\n        tooltipBodyItemColor.className = ClassName.TOOLTIP_BODY_ITEM_COLOR;\n        tooltipBodyItemColor.style.backgroundColor = colors.backgroundColor;\n        tooltipBodyItem.appendChild(tooltipBodyItemColor);\n\n        if (item[0].split(':').length > 1) {\n          var tooltipBodyItemLabel = document.createElement(Selector.SPAN);\n          tooltipBodyItemLabel.className = ClassName.TOOLTIP_BODY_ITEM_LABEL;\n          tooltipBodyItemLabel.innerHTML = item[0].split(': ')[0];\n          tooltipBodyItem.appendChild(tooltipBodyItemLabel);\n          var tooltipBodyItemValue = document.createElement(Selector.SPAN);\n          tooltipBodyItemValue.className = ClassName.TOOLTIP_BODY_ITEM_VALUE;\n          tooltipBodyItemValue.innerHTML = item[0].split(': ').pop();\n          tooltipBodyItem.appendChild(tooltipBodyItemValue);\n        } else {\n          var _tooltipBodyItemValue = document.createElement(Selector.SPAN);\n\n          _tooltipBodyItemValue.className = ClassName.TOOLTIP_BODY_ITEM_VALUE;\n          _tooltipBodyItemValue.innerHTML = item[0];\n          tooltipBodyItem.appendChild(_tooltipBodyItemValue);\n        }\n\n        tooltipBody.appendChild(tooltipBodyItem);\n      });\n      tooltip.innerHTML = '';\n      tooltip.appendChild(tooltipHeader);\n      tooltip.appendChild(tooltipBody);\n    }\n\n    var position = this._chart.canvas.getBoundingClientRect();\n\n    var positionY = this._chart.canvas.offsetTop;\n    var positionX = this._chart.canvas.offsetLeft;\n    var positionLeft = positionX + tooltipModel.caretX;\n    var positionTop = positionY + tooltipModel.caretY; // eslint-disable-next-line\n\n    var halfWidth = tooltipModel.width / 2;\n\n    if (positionLeft + halfWidth > position.width) {\n      positionLeft -= halfWidth;\n    } else if (positionLeft < halfWidth) {\n      positionLeft += halfWidth;\n    } // Display, position, and set styles for font\n\n\n    tooltip.style.opacity = 1;\n    tooltip.style.left = positionLeft + \"px\";\n    tooltip.style.top = positionTop + \"px\";\n  }\n\n  var customTooltips = CustomTooltips; // TODO: camel-case\n\n  exports.CustomTooltips = CustomTooltips;\n  exports.customTooltips = customTooltips;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","var defineProperty = require('./_defineProperty');\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\n\n\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nmodule.exports = baseAssignValue;","var baseForOwn = require('./_baseForOwn'),\n    createBaseEach = require('./_createBaseEach');\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\n\n\nvar baseEach = createBaseEach(baseForOwn);\nmodule.exports = baseEach;","var getNative = require('./_getNative');\n\nvar defineProperty = function () {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}();\n\nmodule.exports = defineProperty;","var isArrayLike = require('./isArrayLike');\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\n\n\nfunction createBaseEach(eachFunc, fromRight) {\n  return function (collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while (fromRight ? index-- : ++index < length) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n\n    return collection;\n  };\n}\n\nmodule.exports = createBaseEach;","var baseIsEqual = require('./_baseIsEqual');\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\n\n\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nmodule.exports = isEqual;","var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Chart from 'chart.js';\nimport isEqual from 'lodash/isEqual';\nimport keyBy from 'lodash/keyBy';\nvar NODE_ENV = typeof process !== 'undefined' && process.env && process.env.NODE_ENV;\n\nvar ChartComponent = function (_React$Component) {\n  _inherits(ChartComponent, _React$Component);\n\n  function ChartComponent() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ChartComponent);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleOnClick = function (event) {\n      var instance = _this.chartInstance;\n      var _this$props = _this.props,\n          getDatasetAtEvent = _this$props.getDatasetAtEvent,\n          getElementAtEvent = _this$props.getElementAtEvent,\n          getElementsAtEvent = _this$props.getElementsAtEvent,\n          onElementsClick = _this$props.onElementsClick;\n      getDatasetAtEvent && getDatasetAtEvent(instance.getDatasetAtEvent(event), event);\n      getElementAtEvent && getElementAtEvent(instance.getElementAtEvent(event), event);\n      getElementsAtEvent && getElementsAtEvent(instance.getElementsAtEvent(event), event);\n      onElementsClick && onElementsClick(instance.getElementsAtEvent(event), event); // Backward compatibility\n    }, _this.ref = function (element) {\n      _this.element = element;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  ChartComponent.prototype.componentWillMount = function componentWillMount() {\n    this.chartInstance = undefined;\n  };\n\n  ChartComponent.prototype.componentDidMount = function componentDidMount() {\n    this.renderChart();\n  };\n\n  ChartComponent.prototype.componentDidUpdate = function componentDidUpdate() {\n    if (this.props.redraw) {\n      this.destroyChart();\n      this.renderChart();\n      return;\n    }\n\n    this.updateChart();\n  };\n\n  ChartComponent.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n    var _props = this.props,\n        redraw = _props.redraw,\n        type = _props.type,\n        options = _props.options,\n        plugins = _props.plugins,\n        legend = _props.legend,\n        height = _props.height,\n        width = _props.width;\n\n    if (nextProps.redraw === true) {\n      return true;\n    }\n\n    if (height !== nextProps.height || width !== nextProps.width) {\n      return true;\n    }\n\n    if (type !== nextProps.type) {\n      return true;\n    }\n\n    if (!isEqual(legend, nextProps.legend)) {\n      return true;\n    }\n\n    if (!isEqual(options, nextProps.options)) {\n      return true;\n    }\n\n    var nextData = this.transformDataProp(nextProps);\n\n    if (!isEqual(this.shadowDataProp, nextData)) {\n      return true;\n    }\n\n    return !isEqual(plugins, nextProps.plugins);\n  };\n\n  ChartComponent.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.destroyChart();\n  };\n\n  ChartComponent.prototype.transformDataProp = function transformDataProp(props) {\n    var data = props.data;\n\n    if (typeof data == 'function') {\n      var node = this.element;\n      return data(node);\n    } else {\n      return data;\n    }\n  }; // Chart.js directly mutates the data.dataset objects by adding _meta proprerty\n  // this makes impossible to compare the current and next data changes\n  // therefore we memoize the data prop while sending a fake to Chart.js for mutation.\n  // see https://github.com/chartjs/Chart.js/blob/master/src/core/core.controller.js#L615-L617\n\n\n  ChartComponent.prototype.memoizeDataProps = function memoizeDataProps() {\n    if (!this.props.data) {\n      return;\n    }\n\n    var data = this.transformDataProp(this.props);\n    this.shadowDataProp = _extends({}, data, {\n      datasets: data.datasets && data.datasets.map(function (set) {\n        return _extends({}, set);\n      })\n    });\n    this.saveCurrentDatasets(); // to remove the dataset metadata from this chart when the chart is destroyed\n\n    return data;\n  };\n\n  ChartComponent.prototype.checkDatasets = function checkDatasets(datasets) {\n    var isDev = NODE_ENV !== 'production' && NODE_ENV !== 'prod';\n    var usingCustomKeyProvider = this.props.datasetKeyProvider !== ChartComponent.getLabelAsKey;\n    var multipleDatasets = datasets.length > 1;\n\n    if (isDev && multipleDatasets && !usingCustomKeyProvider) {\n      var shouldWarn = false;\n      datasets.forEach(function (dataset) {\n        if (!dataset.label) {\n          shouldWarn = true;\n        }\n      });\n\n      if (shouldWarn) {\n        console.error('[react-chartjs-2] Warning: Each dataset needs a unique key. By default, the \"label\" property on each dataset is used. Alternatively, you may provide a \"datasetKeyProvider\" as a prop that returns a unique key.');\n      }\n    }\n  };\n\n  ChartComponent.prototype.getCurrentDatasets = function getCurrentDatasets() {\n    return this.chartInstance && this.chartInstance.config.data && this.chartInstance.config.data.datasets || [];\n  };\n\n  ChartComponent.prototype.saveCurrentDatasets = function saveCurrentDatasets() {\n    var _this2 = this;\n\n    this.datasets = this.datasets || {};\n    var currentDatasets = this.getCurrentDatasets();\n    currentDatasets.forEach(function (d) {\n      _this2.datasets[_this2.props.datasetKeyProvider(d)] = d;\n    });\n  };\n\n  ChartComponent.prototype.updateChart = function updateChart() {\n    var _this3 = this;\n\n    var options = this.props.options;\n    var data = this.memoizeDataProps(this.props);\n    if (!this.chartInstance) return;\n\n    if (options) {\n      this.chartInstance.options = Chart.helpers.configMerge(this.chartInstance.options, options);\n    } // Pipe datasets to chart instance datasets enabling\n    // seamless transitions\n\n\n    var currentDatasets = this.getCurrentDatasets();\n    var nextDatasets = data.datasets || [];\n    this.checkDatasets(currentDatasets);\n    var currentDatasetsIndexed = keyBy(currentDatasets, this.props.datasetKeyProvider); // We can safely replace the dataset array, as long as we retain the _meta property\n    // on each dataset.\n\n    this.chartInstance.config.data.datasets = nextDatasets.map(function (next) {\n      var current = currentDatasetsIndexed[_this3.props.datasetKeyProvider(next)];\n\n      if (current && current.type === next.type) {\n        // The data array must be edited in place. As chart.js adds listeners to it.\n        current.data.splice(next.data.length);\n        next.data.forEach(function (point, pid) {\n          current.data[pid] = next.data[pid];\n        });\n\n        var _data = next.data,\n            otherProps = _objectWithoutProperties(next, ['data']); // Merge properties. Notice a weakness here. If a property is removed\n        // from next, it will be retained by current and never disappears.\n        // Workaround is to set value to null or undefined in next.\n\n\n        return _extends({}, current, otherProps);\n      } else {\n        return next;\n      }\n    });\n\n    var datasets = data.datasets,\n        rest = _objectWithoutProperties(data, ['datasets']);\n\n    this.chartInstance.config.data = _extends({}, this.chartInstance.config.data, rest);\n    this.chartInstance.update();\n  };\n\n  ChartComponent.prototype.renderChart = function renderChart() {\n    var _props2 = this.props,\n        options = _props2.options,\n        legend = _props2.legend,\n        type = _props2.type,\n        plugins = _props2.plugins;\n    var node = this.element;\n    var data = this.memoizeDataProps();\n\n    if (typeof legend !== 'undefined' && !isEqual(ChartComponent.defaultProps.legend, legend)) {\n      options.legend = legend;\n    }\n\n    this.chartInstance = new Chart(node, {\n      type: type,\n      data: data,\n      options: options,\n      plugins: plugins\n    });\n  };\n\n  ChartComponent.prototype.destroyChart = function destroyChart() {\n    // Put all of the datasets that have existed in the chart back on the chart\n    // so that the metadata associated with this chart get destroyed.\n    // This allows the datasets to be used in another chart. This can happen,\n    // for example, in a tabbed UI where the chart gets created each time the\n    // tab gets switched to the chart and uses the same data).\n    this.saveCurrentDatasets();\n    var datasets = Object.values(this.datasets);\n    this.chartInstance.config.data.datasets = datasets;\n    this.chartInstance.destroy();\n  };\n\n  ChartComponent.prototype.render = function render() {\n    var _props3 = this.props,\n        height = _props3.height,\n        width = _props3.width,\n        id = _props3.id;\n    return React.createElement('canvas', {\n      ref: this.ref,\n      height: height,\n      width: width,\n      id: id,\n      onClick: this.handleOnClick\n    });\n  };\n\n  return ChartComponent;\n}(React.Component);\n\nChartComponent.getLabelAsKey = function (d) {\n  return d.label;\n};\n\nChartComponent.propTypes = {\n  data: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired,\n  getDatasetAtEvent: PropTypes.func,\n  getElementAtEvent: PropTypes.func,\n  getElementsAtEvent: PropTypes.func,\n  height: PropTypes.number,\n  legend: PropTypes.object,\n  onElementsClick: PropTypes.func,\n  options: PropTypes.object,\n  plugins: PropTypes.arrayOf(PropTypes.object),\n  redraw: PropTypes.bool,\n  type: function type(props, propName, componentName) {\n    if (!Chart.controllers[props[propName]]) {\n      return new Error('Invalid chart type `' + props[propName] + '` supplied to' + ' `' + componentName + '`.');\n    }\n  },\n  width: PropTypes.number,\n  datasetKeyProvider: PropTypes.func\n};\nChartComponent.defaultProps = {\n  legend: {\n    display: true,\n    position: 'bottom'\n  },\n  type: 'doughnut',\n  height: 150,\n  width: 300,\n  redraw: false,\n  options: {},\n  datasetKeyProvider: ChartComponent.getLabelAsKey\n};\nexport default ChartComponent;\nexport var Doughnut = function (_React$Component2) {\n  _inherits(Doughnut, _React$Component2);\n\n  function Doughnut() {\n    _classCallCheck(this, Doughnut);\n\n    return _possibleConstructorReturn(this, _React$Component2.apply(this, arguments));\n  }\n\n  Doughnut.prototype.render = function render() {\n    var _this5 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref) {\n        return _this5.chartInstance = _ref && _ref.chartInstance;\n      },\n      type: 'doughnut'\n    }));\n  };\n\n  return Doughnut;\n}(React.Component);\nexport var Pie = function (_React$Component3) {\n  _inherits(Pie, _React$Component3);\n\n  function Pie() {\n    _classCallCheck(this, Pie);\n\n    return _possibleConstructorReturn(this, _React$Component3.apply(this, arguments));\n  }\n\n  Pie.prototype.render = function render() {\n    var _this7 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref2) {\n        return _this7.chartInstance = _ref2 && _ref2.chartInstance;\n      },\n      type: 'pie'\n    }));\n  };\n\n  return Pie;\n}(React.Component);\nexport var Line = function (_React$Component4) {\n  _inherits(Line, _React$Component4);\n\n  function Line() {\n    _classCallCheck(this, Line);\n\n    return _possibleConstructorReturn(this, _React$Component4.apply(this, arguments));\n  }\n\n  Line.prototype.render = function render() {\n    var _this9 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref3) {\n        return _this9.chartInstance = _ref3 && _ref3.chartInstance;\n      },\n      type: 'line'\n    }));\n  };\n\n  return Line;\n}(React.Component);\nexport var Bar = function (_React$Component5) {\n  _inherits(Bar, _React$Component5);\n\n  function Bar() {\n    _classCallCheck(this, Bar);\n\n    return _possibleConstructorReturn(this, _React$Component5.apply(this, arguments));\n  }\n\n  Bar.prototype.render = function render() {\n    var _this11 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref4) {\n        return _this11.chartInstance = _ref4 && _ref4.chartInstance;\n      },\n      type: 'bar'\n    }));\n  };\n\n  return Bar;\n}(React.Component);\nexport var HorizontalBar = function (_React$Component6) {\n  _inherits(HorizontalBar, _React$Component6);\n\n  function HorizontalBar() {\n    _classCallCheck(this, HorizontalBar);\n\n    return _possibleConstructorReturn(this, _React$Component6.apply(this, arguments));\n  }\n\n  HorizontalBar.prototype.render = function render() {\n    var _this13 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref5) {\n        return _this13.chartInstance = _ref5 && _ref5.chartInstance;\n      },\n      type: 'horizontalBar'\n    }));\n  };\n\n  return HorizontalBar;\n}(React.Component);\nexport var Radar = function (_React$Component7) {\n  _inherits(Radar, _React$Component7);\n\n  function Radar() {\n    _classCallCheck(this, Radar);\n\n    return _possibleConstructorReturn(this, _React$Component7.apply(this, arguments));\n  }\n\n  Radar.prototype.render = function render() {\n    var _this15 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref6) {\n        return _this15.chartInstance = _ref6 && _ref6.chartInstance;\n      },\n      type: 'radar'\n    }));\n  };\n\n  return Radar;\n}(React.Component);\nexport var Polar = function (_React$Component8) {\n  _inherits(Polar, _React$Component8);\n\n  function Polar() {\n    _classCallCheck(this, Polar);\n\n    return _possibleConstructorReturn(this, _React$Component8.apply(this, arguments));\n  }\n\n  Polar.prototype.render = function render() {\n    var _this17 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref7) {\n        return _this17.chartInstance = _ref7 && _ref7.chartInstance;\n      },\n      type: 'polarArea'\n    }));\n  };\n\n  return Polar;\n}(React.Component);\nexport var Bubble = function (_React$Component9) {\n  _inherits(Bubble, _React$Component9);\n\n  function Bubble() {\n    _classCallCheck(this, Bubble);\n\n    return _possibleConstructorReturn(this, _React$Component9.apply(this, arguments));\n  }\n\n  Bubble.prototype.render = function render() {\n    var _this19 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref8) {\n        return _this19.chartInstance = _ref8 && _ref8.chartInstance;\n      },\n      type: 'bubble'\n    }));\n  };\n\n  return Bubble;\n}(React.Component);\nexport var Scatter = function (_React$Component10) {\n  _inherits(Scatter, _React$Component10);\n\n  function Scatter() {\n    _classCallCheck(this, Scatter);\n\n    return _possibleConstructorReturn(this, _React$Component10.apply(this, arguments));\n  }\n\n  Scatter.prototype.render = function render() {\n    var _this21 = this;\n\n    return React.createElement(ChartComponent, _extends({}, this.props, {\n      ref: function ref(_ref9) {\n        return _this21.chartInstance = _ref9 && _ref9.chartInstance;\n      },\n      type: 'scatter'\n    }));\n  };\n\n  return Scatter;\n}(React.Component);\nexport var defaults = Chart.defaults;\nexport { Chart };","/*!\n * Chart.js v2.8.0\n * https://www.chartjs.org\n * (c) 2019 Chart.js Contributors\n * Released under the MIT License\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(function () {\n    try {\n      return require('moment');\n    } catch (e) {}\n  }()) : typeof define === 'function' && define.amd ? define(['require'], function (require) {\n    return factory(function () {\n      try {\n        return require('moment');\n      } catch (e) {}\n    }());\n  }) : global.Chart = factory(global.moment);\n})(this, function (moment) {\n  'use strict';\n\n  moment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;\n  /* MIT license */\n\n  var conversions = {\n    rgb2hsl: rgb2hsl,\n    rgb2hsv: rgb2hsv,\n    rgb2hwb: rgb2hwb,\n    rgb2cmyk: rgb2cmyk,\n    rgb2keyword: rgb2keyword,\n    rgb2xyz: rgb2xyz,\n    rgb2lab: rgb2lab,\n    rgb2lch: rgb2lch,\n    hsl2rgb: hsl2rgb,\n    hsl2hsv: hsl2hsv,\n    hsl2hwb: hsl2hwb,\n    hsl2cmyk: hsl2cmyk,\n    hsl2keyword: hsl2keyword,\n    hsv2rgb: hsv2rgb,\n    hsv2hsl: hsv2hsl,\n    hsv2hwb: hsv2hwb,\n    hsv2cmyk: hsv2cmyk,\n    hsv2keyword: hsv2keyword,\n    hwb2rgb: hwb2rgb,\n    hwb2hsl: hwb2hsl,\n    hwb2hsv: hwb2hsv,\n    hwb2cmyk: hwb2cmyk,\n    hwb2keyword: hwb2keyword,\n    cmyk2rgb: cmyk2rgb,\n    cmyk2hsl: cmyk2hsl,\n    cmyk2hsv: cmyk2hsv,\n    cmyk2hwb: cmyk2hwb,\n    cmyk2keyword: cmyk2keyword,\n    keyword2rgb: keyword2rgb,\n    keyword2hsl: keyword2hsl,\n    keyword2hsv: keyword2hsv,\n    keyword2hwb: keyword2hwb,\n    keyword2cmyk: keyword2cmyk,\n    keyword2lab: keyword2lab,\n    keyword2xyz: keyword2xyz,\n    xyz2rgb: xyz2rgb,\n    xyz2lab: xyz2lab,\n    xyz2lch: xyz2lch,\n    lab2xyz: lab2xyz,\n    lab2rgb: lab2rgb,\n    lab2lch: lab2lch,\n    lch2lab: lch2lab,\n    lch2xyz: lch2xyz,\n    lch2rgb: lch2rgb\n  };\n\n  function rgb2hsl(rgb) {\n    var r = rgb[0] / 255,\n        g = rgb[1] / 255,\n        b = rgb[2] / 255,\n        min = Math.min(r, g, b),\n        max = Math.max(r, g, b),\n        delta = max - min,\n        h,\n        s,\n        l;\n    if (max == min) h = 0;else if (r == max) h = (g - b) / delta;else if (g == max) h = 2 + (b - r) / delta;else if (b == max) h = 4 + (r - g) / delta;\n    h = Math.min(h * 60, 360);\n    if (h < 0) h += 360;\n    l = (min + max) / 2;\n    if (max == min) s = 0;else if (l <= 0.5) s = delta / (max + min);else s = delta / (2 - max - min);\n    return [h, s * 100, l * 100];\n  }\n\n  function rgb2hsv(rgb) {\n    var r = rgb[0],\n        g = rgb[1],\n        b = rgb[2],\n        min = Math.min(r, g, b),\n        max = Math.max(r, g, b),\n        delta = max - min,\n        h,\n        s,\n        v;\n    if (max == 0) s = 0;else s = delta / max * 1000 / 10;\n    if (max == min) h = 0;else if (r == max) h = (g - b) / delta;else if (g == max) h = 2 + (b - r) / delta;else if (b == max) h = 4 + (r - g) / delta;\n    h = Math.min(h * 60, 360);\n    if (h < 0) h += 360;\n    v = max / 255 * 1000 / 10;\n    return [h, s, v];\n  }\n\n  function rgb2hwb(rgb) {\n    var r = rgb[0],\n        g = rgb[1],\n        b = rgb[2],\n        h = rgb2hsl(rgb)[0],\n        w = 1 / 255 * Math.min(r, Math.min(g, b)),\n        b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n    return [h, w * 100, b * 100];\n  }\n\n  function rgb2cmyk(rgb) {\n    var r = rgb[0] / 255,\n        g = rgb[1] / 255,\n        b = rgb[2] / 255,\n        c,\n        m,\n        y,\n        k;\n    k = Math.min(1 - r, 1 - g, 1 - b);\n    c = (1 - r - k) / (1 - k) || 0;\n    m = (1 - g - k) / (1 - k) || 0;\n    y = (1 - b - k) / (1 - k) || 0;\n    return [c * 100, m * 100, y * 100, k * 100];\n  }\n\n  function rgb2keyword(rgb) {\n    return reverseKeywords[JSON.stringify(rgb)];\n  }\n\n  function rgb2xyz(rgb) {\n    var r = rgb[0] / 255,\n        g = rgb[1] / 255,\n        b = rgb[2] / 255; // assume sRGB\n\n    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\n    var x = r * 0.4124 + g * 0.3576 + b * 0.1805;\n    var y = r * 0.2126 + g * 0.7152 + b * 0.0722;\n    var z = r * 0.0193 + g * 0.1192 + b * 0.9505;\n    return [x * 100, y * 100, z * 100];\n  }\n\n  function rgb2lab(rgb) {\n    var xyz = rgb2xyz(rgb),\n        x = xyz[0],\n        y = xyz[1],\n        z = xyz[2],\n        l,\n        a,\n        b;\n    x /= 95.047;\n    y /= 100;\n    z /= 108.883;\n    x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n    y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n    z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n    l = 116 * y - 16;\n    a = 500 * (x - y);\n    b = 200 * (y - z);\n    return [l, a, b];\n  }\n\n  function rgb2lch(args) {\n    return lab2lch(rgb2lab(args));\n  }\n\n  function hsl2rgb(hsl) {\n    var h = hsl[0] / 360,\n        s = hsl[1] / 100,\n        l = hsl[2] / 100,\n        t1,\n        t2,\n        t3,\n        rgb,\n        val;\n\n    if (s == 0) {\n      val = l * 255;\n      return [val, val, val];\n    }\n\n    if (l < 0.5) t2 = l * (1 + s);else t2 = l + s - l * s;\n    t1 = 2 * l - t2;\n    rgb = [0, 0, 0];\n\n    for (var i = 0; i < 3; i++) {\n      t3 = h + 1 / 3 * -(i - 1);\n      t3 < 0 && t3++;\n      t3 > 1 && t3--;\n      if (6 * t3 < 1) val = t1 + (t2 - t1) * 6 * t3;else if (2 * t3 < 1) val = t2;else if (3 * t3 < 2) val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;else val = t1;\n      rgb[i] = val * 255;\n    }\n\n    return rgb;\n  }\n\n  function hsl2hsv(hsl) {\n    var h = hsl[0],\n        s = hsl[1] / 100,\n        l = hsl[2] / 100,\n        sv,\n        v;\n\n    if (l === 0) {\n      // no need to do calc on black\n      // also avoids divide by 0 error\n      return [0, 0, 0];\n    }\n\n    l *= 2;\n    s *= l <= 1 ? l : 2 - l;\n    v = (l + s) / 2;\n    sv = 2 * s / (l + s);\n    return [h, sv * 100, v * 100];\n  }\n\n  function hsl2hwb(args) {\n    return rgb2hwb(hsl2rgb(args));\n  }\n\n  function hsl2cmyk(args) {\n    return rgb2cmyk(hsl2rgb(args));\n  }\n\n  function hsl2keyword(args) {\n    return rgb2keyword(hsl2rgb(args));\n  }\n\n  function hsv2rgb(hsv) {\n    var h = hsv[0] / 60,\n        s = hsv[1] / 100,\n        v = hsv[2] / 100,\n        hi = Math.floor(h) % 6;\n    var f = h - Math.floor(h),\n        p = 255 * v * (1 - s),\n        q = 255 * v * (1 - s * f),\n        t = 255 * v * (1 - s * (1 - f)),\n        v = 255 * v;\n\n    switch (hi) {\n      case 0:\n        return [v, t, p];\n\n      case 1:\n        return [q, v, p];\n\n      case 2:\n        return [p, v, t];\n\n      case 3:\n        return [p, q, v];\n\n      case 4:\n        return [t, p, v];\n\n      case 5:\n        return [v, p, q];\n    }\n  }\n\n  function hsv2hsl(hsv) {\n    var h = hsv[0],\n        s = hsv[1] / 100,\n        v = hsv[2] / 100,\n        sl,\n        l;\n    l = (2 - s) * v;\n    sl = s * v;\n    sl /= l <= 1 ? l : 2 - l;\n    sl = sl || 0;\n    l /= 2;\n    return [h, sl * 100, l * 100];\n  }\n\n  function hsv2hwb(args) {\n    return rgb2hwb(hsv2rgb(args));\n  }\n\n  function hsv2cmyk(args) {\n    return rgb2cmyk(hsv2rgb(args));\n  }\n\n  function hsv2keyword(args) {\n    return rgb2keyword(hsv2rgb(args));\n  } // http://dev.w3.org/csswg/css-color/#hwb-to-rgb\n\n\n  function hwb2rgb(hwb) {\n    var h = hwb[0] / 360,\n        wh = hwb[1] / 100,\n        bl = hwb[2] / 100,\n        ratio = wh + bl,\n        i,\n        v,\n        f,\n        n; // wh + bl cant be > 1\n\n    if (ratio > 1) {\n      wh /= ratio;\n      bl /= ratio;\n    }\n\n    i = Math.floor(6 * h);\n    v = 1 - bl;\n    f = 6 * h - i;\n\n    if ((i & 0x01) != 0) {\n      f = 1 - f;\n    }\n\n    n = wh + f * (v - wh); // linear interpolation\n\n    switch (i) {\n      default:\n      case 6:\n      case 0:\n        r = v;\n        g = n;\n        b = wh;\n        break;\n\n      case 1:\n        r = n;\n        g = v;\n        b = wh;\n        break;\n\n      case 2:\n        r = wh;\n        g = v;\n        b = n;\n        break;\n\n      case 3:\n        r = wh;\n        g = n;\n        b = v;\n        break;\n\n      case 4:\n        r = n;\n        g = wh;\n        b = v;\n        break;\n\n      case 5:\n        r = v;\n        g = wh;\n        b = n;\n        break;\n    }\n\n    return [r * 255, g * 255, b * 255];\n  }\n\n  function hwb2hsl(args) {\n    return rgb2hsl(hwb2rgb(args));\n  }\n\n  function hwb2hsv(args) {\n    return rgb2hsv(hwb2rgb(args));\n  }\n\n  function hwb2cmyk(args) {\n    return rgb2cmyk(hwb2rgb(args));\n  }\n\n  function hwb2keyword(args) {\n    return rgb2keyword(hwb2rgb(args));\n  }\n\n  function cmyk2rgb(cmyk) {\n    var c = cmyk[0] / 100,\n        m = cmyk[1] / 100,\n        y = cmyk[2] / 100,\n        k = cmyk[3] / 100,\n        r,\n        g,\n        b;\n    r = 1 - Math.min(1, c * (1 - k) + k);\n    g = 1 - Math.min(1, m * (1 - k) + k);\n    b = 1 - Math.min(1, y * (1 - k) + k);\n    return [r * 255, g * 255, b * 255];\n  }\n\n  function cmyk2hsl(args) {\n    return rgb2hsl(cmyk2rgb(args));\n  }\n\n  function cmyk2hsv(args) {\n    return rgb2hsv(cmyk2rgb(args));\n  }\n\n  function cmyk2hwb(args) {\n    return rgb2hwb(cmyk2rgb(args));\n  }\n\n  function cmyk2keyword(args) {\n    return rgb2keyword(cmyk2rgb(args));\n  }\n\n  function xyz2rgb(xyz) {\n    var x = xyz[0] / 100,\n        y = xyz[1] / 100,\n        z = xyz[2] / 100,\n        r,\n        g,\n        b;\n    r = x * 3.2406 + y * -1.5372 + z * -0.4986;\n    g = x * -0.9689 + y * 1.8758 + z * 0.0415;\n    b = x * 0.0557 + y * -0.2040 + z * 1.0570; // assume sRGB\n\n    r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r = r * 12.92;\n    g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g = g * 12.92;\n    b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b = b * 12.92;\n    r = Math.min(Math.max(0, r), 1);\n    g = Math.min(Math.max(0, g), 1);\n    b = Math.min(Math.max(0, b), 1);\n    return [r * 255, g * 255, b * 255];\n  }\n\n  function xyz2lab(xyz) {\n    var x = xyz[0],\n        y = xyz[1],\n        z = xyz[2],\n        l,\n        a,\n        b;\n    x /= 95.047;\n    y /= 100;\n    z /= 108.883;\n    x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n    y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n    z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n    l = 116 * y - 16;\n    a = 500 * (x - y);\n    b = 200 * (y - z);\n    return [l, a, b];\n  }\n\n  function xyz2lch(args) {\n    return lab2lch(xyz2lab(args));\n  }\n\n  function lab2xyz(lab) {\n    var l = lab[0],\n        a = lab[1],\n        b = lab[2],\n        x,\n        y,\n        z,\n        y2;\n\n    if (l <= 8) {\n      y = l * 100 / 903.3;\n      y2 = 7.787 * (y / 100) + 16 / 116;\n    } else {\n      y = 100 * Math.pow((l + 16) / 116, 3);\n      y2 = Math.pow(y / 100, 1 / 3);\n    }\n\n    x = x / 95.047 <= 0.008856 ? x = 95.047 * (a / 500 + y2 - 16 / 116) / 7.787 : 95.047 * Math.pow(a / 500 + y2, 3);\n    z = z / 108.883 <= 0.008859 ? z = 108.883 * (y2 - b / 200 - 16 / 116) / 7.787 : 108.883 * Math.pow(y2 - b / 200, 3);\n    return [x, y, z];\n  }\n\n  function lab2lch(lab) {\n    var l = lab[0],\n        a = lab[1],\n        b = lab[2],\n        hr,\n        h,\n        c;\n    hr = Math.atan2(b, a);\n    h = hr * 360 / 2 / Math.PI;\n\n    if (h < 0) {\n      h += 360;\n    }\n\n    c = Math.sqrt(a * a + b * b);\n    return [l, c, h];\n  }\n\n  function lab2rgb(args) {\n    return xyz2rgb(lab2xyz(args));\n  }\n\n  function lch2lab(lch) {\n    var l = lch[0],\n        c = lch[1],\n        h = lch[2],\n        a,\n        b,\n        hr;\n    hr = h / 360 * 2 * Math.PI;\n    a = c * Math.cos(hr);\n    b = c * Math.sin(hr);\n    return [l, a, b];\n  }\n\n  function lch2xyz(args) {\n    return lab2xyz(lch2lab(args));\n  }\n\n  function lch2rgb(args) {\n    return lab2rgb(lch2lab(args));\n  }\n\n  function keyword2rgb(keyword) {\n    return cssKeywords[keyword];\n  }\n\n  function keyword2hsl(args) {\n    return rgb2hsl(keyword2rgb(args));\n  }\n\n  function keyword2hsv(args) {\n    return rgb2hsv(keyword2rgb(args));\n  }\n\n  function keyword2hwb(args) {\n    return rgb2hwb(keyword2rgb(args));\n  }\n\n  function keyword2cmyk(args) {\n    return rgb2cmyk(keyword2rgb(args));\n  }\n\n  function keyword2lab(args) {\n    return rgb2lab(keyword2rgb(args));\n  }\n\n  function keyword2xyz(args) {\n    return rgb2xyz(keyword2rgb(args));\n  }\n\n  var cssKeywords = {\n    aliceblue: [240, 248, 255],\n    antiquewhite: [250, 235, 215],\n    aqua: [0, 255, 255],\n    aquamarine: [127, 255, 212],\n    azure: [240, 255, 255],\n    beige: [245, 245, 220],\n    bisque: [255, 228, 196],\n    black: [0, 0, 0],\n    blanchedalmond: [255, 235, 205],\n    blue: [0, 0, 255],\n    blueviolet: [138, 43, 226],\n    brown: [165, 42, 42],\n    burlywood: [222, 184, 135],\n    cadetblue: [95, 158, 160],\n    chartreuse: [127, 255, 0],\n    chocolate: [210, 105, 30],\n    coral: [255, 127, 80],\n    cornflowerblue: [100, 149, 237],\n    cornsilk: [255, 248, 220],\n    crimson: [220, 20, 60],\n    cyan: [0, 255, 255],\n    darkblue: [0, 0, 139],\n    darkcyan: [0, 139, 139],\n    darkgoldenrod: [184, 134, 11],\n    darkgray: [169, 169, 169],\n    darkgreen: [0, 100, 0],\n    darkgrey: [169, 169, 169],\n    darkkhaki: [189, 183, 107],\n    darkmagenta: [139, 0, 139],\n    darkolivegreen: [85, 107, 47],\n    darkorange: [255, 140, 0],\n    darkorchid: [153, 50, 204],\n    darkred: [139, 0, 0],\n    darksalmon: [233, 150, 122],\n    darkseagreen: [143, 188, 143],\n    darkslateblue: [72, 61, 139],\n    darkslategray: [47, 79, 79],\n    darkslategrey: [47, 79, 79],\n    darkturquoise: [0, 206, 209],\n    darkviolet: [148, 0, 211],\n    deeppink: [255, 20, 147],\n    deepskyblue: [0, 191, 255],\n    dimgray: [105, 105, 105],\n    dimgrey: [105, 105, 105],\n    dodgerblue: [30, 144, 255],\n    firebrick: [178, 34, 34],\n    floralwhite: [255, 250, 240],\n    forestgreen: [34, 139, 34],\n    fuchsia: [255, 0, 255],\n    gainsboro: [220, 220, 220],\n    ghostwhite: [248, 248, 255],\n    gold: [255, 215, 0],\n    goldenrod: [218, 165, 32],\n    gray: [128, 128, 128],\n    green: [0, 128, 0],\n    greenyellow: [173, 255, 47],\n    grey: [128, 128, 128],\n    honeydew: [240, 255, 240],\n    hotpink: [255, 105, 180],\n    indianred: [205, 92, 92],\n    indigo: [75, 0, 130],\n    ivory: [255, 255, 240],\n    khaki: [240, 230, 140],\n    lavender: [230, 230, 250],\n    lavenderblush: [255, 240, 245],\n    lawngreen: [124, 252, 0],\n    lemonchiffon: [255, 250, 205],\n    lightblue: [173, 216, 230],\n    lightcoral: [240, 128, 128],\n    lightcyan: [224, 255, 255],\n    lightgoldenrodyellow: [250, 250, 210],\n    lightgray: [211, 211, 211],\n    lightgreen: [144, 238, 144],\n    lightgrey: [211, 211, 211],\n    lightpink: [255, 182, 193],\n    lightsalmon: [255, 160, 122],\n    lightseagreen: [32, 178, 170],\n    lightskyblue: [135, 206, 250],\n    lightslategray: [119, 136, 153],\n    lightslategrey: [119, 136, 153],\n    lightsteelblue: [176, 196, 222],\n    lightyellow: [255, 255, 224],\n    lime: [0, 255, 0],\n    limegreen: [50, 205, 50],\n    linen: [250, 240, 230],\n    magenta: [255, 0, 255],\n    maroon: [128, 0, 0],\n    mediumaquamarine: [102, 205, 170],\n    mediumblue: [0, 0, 205],\n    mediumorchid: [186, 85, 211],\n    mediumpurple: [147, 112, 219],\n    mediumseagreen: [60, 179, 113],\n    mediumslateblue: [123, 104, 238],\n    mediumspringgreen: [0, 250, 154],\n    mediumturquoise: [72, 209, 204],\n    mediumvioletred: [199, 21, 133],\n    midnightblue: [25, 25, 112],\n    mintcream: [245, 255, 250],\n    mistyrose: [255, 228, 225],\n    moccasin: [255, 228, 181],\n    navajowhite: [255, 222, 173],\n    navy: [0, 0, 128],\n    oldlace: [253, 245, 230],\n    olive: [128, 128, 0],\n    olivedrab: [107, 142, 35],\n    orange: [255, 165, 0],\n    orangered: [255, 69, 0],\n    orchid: [218, 112, 214],\n    palegoldenrod: [238, 232, 170],\n    palegreen: [152, 251, 152],\n    paleturquoise: [175, 238, 238],\n    palevioletred: [219, 112, 147],\n    papayawhip: [255, 239, 213],\n    peachpuff: [255, 218, 185],\n    peru: [205, 133, 63],\n    pink: [255, 192, 203],\n    plum: [221, 160, 221],\n    powderblue: [176, 224, 230],\n    purple: [128, 0, 128],\n    rebeccapurple: [102, 51, 153],\n    red: [255, 0, 0],\n    rosybrown: [188, 143, 143],\n    royalblue: [65, 105, 225],\n    saddlebrown: [139, 69, 19],\n    salmon: [250, 128, 114],\n    sandybrown: [244, 164, 96],\n    seagreen: [46, 139, 87],\n    seashell: [255, 245, 238],\n    sienna: [160, 82, 45],\n    silver: [192, 192, 192],\n    skyblue: [135, 206, 235],\n    slateblue: [106, 90, 205],\n    slategray: [112, 128, 144],\n    slategrey: [112, 128, 144],\n    snow: [255, 250, 250],\n    springgreen: [0, 255, 127],\n    steelblue: [70, 130, 180],\n    tan: [210, 180, 140],\n    teal: [0, 128, 128],\n    thistle: [216, 191, 216],\n    tomato: [255, 99, 71],\n    turquoise: [64, 224, 208],\n    violet: [238, 130, 238],\n    wheat: [245, 222, 179],\n    white: [255, 255, 255],\n    whitesmoke: [245, 245, 245],\n    yellow: [255, 255, 0],\n    yellowgreen: [154, 205, 50]\n  };\n  var reverseKeywords = {};\n\n  for (var key in cssKeywords) {\n    reverseKeywords[JSON.stringify(cssKeywords[key])] = key;\n  }\n\n  var convert = function convert() {\n    return new Converter();\n  };\n\n  for (var func in conversions) {\n    // export Raw versions\n    convert[func + \"Raw\"] = function (func) {\n      // accept array or plain args\n      return function (arg) {\n        if (typeof arg == \"number\") arg = Array.prototype.slice.call(arguments);\n        return conversions[func](arg);\n      };\n    }(func);\n\n    var pair = /(\\w+)2(\\w+)/.exec(func),\n        from = pair[1],\n        to = pair[2]; // export rgb2hsl and [\"rgb\"][\"hsl\"]\n\n    convert[from] = convert[from] || {};\n\n    convert[from][to] = convert[func] = function (func) {\n      return function (arg) {\n        if (typeof arg == \"number\") arg = Array.prototype.slice.call(arguments);\n        var val = conversions[func](arg);\n        if (typeof val == \"string\" || val === undefined) return val; // keyword\n\n        for (var i = 0; i < val.length; i++) {\n          val[i] = Math.round(val[i]);\n        }\n\n        return val;\n      };\n    }(func);\n  }\n  /* Converter does lazy conversion and caching */\n\n\n  var Converter = function Converter() {\n    this.convs = {};\n  };\n  /* Either get the values for a space or\n    set the values for a space, depending on args */\n\n\n  Converter.prototype.routeSpace = function (space, args) {\n    var values = args[0];\n\n    if (values === undefined) {\n      // color.rgb()\n      return this.getValues(space);\n    } // color.rgb(10, 10, 10)\n\n\n    if (typeof values == \"number\") {\n      values = Array.prototype.slice.call(args);\n    }\n\n    return this.setValues(space, values);\n  };\n  /* Set the values for a space, invalidating cache */\n\n\n  Converter.prototype.setValues = function (space, values) {\n    this.space = space;\n    this.convs = {};\n    this.convs[space] = values;\n    return this;\n  };\n  /* Get the values for a space. If there's already\n    a conversion for the space, fetch it, otherwise\n    compute it */\n\n\n  Converter.prototype.getValues = function (space) {\n    var vals = this.convs[space];\n\n    if (!vals) {\n      var fspace = this.space,\n          from = this.convs[fspace];\n      vals = convert[fspace][space](from);\n      this.convs[space] = vals;\n    }\n\n    return vals;\n  };\n\n  [\"rgb\", \"hsl\", \"hsv\", \"cmyk\", \"keyword\"].forEach(function (space) {\n    Converter.prototype[space] = function (vals) {\n      return this.routeSpace(space, arguments);\n    };\n  });\n  var colorConvert = convert;\n  var colorName = {\n    \"aliceblue\": [240, 248, 255],\n    \"antiquewhite\": [250, 235, 215],\n    \"aqua\": [0, 255, 255],\n    \"aquamarine\": [127, 255, 212],\n    \"azure\": [240, 255, 255],\n    \"beige\": [245, 245, 220],\n    \"bisque\": [255, 228, 196],\n    \"black\": [0, 0, 0],\n    \"blanchedalmond\": [255, 235, 205],\n    \"blue\": [0, 0, 255],\n    \"blueviolet\": [138, 43, 226],\n    \"brown\": [165, 42, 42],\n    \"burlywood\": [222, 184, 135],\n    \"cadetblue\": [95, 158, 160],\n    \"chartreuse\": [127, 255, 0],\n    \"chocolate\": [210, 105, 30],\n    \"coral\": [255, 127, 80],\n    \"cornflowerblue\": [100, 149, 237],\n    \"cornsilk\": [255, 248, 220],\n    \"crimson\": [220, 20, 60],\n    \"cyan\": [0, 255, 255],\n    \"darkblue\": [0, 0, 139],\n    \"darkcyan\": [0, 139, 139],\n    \"darkgoldenrod\": [184, 134, 11],\n    \"darkgray\": [169, 169, 169],\n    \"darkgreen\": [0, 100, 0],\n    \"darkgrey\": [169, 169, 169],\n    \"darkkhaki\": [189, 183, 107],\n    \"darkmagenta\": [139, 0, 139],\n    \"darkolivegreen\": [85, 107, 47],\n    \"darkorange\": [255, 140, 0],\n    \"darkorchid\": [153, 50, 204],\n    \"darkred\": [139, 0, 0],\n    \"darksalmon\": [233, 150, 122],\n    \"darkseagreen\": [143, 188, 143],\n    \"darkslateblue\": [72, 61, 139],\n    \"darkslategray\": [47, 79, 79],\n    \"darkslategrey\": [47, 79, 79],\n    \"darkturquoise\": [0, 206, 209],\n    \"darkviolet\": [148, 0, 211],\n    \"deeppink\": [255, 20, 147],\n    \"deepskyblue\": [0, 191, 255],\n    \"dimgray\": [105, 105, 105],\n    \"dimgrey\": [105, 105, 105],\n    \"dodgerblue\": [30, 144, 255],\n    \"firebrick\": [178, 34, 34],\n    \"floralwhite\": [255, 250, 240],\n    \"forestgreen\": [34, 139, 34],\n    \"fuchsia\": [255, 0, 255],\n    \"gainsboro\": [220, 220, 220],\n    \"ghostwhite\": [248, 248, 255],\n    \"gold\": [255, 215, 0],\n    \"goldenrod\": [218, 165, 32],\n    \"gray\": [128, 128, 128],\n    \"green\": [0, 128, 0],\n    \"greenyellow\": [173, 255, 47],\n    \"grey\": [128, 128, 128],\n    \"honeydew\": [240, 255, 240],\n    \"hotpink\": [255, 105, 180],\n    \"indianred\": [205, 92, 92],\n    \"indigo\": [75, 0, 130],\n    \"ivory\": [255, 255, 240],\n    \"khaki\": [240, 230, 140],\n    \"lavender\": [230, 230, 250],\n    \"lavenderblush\": [255, 240, 245],\n    \"lawngreen\": [124, 252, 0],\n    \"lemonchiffon\": [255, 250, 205],\n    \"lightblue\": [173, 216, 230],\n    \"lightcoral\": [240, 128, 128],\n    \"lightcyan\": [224, 255, 255],\n    \"lightgoldenrodyellow\": [250, 250, 210],\n    \"lightgray\": [211, 211, 211],\n    \"lightgreen\": [144, 238, 144],\n    \"lightgrey\": [211, 211, 211],\n    \"lightpink\": [255, 182, 193],\n    \"lightsalmon\": [255, 160, 122],\n    \"lightseagreen\": [32, 178, 170],\n    \"lightskyblue\": [135, 206, 250],\n    \"lightslategray\": [119, 136, 153],\n    \"lightslategrey\": [119, 136, 153],\n    \"lightsteelblue\": [176, 196, 222],\n    \"lightyellow\": [255, 255, 224],\n    \"lime\": [0, 255, 0],\n    \"limegreen\": [50, 205, 50],\n    \"linen\": [250, 240, 230],\n    \"magenta\": [255, 0, 255],\n    \"maroon\": [128, 0, 0],\n    \"mediumaquamarine\": [102, 205, 170],\n    \"mediumblue\": [0, 0, 205],\n    \"mediumorchid\": [186, 85, 211],\n    \"mediumpurple\": [147, 112, 219],\n    \"mediumseagreen\": [60, 179, 113],\n    \"mediumslateblue\": [123, 104, 238],\n    \"mediumspringgreen\": [0, 250, 154],\n    \"mediumturquoise\": [72, 209, 204],\n    \"mediumvioletred\": [199, 21, 133],\n    \"midnightblue\": [25, 25, 112],\n    \"mintcream\": [245, 255, 250],\n    \"mistyrose\": [255, 228, 225],\n    \"moccasin\": [255, 228, 181],\n    \"navajowhite\": [255, 222, 173],\n    \"navy\": [0, 0, 128],\n    \"oldlace\": [253, 245, 230],\n    \"olive\": [128, 128, 0],\n    \"olivedrab\": [107, 142, 35],\n    \"orange\": [255, 165, 0],\n    \"orangered\": [255, 69, 0],\n    \"orchid\": [218, 112, 214],\n    \"palegoldenrod\": [238, 232, 170],\n    \"palegreen\": [152, 251, 152],\n    \"paleturquoise\": [175, 238, 238],\n    \"palevioletred\": [219, 112, 147],\n    \"papayawhip\": [255, 239, 213],\n    \"peachpuff\": [255, 218, 185],\n    \"peru\": [205, 133, 63],\n    \"pink\": [255, 192, 203],\n    \"plum\": [221, 160, 221],\n    \"powderblue\": [176, 224, 230],\n    \"purple\": [128, 0, 128],\n    \"rebeccapurple\": [102, 51, 153],\n    \"red\": [255, 0, 0],\n    \"rosybrown\": [188, 143, 143],\n    \"royalblue\": [65, 105, 225],\n    \"saddlebrown\": [139, 69, 19],\n    \"salmon\": [250, 128, 114],\n    \"sandybrown\": [244, 164, 96],\n    \"seagreen\": [46, 139, 87],\n    \"seashell\": [255, 245, 238],\n    \"sienna\": [160, 82, 45],\n    \"silver\": [192, 192, 192],\n    \"skyblue\": [135, 206, 235],\n    \"slateblue\": [106, 90, 205],\n    \"slategray\": [112, 128, 144],\n    \"slategrey\": [112, 128, 144],\n    \"snow\": [255, 250, 250],\n    \"springgreen\": [0, 255, 127],\n    \"steelblue\": [70, 130, 180],\n    \"tan\": [210, 180, 140],\n    \"teal\": [0, 128, 128],\n    \"thistle\": [216, 191, 216],\n    \"tomato\": [255, 99, 71],\n    \"turquoise\": [64, 224, 208],\n    \"violet\": [238, 130, 238],\n    \"wheat\": [245, 222, 179],\n    \"white\": [255, 255, 255],\n    \"whitesmoke\": [245, 245, 245],\n    \"yellow\": [255, 255, 0],\n    \"yellowgreen\": [154, 205, 50]\n  };\n  /* MIT license */\n\n  var colorString = {\n    getRgba: getRgba,\n    getHsla: getHsla,\n    getRgb: getRgb,\n    getHsl: getHsl,\n    getHwb: getHwb,\n    getAlpha: getAlpha,\n    hexString: hexString,\n    rgbString: rgbString,\n    rgbaString: rgbaString,\n    percentString: percentString,\n    percentaString: percentaString,\n    hslString: hslString,\n    hslaString: hslaString,\n    hwbString: hwbString,\n    keyword: keyword\n  };\n\n  function getRgba(string) {\n    if (!string) {\n      return;\n    }\n\n    var abbr = /^#([a-fA-F0-9]{3,4})$/i,\n        hex = /^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i,\n        rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/i,\n        per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/i,\n        keyword = /(\\w+)/;\n    var rgb = [0, 0, 0],\n        a = 1,\n        match = string.match(abbr),\n        hexAlpha = \"\";\n\n    if (match) {\n      match = match[1];\n      hexAlpha = match[3];\n\n      for (var i = 0; i < rgb.length; i++) {\n        rgb[i] = parseInt(match[i] + match[i], 16);\n      }\n\n      if (hexAlpha) {\n        a = Math.round(parseInt(hexAlpha + hexAlpha, 16) / 255 * 100) / 100;\n      }\n    } else if (match = string.match(hex)) {\n      hexAlpha = match[2];\n      match = match[1];\n\n      for (var i = 0; i < rgb.length; i++) {\n        rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);\n      }\n\n      if (hexAlpha) {\n        a = Math.round(parseInt(hexAlpha, 16) / 255 * 100) / 100;\n      }\n    } else if (match = string.match(rgba)) {\n      for (var i = 0; i < rgb.length; i++) {\n        rgb[i] = parseInt(match[i + 1]);\n      }\n\n      a = parseFloat(match[4]);\n    } else if (match = string.match(per)) {\n      for (var i = 0; i < rgb.length; i++) {\n        rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n      }\n\n      a = parseFloat(match[4]);\n    } else if (match = string.match(keyword)) {\n      if (match[1] == \"transparent\") {\n        return [0, 0, 0, 0];\n      }\n\n      rgb = colorName[match[1]];\n\n      if (!rgb) {\n        return;\n      }\n    }\n\n    for (var i = 0; i < rgb.length; i++) {\n      rgb[i] = scale(rgb[i], 0, 255);\n    }\n\n    if (!a && a != 0) {\n      a = 1;\n    } else {\n      a = scale(a, 0, 1);\n    }\n\n    rgb[3] = a;\n    return rgb;\n  }\n\n  function getHsla(string) {\n    if (!string) {\n      return;\n    }\n\n    var hsl = /^hsla?\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/;\n    var match = string.match(hsl);\n\n    if (match) {\n      var alpha = parseFloat(match[4]);\n      var h = scale(parseInt(match[1]), 0, 360),\n          s = scale(parseFloat(match[2]), 0, 100),\n          l = scale(parseFloat(match[3]), 0, 100),\n          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);\n      return [h, s, l, a];\n    }\n  }\n\n  function getHwb(string) {\n    if (!string) {\n      return;\n    }\n\n    var hwb = /^hwb\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/;\n    var match = string.match(hwb);\n\n    if (match) {\n      var alpha = parseFloat(match[4]);\n      var h = scale(parseInt(match[1]), 0, 360),\n          w = scale(parseFloat(match[2]), 0, 100),\n          b = scale(parseFloat(match[3]), 0, 100),\n          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);\n      return [h, w, b, a];\n    }\n  }\n\n  function getRgb(string) {\n    var rgba = getRgba(string);\n    return rgba && rgba.slice(0, 3);\n  }\n\n  function getHsl(string) {\n    var hsla = getHsla(string);\n    return hsla && hsla.slice(0, 3);\n  }\n\n  function getAlpha(string) {\n    var vals = getRgba(string);\n\n    if (vals) {\n      return vals[3];\n    } else if (vals = getHsla(string)) {\n      return vals[3];\n    } else if (vals = getHwb(string)) {\n      return vals[3];\n    }\n  } // generators\n\n\n  function hexString(rgba, a) {\n    var a = a !== undefined && rgba.length === 3 ? a : rgba[3];\n    return \"#\" + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (a >= 0 && a < 1 ? hexDouble(Math.round(a * 255)) : \"\");\n  }\n\n  function rgbString(rgba, alpha) {\n    if (alpha < 1 || rgba[3] && rgba[3] < 1) {\n      return rgbaString(rgba, alpha);\n    }\n\n    return \"rgb(\" + rgba[0] + \", \" + rgba[1] + \", \" + rgba[2] + \")\";\n  }\n\n  function rgbaString(rgba, alpha) {\n    if (alpha === undefined) {\n      alpha = rgba[3] !== undefined ? rgba[3] : 1;\n    }\n\n    return \"rgba(\" + rgba[0] + \", \" + rgba[1] + \", \" + rgba[2] + \", \" + alpha + \")\";\n  }\n\n  function percentString(rgba, alpha) {\n    if (alpha < 1 || rgba[3] && rgba[3] < 1) {\n      return percentaString(rgba, alpha);\n    }\n\n    var r = Math.round(rgba[0] / 255 * 100),\n        g = Math.round(rgba[1] / 255 * 100),\n        b = Math.round(rgba[2] / 255 * 100);\n    return \"rgb(\" + r + \"%, \" + g + \"%, \" + b + \"%)\";\n  }\n\n  function percentaString(rgba, alpha) {\n    var r = Math.round(rgba[0] / 255 * 100),\n        g = Math.round(rgba[1] / 255 * 100),\n        b = Math.round(rgba[2] / 255 * 100);\n    return \"rgba(\" + r + \"%, \" + g + \"%, \" + b + \"%, \" + (alpha || rgba[3] || 1) + \")\";\n  }\n\n  function hslString(hsla, alpha) {\n    if (alpha < 1 || hsla[3] && hsla[3] < 1) {\n      return hslaString(hsla, alpha);\n    }\n\n    return \"hsl(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%)\";\n  }\n\n  function hslaString(hsla, alpha) {\n    if (alpha === undefined) {\n      alpha = hsla[3] !== undefined ? hsla[3] : 1;\n    }\n\n    return \"hsla(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%, \" + alpha + \")\";\n  } // hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n  // (hwb have alpha optional & 1 is default value)\n\n\n  function hwbString(hwb, alpha) {\n    if (alpha === undefined) {\n      alpha = hwb[3] !== undefined ? hwb[3] : 1;\n    }\n\n    return \"hwb(\" + hwb[0] + \", \" + hwb[1] + \"%, \" + hwb[2] + \"%\" + (alpha !== undefined && alpha !== 1 ? \", \" + alpha : \"\") + \")\";\n  }\n\n  function keyword(rgb) {\n    return reverseNames[rgb.slice(0, 3)];\n  } // helpers\n\n\n  function scale(num, min, max) {\n    return Math.min(Math.max(min, num), max);\n  }\n\n  function hexDouble(num) {\n    var str = num.toString(16).toUpperCase();\n    return str.length < 2 ? \"0\" + str : str;\n  } //create a list of reverse color names\n\n\n  var reverseNames = {};\n\n  for (var name in colorName) {\n    reverseNames[colorName[name]] = name;\n  }\n  /* MIT license */\n\n\n  var Color = function Color(obj) {\n    if (obj instanceof Color) {\n      return obj;\n    }\n\n    if (!(this instanceof Color)) {\n      return new Color(obj);\n    }\n\n    this.valid = false;\n    this.values = {\n      rgb: [0, 0, 0],\n      hsl: [0, 0, 0],\n      hsv: [0, 0, 0],\n      hwb: [0, 0, 0],\n      cmyk: [0, 0, 0, 0],\n      alpha: 1\n    }; // parse Color() argument\n\n    var vals;\n\n    if (typeof obj === 'string') {\n      vals = colorString.getRgba(obj);\n\n      if (vals) {\n        this.setValues('rgb', vals);\n      } else if (vals = colorString.getHsla(obj)) {\n        this.setValues('hsl', vals);\n      } else if (vals = colorString.getHwb(obj)) {\n        this.setValues('hwb', vals);\n      }\n    } else if (typeof obj === 'object') {\n      vals = obj;\n\n      if (vals.r !== undefined || vals.red !== undefined) {\n        this.setValues('rgb', vals);\n      } else if (vals.l !== undefined || vals.lightness !== undefined) {\n        this.setValues('hsl', vals);\n      } else if (vals.v !== undefined || vals.value !== undefined) {\n        this.setValues('hsv', vals);\n      } else if (vals.w !== undefined || vals.whiteness !== undefined) {\n        this.setValues('hwb', vals);\n      } else if (vals.c !== undefined || vals.cyan !== undefined) {\n        this.setValues('cmyk', vals);\n      }\n    }\n  };\n\n  Color.prototype = {\n    isValid: function isValid() {\n      return this.valid;\n    },\n    rgb: function rgb() {\n      return this.setSpace('rgb', arguments);\n    },\n    hsl: function hsl() {\n      return this.setSpace('hsl', arguments);\n    },\n    hsv: function hsv() {\n      return this.setSpace('hsv', arguments);\n    },\n    hwb: function hwb() {\n      return this.setSpace('hwb', arguments);\n    },\n    cmyk: function cmyk() {\n      return this.setSpace('cmyk', arguments);\n    },\n    rgbArray: function rgbArray() {\n      return this.values.rgb;\n    },\n    hslArray: function hslArray() {\n      return this.values.hsl;\n    },\n    hsvArray: function hsvArray() {\n      return this.values.hsv;\n    },\n    hwbArray: function hwbArray() {\n      var values = this.values;\n\n      if (values.alpha !== 1) {\n        return values.hwb.concat([values.alpha]);\n      }\n\n      return values.hwb;\n    },\n    cmykArray: function cmykArray() {\n      return this.values.cmyk;\n    },\n    rgbaArray: function rgbaArray() {\n      var values = this.values;\n      return values.rgb.concat([values.alpha]);\n    },\n    hslaArray: function hslaArray() {\n      var values = this.values;\n      return values.hsl.concat([values.alpha]);\n    },\n    alpha: function alpha(val) {\n      if (val === undefined) {\n        return this.values.alpha;\n      }\n\n      this.setValues('alpha', val);\n      return this;\n    },\n    red: function red(val) {\n      return this.setChannel('rgb', 0, val);\n    },\n    green: function green(val) {\n      return this.setChannel('rgb', 1, val);\n    },\n    blue: function blue(val) {\n      return this.setChannel('rgb', 2, val);\n    },\n    hue: function hue(val) {\n      if (val) {\n        val %= 360;\n        val = val < 0 ? 360 + val : val;\n      }\n\n      return this.setChannel('hsl', 0, val);\n    },\n    saturation: function saturation(val) {\n      return this.setChannel('hsl', 1, val);\n    },\n    lightness: function lightness(val) {\n      return this.setChannel('hsl', 2, val);\n    },\n    saturationv: function saturationv(val) {\n      return this.setChannel('hsv', 1, val);\n    },\n    whiteness: function whiteness(val) {\n      return this.setChannel('hwb', 1, val);\n    },\n    blackness: function blackness(val) {\n      return this.setChannel('hwb', 2, val);\n    },\n    value: function value(val) {\n      return this.setChannel('hsv', 2, val);\n    },\n    cyan: function cyan(val) {\n      return this.setChannel('cmyk', 0, val);\n    },\n    magenta: function magenta(val) {\n      return this.setChannel('cmyk', 1, val);\n    },\n    yellow: function yellow(val) {\n      return this.setChannel('cmyk', 2, val);\n    },\n    black: function black(val) {\n      return this.setChannel('cmyk', 3, val);\n    },\n    hexString: function hexString() {\n      return colorString.hexString(this.values.rgb);\n    },\n    rgbString: function rgbString() {\n      return colorString.rgbString(this.values.rgb, this.values.alpha);\n    },\n    rgbaString: function rgbaString() {\n      return colorString.rgbaString(this.values.rgb, this.values.alpha);\n    },\n    percentString: function percentString() {\n      return colorString.percentString(this.values.rgb, this.values.alpha);\n    },\n    hslString: function hslString() {\n      return colorString.hslString(this.values.hsl, this.values.alpha);\n    },\n    hslaString: function hslaString() {\n      return colorString.hslaString(this.values.hsl, this.values.alpha);\n    },\n    hwbString: function hwbString() {\n      return colorString.hwbString(this.values.hwb, this.values.alpha);\n    },\n    keyword: function keyword() {\n      return colorString.keyword(this.values.rgb, this.values.alpha);\n    },\n    rgbNumber: function rgbNumber() {\n      var rgb = this.values.rgb;\n      return rgb[0] << 16 | rgb[1] << 8 | rgb[2];\n    },\n    luminosity: function luminosity() {\n      // http://www.w3.org/TR/WCAG20/#relativeluminancedef\n      var rgb = this.values.rgb;\n      var lum = [];\n\n      for (var i = 0; i < rgb.length; i++) {\n        var chan = rgb[i] / 255;\n        lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);\n      }\n\n      return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n    },\n    contrast: function contrast(color2) {\n      // http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n      var lum1 = this.luminosity();\n      var lum2 = color2.luminosity();\n\n      if (lum1 > lum2) {\n        return (lum1 + 0.05) / (lum2 + 0.05);\n      }\n\n      return (lum2 + 0.05) / (lum1 + 0.05);\n    },\n    level: function level(color2) {\n      var contrastRatio = this.contrast(color2);\n\n      if (contrastRatio >= 7.1) {\n        return 'AAA';\n      }\n\n      return contrastRatio >= 4.5 ? 'AA' : '';\n    },\n    dark: function dark() {\n      // YIQ equation from http://24ways.org/2010/calculating-color-contrast\n      var rgb = this.values.rgb;\n      var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n      return yiq < 128;\n    },\n    light: function light() {\n      return !this.dark();\n    },\n    negate: function negate() {\n      var rgb = [];\n\n      for (var i = 0; i < 3; i++) {\n        rgb[i] = 255 - this.values.rgb[i];\n      }\n\n      this.setValues('rgb', rgb);\n      return this;\n    },\n    lighten: function lighten(ratio) {\n      var hsl = this.values.hsl;\n      hsl[2] += hsl[2] * ratio;\n      this.setValues('hsl', hsl);\n      return this;\n    },\n    darken: function darken(ratio) {\n      var hsl = this.values.hsl;\n      hsl[2] -= hsl[2] * ratio;\n      this.setValues('hsl', hsl);\n      return this;\n    },\n    saturate: function saturate(ratio) {\n      var hsl = this.values.hsl;\n      hsl[1] += hsl[1] * ratio;\n      this.setValues('hsl', hsl);\n      return this;\n    },\n    desaturate: function desaturate(ratio) {\n      var hsl = this.values.hsl;\n      hsl[1] -= hsl[1] * ratio;\n      this.setValues('hsl', hsl);\n      return this;\n    },\n    whiten: function whiten(ratio) {\n      var hwb = this.values.hwb;\n      hwb[1] += hwb[1] * ratio;\n      this.setValues('hwb', hwb);\n      return this;\n    },\n    blacken: function blacken(ratio) {\n      var hwb = this.values.hwb;\n      hwb[2] += hwb[2] * ratio;\n      this.setValues('hwb', hwb);\n      return this;\n    },\n    greyscale: function greyscale() {\n      var rgb = this.values.rgb; // http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n\n      var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n      this.setValues('rgb', [val, val, val]);\n      return this;\n    },\n    clearer: function clearer(ratio) {\n      var alpha = this.values.alpha;\n      this.setValues('alpha', alpha - alpha * ratio);\n      return this;\n    },\n    opaquer: function opaquer(ratio) {\n      var alpha = this.values.alpha;\n      this.setValues('alpha', alpha + alpha * ratio);\n      return this;\n    },\n    rotate: function rotate(degrees) {\n      var hsl = this.values.hsl;\n      var hue = (hsl[0] + degrees) % 360;\n      hsl[0] = hue < 0 ? 360 + hue : hue;\n      this.setValues('hsl', hsl);\n      return this;\n    },\n\n    /**\n     * Ported from sass implementation in C\n     * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n     */\n    mix: function mix(mixinColor, weight) {\n      var color1 = this;\n      var color2 = mixinColor;\n      var p = weight === undefined ? 0.5 : weight;\n      var w = 2 * p - 1;\n      var a = color1.alpha() - color2.alpha();\n      var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      var w2 = 1 - w1;\n      return this.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue()).alpha(color1.alpha() * p + color2.alpha() * (1 - p));\n    },\n    toJSON: function toJSON() {\n      return this.rgb();\n    },\n    clone: function clone() {\n      // NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,\n      // making the final build way to big to embed in Chart.js. So let's do it manually,\n      // assuming that values to clone are 1 dimension arrays containing only numbers,\n      // except 'alpha' which is a number.\n      var result = new Color();\n      var source = this.values;\n      var target = result.values;\n      var value, type;\n\n      for (var prop in source) {\n        if (source.hasOwnProperty(prop)) {\n          value = source[prop];\n          type = {}.toString.call(value);\n\n          if (type === '[object Array]') {\n            target[prop] = value.slice(0);\n          } else if (type === '[object Number]') {\n            target[prop] = value;\n          } else {\n            console.error('unexpected color value:', value);\n          }\n        }\n      }\n\n      return result;\n    }\n  };\n  Color.prototype.spaces = {\n    rgb: ['red', 'green', 'blue'],\n    hsl: ['hue', 'saturation', 'lightness'],\n    hsv: ['hue', 'saturation', 'value'],\n    hwb: ['hue', 'whiteness', 'blackness'],\n    cmyk: ['cyan', 'magenta', 'yellow', 'black']\n  };\n  Color.prototype.maxes = {\n    rgb: [255, 255, 255],\n    hsl: [360, 100, 100],\n    hsv: [360, 100, 100],\n    hwb: [360, 100, 100],\n    cmyk: [100, 100, 100, 100]\n  };\n\n  Color.prototype.getValues = function (space) {\n    var values = this.values;\n    var vals = {};\n\n    for (var i = 0; i < space.length; i++) {\n      vals[space.charAt(i)] = values[space][i];\n    }\n\n    if (values.alpha !== 1) {\n      vals.a = values.alpha;\n    } // {r: 255, g: 255, b: 255, a: 0.4}\n\n\n    return vals;\n  };\n\n  Color.prototype.setValues = function (space, vals) {\n    var values = this.values;\n    var spaces = this.spaces;\n    var maxes = this.maxes;\n    var alpha = 1;\n    var i;\n    this.valid = true;\n\n    if (space === 'alpha') {\n      alpha = vals;\n    } else if (vals.length) {\n      // [10, 10, 10]\n      values[space] = vals.slice(0, space.length);\n      alpha = vals[space.length];\n    } else if (vals[space.charAt(0)] !== undefined) {\n      // {r: 10, g: 10, b: 10}\n      for (i = 0; i < space.length; i++) {\n        values[space][i] = vals[space.charAt(i)];\n      }\n\n      alpha = vals.a;\n    } else if (vals[spaces[space][0]] !== undefined) {\n      // {red: 10, green: 10, blue: 10}\n      var chans = spaces[space];\n\n      for (i = 0; i < space.length; i++) {\n        values[space][i] = vals[chans[i]];\n      }\n\n      alpha = vals.alpha;\n    }\n\n    values.alpha = Math.max(0, Math.min(1, alpha === undefined ? values.alpha : alpha));\n\n    if (space === 'alpha') {\n      return false;\n    }\n\n    var capped; // cap values of the space prior converting all values\n\n    for (i = 0; i < space.length; i++) {\n      capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));\n      values[space][i] = Math.round(capped);\n    } // convert to all the other color spaces\n\n\n    for (var sname in spaces) {\n      if (sname !== space) {\n        values[sname] = colorConvert[space][sname](values[space]);\n      }\n    }\n\n    return true;\n  };\n\n  Color.prototype.setSpace = function (space, args) {\n    var vals = args[0];\n\n    if (vals === undefined) {\n      // color.rgb()\n      return this.getValues(space);\n    } // color.rgb(10, 10, 10)\n\n\n    if (typeof vals === 'number') {\n      vals = Array.prototype.slice.call(args);\n    }\n\n    this.setValues(space, vals);\n    return this;\n  };\n\n  Color.prototype.setChannel = function (space, index, val) {\n    var svalues = this.values[space];\n\n    if (val === undefined) {\n      // color.red()\n      return svalues[index];\n    } else if (val === svalues[index]) {\n      // color.red(color.red())\n      return this;\n    } // color.red(100)\n\n\n    svalues[index] = val;\n    this.setValues(space, svalues);\n    return this;\n  };\n\n  if (typeof window !== 'undefined') {\n    window.Color = Color;\n  }\n\n  var chartjsColor = Color;\n  /**\n   * @namespace Chart.helpers\n   */\n\n  var helpers = {\n    /**\n     * An empty function that can be used, for example, for optional callback.\n     */\n    noop: function noop() {},\n\n    /**\n     * Returns a unique id, sequentially generated from a global variable.\n     * @returns {number}\n     * @function\n     */\n    uid: function () {\n      var id = 0;\n      return function () {\n        return id++;\n      };\n    }(),\n\n    /**\n     * Returns true if `value` is neither null nor undefined, else returns false.\n     * @param {*} value - The value to test.\n     * @returns {boolean}\n     * @since 2.7.0\n     */\n    isNullOrUndef: function isNullOrUndef(value) {\n      return value === null || typeof value === 'undefined';\n    },\n\n    /**\n     * Returns true if `value` is an array (including typed arrays), else returns false.\n     * @param {*} value - The value to test.\n     * @returns {boolean}\n     * @function\n     */\n    isArray: function isArray(value) {\n      if (Array.isArray && Array.isArray(value)) {\n        return true;\n      }\n\n      var type = Object.prototype.toString.call(value);\n\n      if (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Returns true if `value` is an object (excluding null), else returns false.\n     * @param {*} value - The value to test.\n     * @returns {boolean}\n     * @since 2.7.0\n     */\n    isObject: function isObject(value) {\n      return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n    },\n\n    /**\n     * Returns true if `value` is a finite number, else returns false\n     * @param {*} value  - The value to test.\n     * @returns {boolean}\n     */\n    isFinite: function (_isFinite) {\n      function isFinite(_x) {\n        return _isFinite.apply(this, arguments);\n      }\n\n      isFinite.toString = function () {\n        return _isFinite.toString();\n      };\n\n      return isFinite;\n    }(function (value) {\n      return (typeof value === 'number' || value instanceof Number) && isFinite(value);\n    }),\n\n    /**\n     * Returns `value` if defined, else returns `defaultValue`.\n     * @param {*} value - The value to return if defined.\n     * @param {*} defaultValue - The value to return if `value` is undefined.\n     * @returns {*}\n     */\n    valueOrDefault: function valueOrDefault(value, defaultValue) {\n      return typeof value === 'undefined' ? defaultValue : value;\n    },\n\n    /**\n     * Returns value at the given `index` in array if defined, else returns `defaultValue`.\n     * @param {Array} value - The array to lookup for value at `index`.\n     * @param {number} index - The index in `value` to lookup for value.\n     * @param {*} defaultValue - The value to return if `value[index]` is undefined.\n     * @returns {*}\n     */\n    valueAtIndexOrDefault: function valueAtIndexOrDefault(value, index, defaultValue) {\n      return helpers.valueOrDefault(helpers.isArray(value) ? value[index] : value, defaultValue);\n    },\n\n    /**\n     * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n     * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n     * @param {function} fn - The function to call.\n     * @param {Array|undefined|null} args - The arguments with which `fn` should be called.\n     * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.\n     * @returns {*}\n     */\n    callback: function callback(fn, args, thisArg) {\n      if (fn && typeof fn.call === 'function') {\n        return fn.apply(thisArg, args);\n      }\n    },\n\n    /**\n     * Note(SB) for performance sake, this method should only be used when loopable type\n     * is unknown or in none intensive code (not called often and small loopable). Else\n     * it's preferable to use a regular for() loop and save extra function calls.\n     * @param {object|Array} loopable - The object or array to be iterated.\n     * @param {function} fn - The function to call for each item.\n     * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.\n     * @param {boolean} [reverse] - If true, iterates backward on the loopable.\n     */\n    each: function each(loopable, fn, thisArg, reverse) {\n      var i, len, keys;\n\n      if (helpers.isArray(loopable)) {\n        len = loopable.length;\n\n        if (reverse) {\n          for (i = len - 1; i >= 0; i--) {\n            fn.call(thisArg, loopable[i], i);\n          }\n        } else {\n          for (i = 0; i < len; i++) {\n            fn.call(thisArg, loopable[i], i);\n          }\n        }\n      } else if (helpers.isObject(loopable)) {\n        keys = Object.keys(loopable);\n        len = keys.length;\n\n        for (i = 0; i < len; i++) {\n          fn.call(thisArg, loopable[keys[i]], keys[i]);\n        }\n      }\n    },\n\n    /**\n     * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n     * @see https://stackoverflow.com/a/14853974\n     * @param {Array} a0 - The array to compare\n     * @param {Array} a1 - The array to compare\n     * @returns {boolean}\n     */\n    arrayEquals: function arrayEquals(a0, a1) {\n      var i, ilen, v0, v1;\n\n      if (!a0 || !a1 || a0.length !== a1.length) {\n        return false;\n      }\n\n      for (i = 0, ilen = a0.length; i < ilen; ++i) {\n        v0 = a0[i];\n        v1 = a1[i];\n\n        if (v0 instanceof Array && v1 instanceof Array) {\n          if (!helpers.arrayEquals(v0, v1)) {\n            return false;\n          }\n        } else if (v0 !== v1) {\n          // NOTE: two different object instances will never be equal: {x:20} != {x:20}\n          return false;\n        }\n      }\n\n      return true;\n    },\n\n    /**\n     * Returns a deep copy of `source` without keeping references on objects and arrays.\n     * @param {*} source - The value to clone.\n     * @returns {*}\n     */\n    clone: function clone(source) {\n      if (helpers.isArray(source)) {\n        return source.map(helpers.clone);\n      }\n\n      if (helpers.isObject(source)) {\n        var target = {};\n        var keys = Object.keys(source);\n        var klen = keys.length;\n        var k = 0;\n\n        for (; k < klen; ++k) {\n          target[keys[k]] = helpers.clone(source[keys[k]]);\n        }\n\n        return target;\n      }\n\n      return source;\n    },\n\n    /**\n     * The default merger when Chart.helpers.merge is called without merger option.\n     * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n     * @private\n     */\n    _merger: function _merger(key, target, source, options) {\n      var tval = target[key];\n      var sval = source[key];\n\n      if (helpers.isObject(tval) && helpers.isObject(sval)) {\n        helpers.merge(tval, sval, options);\n      } else {\n        target[key] = helpers.clone(sval);\n      }\n    },\n\n    /**\n     * Merges source[key] in target[key] only if target[key] is undefined.\n     * @private\n     */\n    _mergerIf: function _mergerIf(key, target, source) {\n      var tval = target[key];\n      var sval = source[key];\n\n      if (helpers.isObject(tval) && helpers.isObject(sval)) {\n        helpers.mergeIf(tval, sval);\n      } else if (!target.hasOwnProperty(key)) {\n        target[key] = helpers.clone(sval);\n      }\n    },\n\n    /**\n     * Recursively deep copies `source` properties into `target` with the given `options`.\n     * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\n     * @param {object} target - The target object in which all sources are merged into.\n     * @param {object|object[]} source - Object(s) to merge into `target`.\n     * @param {object} [options] - Merging options:\n     * @param {function} [options.merger] - The merge method (key, target, source, options)\n     * @returns {object} The `target` object.\n     */\n    merge: function merge(target, source, options) {\n      var sources = helpers.isArray(source) ? source : [source];\n      var ilen = sources.length;\n      var merge, i, keys, klen, k;\n\n      if (!helpers.isObject(target)) {\n        return target;\n      }\n\n      options = options || {};\n      merge = options.merger || helpers._merger;\n\n      for (i = 0; i < ilen; ++i) {\n        source = sources[i];\n\n        if (!helpers.isObject(source)) {\n          continue;\n        }\n\n        keys = Object.keys(source);\n\n        for (k = 0, klen = keys.length; k < klen; ++k) {\n          merge(keys[k], target, source, options);\n        }\n      }\n\n      return target;\n    },\n\n    /**\n     * Recursively deep copies `source` properties into `target` *only* if not defined in target.\n     * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\n     * @param {object} target - The target object in which all sources are merged into.\n     * @param {object|object[]} source - Object(s) to merge into `target`.\n     * @returns {object} The `target` object.\n     */\n    mergeIf: function mergeIf(target, source) {\n      return helpers.merge(target, source, {\n        merger: helpers._mergerIf\n      });\n    },\n\n    /**\n     * Applies the contents of two or more objects together into the first object.\n     * @param {object} target - The target object in which all objects are merged into.\n     * @param {object} arg1 - Object containing additional properties to merge in target.\n     * @param {object} argN - Additional objects containing properties to merge in target.\n     * @returns {object} The `target` object.\n     */\n    extend: function extend(target) {\n      var setFn = function setFn(value, key) {\n        target[key] = value;\n      };\n\n      for (var i = 1, ilen = arguments.length; i < ilen; ++i) {\n        helpers.each(arguments[i], setFn);\n      }\n\n      return target;\n    },\n\n    /**\n     * Basic javascript inheritance based on the model created in Backbone.js\n     */\n    inherits: function inherits(extensions) {\n      var me = this;\n      var ChartElement = extensions && extensions.hasOwnProperty('constructor') ? extensions.constructor : function () {\n        return me.apply(this, arguments);\n      };\n\n      var Surrogate = function Surrogate() {\n        this.constructor = ChartElement;\n      };\n\n      Surrogate.prototype = me.prototype;\n      ChartElement.prototype = new Surrogate();\n      ChartElement.extend = helpers.inherits;\n\n      if (extensions) {\n        helpers.extend(ChartElement.prototype, extensions);\n      }\n\n      ChartElement.__super__ = me.prototype;\n      return ChartElement;\n    }\n  };\n  var helpers_core = helpers; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use Chart.helpers.callback instead.\n   * @function Chart.helpers.callCallback\n   * @deprecated since version 2.6.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers.callCallback = helpers.callback;\n  /**\n   * Provided for backward compatibility, use Array.prototype.indexOf instead.\n   * Array.prototype.indexOf compatibility: Chrome, Opera, Safari, FF1.5+, IE9+\n   * @function Chart.helpers.indexOf\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers.indexOf = function (array, item, fromIndex) {\n    return Array.prototype.indexOf.call(array, item, fromIndex);\n  };\n  /**\n   * Provided for backward compatibility, use Chart.helpers.valueOrDefault instead.\n   * @function Chart.helpers.getValueOrDefault\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n\n  helpers.getValueOrDefault = helpers.valueOrDefault;\n  /**\n   * Provided for backward compatibility, use Chart.helpers.valueAtIndexOrDefault instead.\n   * @function Chart.helpers.getValueAtIndexOrDefault\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers.getValueAtIndexOrDefault = helpers.valueAtIndexOrDefault;\n  /**\n   * Easing functions adapted from Robert Penner's easing equations.\n   * @namespace Chart.helpers.easingEffects\n   * @see http://www.robertpenner.com/easing/\n   */\n\n  var effects = {\n    linear: function linear(t) {\n      return t;\n    },\n    easeInQuad: function easeInQuad(t) {\n      return t * t;\n    },\n    easeOutQuad: function easeOutQuad(t) {\n      return -t * (t - 2);\n    },\n    easeInOutQuad: function easeInOutQuad(t) {\n      if ((t /= 0.5) < 1) {\n        return 0.5 * t * t;\n      }\n\n      return -0.5 * (--t * (t - 2) - 1);\n    },\n    easeInCubic: function easeInCubic(t) {\n      return t * t * t;\n    },\n    easeOutCubic: function easeOutCubic(t) {\n      return (t = t - 1) * t * t + 1;\n    },\n    easeInOutCubic: function easeInOutCubic(t) {\n      if ((t /= 0.5) < 1) {\n        return 0.5 * t * t * t;\n      }\n\n      return 0.5 * ((t -= 2) * t * t + 2);\n    },\n    easeInQuart: function easeInQuart(t) {\n      return t * t * t * t;\n    },\n    easeOutQuart: function easeOutQuart(t) {\n      return -((t = t - 1) * t * t * t - 1);\n    },\n    easeInOutQuart: function easeInOutQuart(t) {\n      if ((t /= 0.5) < 1) {\n        return 0.5 * t * t * t * t;\n      }\n\n      return -0.5 * ((t -= 2) * t * t * t - 2);\n    },\n    easeInQuint: function easeInQuint(t) {\n      return t * t * t * t * t;\n    },\n    easeOutQuint: function easeOutQuint(t) {\n      return (t = t - 1) * t * t * t * t + 1;\n    },\n    easeInOutQuint: function easeInOutQuint(t) {\n      if ((t /= 0.5) < 1) {\n        return 0.5 * t * t * t * t * t;\n      }\n\n      return 0.5 * ((t -= 2) * t * t * t * t + 2);\n    },\n    easeInSine: function easeInSine(t) {\n      return -Math.cos(t * (Math.PI / 2)) + 1;\n    },\n    easeOutSine: function easeOutSine(t) {\n      return Math.sin(t * (Math.PI / 2));\n    },\n    easeInOutSine: function easeInOutSine(t) {\n      return -0.5 * (Math.cos(Math.PI * t) - 1);\n    },\n    easeInExpo: function easeInExpo(t) {\n      return t === 0 ? 0 : Math.pow(2, 10 * (t - 1));\n    },\n    easeOutExpo: function easeOutExpo(t) {\n      return t === 1 ? 1 : -Math.pow(2, -10 * t) + 1;\n    },\n    easeInOutExpo: function easeInOutExpo(t) {\n      if (t === 0) {\n        return 0;\n      }\n\n      if (t === 1) {\n        return 1;\n      }\n\n      if ((t /= 0.5) < 1) {\n        return 0.5 * Math.pow(2, 10 * (t - 1));\n      }\n\n      return 0.5 * (-Math.pow(2, -10 * --t) + 2);\n    },\n    easeInCirc: function easeInCirc(t) {\n      if (t >= 1) {\n        return t;\n      }\n\n      return -(Math.sqrt(1 - t * t) - 1);\n    },\n    easeOutCirc: function easeOutCirc(t) {\n      return Math.sqrt(1 - (t = t - 1) * t);\n    },\n    easeInOutCirc: function easeInOutCirc(t) {\n      if ((t /= 0.5) < 1) {\n        return -0.5 * (Math.sqrt(1 - t * t) - 1);\n      }\n\n      return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n    },\n    easeInElastic: function easeInElastic(t) {\n      var s = 1.70158;\n      var p = 0;\n      var a = 1;\n\n      if (t === 0) {\n        return 0;\n      }\n\n      if (t === 1) {\n        return 1;\n      }\n\n      if (!p) {\n        p = 0.3;\n      }\n\n      if (a < 1) {\n        a = 1;\n        s = p / 4;\n      } else {\n        s = p / (2 * Math.PI) * Math.asin(1 / a);\n      }\n\n      return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));\n    },\n    easeOutElastic: function easeOutElastic(t) {\n      var s = 1.70158;\n      var p = 0;\n      var a = 1;\n\n      if (t === 0) {\n        return 0;\n      }\n\n      if (t === 1) {\n        return 1;\n      }\n\n      if (!p) {\n        p = 0.3;\n      }\n\n      if (a < 1) {\n        a = 1;\n        s = p / 4;\n      } else {\n        s = p / (2 * Math.PI) * Math.asin(1 / a);\n      }\n\n      return a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;\n    },\n    easeInOutElastic: function easeInOutElastic(t) {\n      var s = 1.70158;\n      var p = 0;\n      var a = 1;\n\n      if (t === 0) {\n        return 0;\n      }\n\n      if ((t /= 0.5) === 2) {\n        return 1;\n      }\n\n      if (!p) {\n        p = 0.45;\n      }\n\n      if (a < 1) {\n        a = 1;\n        s = p / 4;\n      } else {\n        s = p / (2 * Math.PI) * Math.asin(1 / a);\n      }\n\n      if (t < 1) {\n        return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));\n      }\n\n      return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * 0.5 + 1;\n    },\n    easeInBack: function easeInBack(t) {\n      var s = 1.70158;\n      return t * t * ((s + 1) * t - s);\n    },\n    easeOutBack: function easeOutBack(t) {\n      var s = 1.70158;\n      return (t = t - 1) * t * ((s + 1) * t + s) + 1;\n    },\n    easeInOutBack: function easeInOutBack(t) {\n      var s = 1.70158;\n\n      if ((t /= 0.5) < 1) {\n        return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));\n      }\n\n      return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\n    },\n    easeInBounce: function easeInBounce(t) {\n      return 1 - effects.easeOutBounce(1 - t);\n    },\n    easeOutBounce: function easeOutBounce(t) {\n      if (t < 1 / 2.75) {\n        return 7.5625 * t * t;\n      }\n\n      if (t < 2 / 2.75) {\n        return 7.5625 * (t -= 1.5 / 2.75) * t + 0.75;\n      }\n\n      if (t < 2.5 / 2.75) {\n        return 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375;\n      }\n\n      return 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;\n    },\n    easeInOutBounce: function easeInOutBounce(t) {\n      if (t < 0.5) {\n        return effects.easeInBounce(t * 2) * 0.5;\n      }\n\n      return effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;\n    }\n  };\n  var helpers_easing = {\n    effects: effects\n  }; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use Chart.helpers.easing.effects instead.\n   * @function Chart.helpers.easingEffects\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers_core.easingEffects = effects;\n  var PI = Math.PI;\n  var RAD_PER_DEG = PI / 180;\n  var DOUBLE_PI = PI * 2;\n  var HALF_PI = PI / 2;\n  var QUARTER_PI = PI / 4;\n  var TWO_THIRDS_PI = PI * 2 / 3;\n  /**\n   * @namespace Chart.helpers.canvas\n   */\n\n  var exports$1 = {\n    /**\n     * Clears the entire canvas associated to the given `chart`.\n     * @param {Chart} chart - The chart for which to clear the canvas.\n     */\n    clear: function clear(chart) {\n      chart.ctx.clearRect(0, 0, chart.width, chart.height);\n    },\n\n    /**\n     * Creates a \"path\" for a rectangle with rounded corners at position (x, y) with a\n     * given size (width, height) and the same `radius` for all corners.\n     * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.\n     * @param {number} x - The x axis of the coordinate for the rectangle starting point.\n     * @param {number} y - The y axis of the coordinate for the rectangle starting point.\n     * @param {number} width - The rectangle's width.\n     * @param {number} height - The rectangle's height.\n     * @param {number} radius - The rounded amount (in pixels) for the four corners.\n     * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?\n     */\n    roundedRect: function roundedRect(ctx, x, y, width, height, radius) {\n      if (radius) {\n        var r = Math.min(radius, height / 2, width / 2);\n        var left = x + r;\n        var top = y + r;\n        var right = x + width - r;\n        var bottom = y + height - r;\n        ctx.moveTo(x, top);\n\n        if (left < right && top < bottom) {\n          ctx.arc(left, top, r, -PI, -HALF_PI);\n          ctx.arc(right, top, r, -HALF_PI, 0);\n          ctx.arc(right, bottom, r, 0, HALF_PI);\n          ctx.arc(left, bottom, r, HALF_PI, PI);\n        } else if (left < right) {\n          ctx.moveTo(left, y);\n          ctx.arc(right, top, r, -HALF_PI, HALF_PI);\n          ctx.arc(left, top, r, HALF_PI, PI + HALF_PI);\n        } else if (top < bottom) {\n          ctx.arc(left, top, r, -PI, 0);\n          ctx.arc(left, bottom, r, 0, PI);\n        } else {\n          ctx.arc(left, top, r, -PI, PI);\n        }\n\n        ctx.closePath();\n        ctx.moveTo(x, y);\n      } else {\n        ctx.rect(x, y, width, height);\n      }\n    },\n    drawPoint: function drawPoint(ctx, style, radius, x, y, rotation) {\n      var type, xOffset, yOffset, size, cornerRadius;\n      var rad = (rotation || 0) * RAD_PER_DEG;\n\n      if (style && typeof style === 'object') {\n        type = style.toString();\n\n        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n          ctx.drawImage(style, x - style.width / 2, y - style.height / 2, style.width, style.height);\n          return;\n        }\n      }\n\n      if (isNaN(radius) || radius <= 0) {\n        return;\n      }\n\n      ctx.beginPath();\n\n      switch (style) {\n        // Default includes circle\n        default:\n          ctx.arc(x, y, radius, 0, DOUBLE_PI);\n          ctx.closePath();\n          break;\n\n        case 'triangle':\n          ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n          rad += TWO_THIRDS_PI;\n          ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n          rad += TWO_THIRDS_PI;\n          ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n          ctx.closePath();\n          break;\n\n        case 'rectRounded':\n          // NOTE: the rounded rect implementation changed to use `arc` instead of\n          // `quadraticCurveTo` since it generates better results when rect is\n          // almost a circle. 0.516 (instead of 0.5) produces results with visually\n          // closer proportion to the previous impl and it is inscribed in the\n          // circle with `radius`. For more details, see the following PRs:\n          // https://github.com/chartjs/Chart.js/issues/5597\n          // https://github.com/chartjs/Chart.js/issues/5858\n          cornerRadius = radius * 0.516;\n          size = radius - cornerRadius;\n          xOffset = Math.cos(rad + QUARTER_PI) * size;\n          yOffset = Math.sin(rad + QUARTER_PI) * size;\n          ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n          ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n          ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n          ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n          ctx.closePath();\n          break;\n\n        case 'rect':\n          if (!rotation) {\n            size = Math.SQRT1_2 * radius;\n            ctx.rect(x - size, y - size, 2 * size, 2 * size);\n            break;\n          }\n\n          rad += QUARTER_PI;\n\n        /* falls through */\n\n        case 'rectRot':\n          xOffset = Math.cos(rad) * radius;\n          yOffset = Math.sin(rad) * radius;\n          ctx.moveTo(x - xOffset, y - yOffset);\n          ctx.lineTo(x + yOffset, y - xOffset);\n          ctx.lineTo(x + xOffset, y + yOffset);\n          ctx.lineTo(x - yOffset, y + xOffset);\n          ctx.closePath();\n          break;\n\n        case 'crossRot':\n          rad += QUARTER_PI;\n\n        /* falls through */\n\n        case 'cross':\n          xOffset = Math.cos(rad) * radius;\n          yOffset = Math.sin(rad) * radius;\n          ctx.moveTo(x - xOffset, y - yOffset);\n          ctx.lineTo(x + xOffset, y + yOffset);\n          ctx.moveTo(x + yOffset, y - xOffset);\n          ctx.lineTo(x - yOffset, y + xOffset);\n          break;\n\n        case 'star':\n          xOffset = Math.cos(rad) * radius;\n          yOffset = Math.sin(rad) * radius;\n          ctx.moveTo(x - xOffset, y - yOffset);\n          ctx.lineTo(x + xOffset, y + yOffset);\n          ctx.moveTo(x + yOffset, y - xOffset);\n          ctx.lineTo(x - yOffset, y + xOffset);\n          rad += QUARTER_PI;\n          xOffset = Math.cos(rad) * radius;\n          yOffset = Math.sin(rad) * radius;\n          ctx.moveTo(x - xOffset, y - yOffset);\n          ctx.lineTo(x + xOffset, y + yOffset);\n          ctx.moveTo(x + yOffset, y - xOffset);\n          ctx.lineTo(x - yOffset, y + xOffset);\n          break;\n\n        case 'line':\n          xOffset = Math.cos(rad) * radius;\n          yOffset = Math.sin(rad) * radius;\n          ctx.moveTo(x - xOffset, y - yOffset);\n          ctx.lineTo(x + xOffset, y + yOffset);\n          break;\n\n        case 'dash':\n          ctx.moveTo(x, y);\n          ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);\n          break;\n      }\n\n      ctx.fill();\n      ctx.stroke();\n    },\n\n    /**\n     * Returns true if the point is inside the rectangle\n     * @param {object} point - The point to test\n     * @param {object} area - The rectangle\n     * @returns {boolean}\n     * @private\n     */\n    _isPointInArea: function _isPointInArea(point, area) {\n      var epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n\n      return point.x > area.left - epsilon && point.x < area.right + epsilon && point.y > area.top - epsilon && point.y < area.bottom + epsilon;\n    },\n    clipArea: function clipArea(ctx, area) {\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n      ctx.clip();\n    },\n    unclipArea: function unclipArea(ctx) {\n      ctx.restore();\n    },\n    lineTo: function lineTo(ctx, previous, target, flip) {\n      var stepped = target.steppedLine;\n\n      if (stepped) {\n        if (stepped === 'middle') {\n          var midpoint = (previous.x + target.x) / 2.0;\n          ctx.lineTo(midpoint, flip ? target.y : previous.y);\n          ctx.lineTo(midpoint, flip ? previous.y : target.y);\n        } else if (stepped === 'after' && !flip || stepped !== 'after' && flip) {\n          ctx.lineTo(previous.x, target.y);\n        } else {\n          ctx.lineTo(target.x, previous.y);\n        }\n\n        ctx.lineTo(target.x, target.y);\n        return;\n      }\n\n      if (!target.tension) {\n        ctx.lineTo(target.x, target.y);\n        return;\n      }\n\n      ctx.bezierCurveTo(flip ? previous.controlPointPreviousX : previous.controlPointNextX, flip ? previous.controlPointPreviousY : previous.controlPointNextY, flip ? target.controlPointNextX : target.controlPointPreviousX, flip ? target.controlPointNextY : target.controlPointPreviousY, target.x, target.y);\n    }\n  };\n  var helpers_canvas = exports$1; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.\n   * @namespace Chart.helpers.clear\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers_core.clear = exports$1.clear;\n  /**\n   * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.\n   * @namespace Chart.helpers.drawRoundedRectangle\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers_core.drawRoundedRectangle = function (ctx) {\n    ctx.beginPath();\n    exports$1.roundedRect.apply(exports$1, arguments);\n  };\n\n  var defaults = {\n    /**\n     * @private\n     */\n    _set: function _set(scope, values) {\n      return helpers_core.merge(this[scope] || (this[scope] = {}), values);\n    }\n  };\n\n  defaults._set('global', {\n    defaultColor: 'rgba(0,0,0,0.1)',\n    defaultFontColor: '#666',\n    defaultFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n    defaultFontSize: 12,\n    defaultFontStyle: 'normal',\n    defaultLineHeight: 1.2,\n    showLines: true\n  });\n\n  var core_defaults = defaults;\n  var valueOrDefault = helpers_core.valueOrDefault;\n  /**\n   * Converts the given font object into a CSS font string.\n   * @param {object} font - A font object.\n   * @return {string} The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n   * @private\n   */\n\n  function toFontString(font) {\n    if (!font || helpers_core.isNullOrUndef(font.size) || helpers_core.isNullOrUndef(font.family)) {\n      return null;\n    }\n\n    return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;\n  }\n  /**\n   * @alias Chart.helpers.options\n   * @namespace\n   */\n\n\n  var helpers_options = {\n    /**\n     * Converts the given line height `value` in pixels for a specific font `size`.\n     * @param {number|string} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n     * @param {number} size - The font size (in pixels) used to resolve relative `value`.\n     * @returns {number} The effective line height in pixels (size * 1.2 if value is invalid).\n     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n     * @since 2.7.0\n     */\n    toLineHeight: function toLineHeight(value, size) {\n      var matches = ('' + value).match(/^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/);\n\n      if (!matches || matches[1] === 'normal') {\n        return size * 1.2;\n      }\n\n      value = +matches[2];\n\n      switch (matches[3]) {\n        case 'px':\n          return value;\n\n        case '%':\n          value /= 100;\n          break;\n\n        default:\n          break;\n      }\n\n      return size * value;\n    },\n\n    /**\n     * Converts the given value into a padding object with pre-computed width/height.\n     * @param {number|object} value - If a number, set the value to all TRBL component,\n     *  else, if and object, use defined properties and sets undefined ones to 0.\n     * @returns {object} The padding values (top, right, bottom, left, width, height)\n     * @since 2.7.0\n     */\n    toPadding: function toPadding(value) {\n      var t, r, b, l;\n\n      if (helpers_core.isObject(value)) {\n        t = +value.top || 0;\n        r = +value.right || 0;\n        b = +value.bottom || 0;\n        l = +value.left || 0;\n      } else {\n        t = r = b = l = +value || 0;\n      }\n\n      return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        height: t + b,\n        width: l + r\n      };\n    },\n\n    /**\n     * Parses font options and returns the font object.\n     * @param {object} options - A object that contains font options to be parsed.\n     * @return {object} The font object.\n     * @todo Support font.* options and renamed to toFont().\n     * @private\n     */\n    _parseFont: function _parseFont(options) {\n      var globalDefaults = core_defaults.global;\n      var size = valueOrDefault(options.fontSize, globalDefaults.defaultFontSize);\n      var font = {\n        family: valueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily),\n        lineHeight: helpers_core.options.toLineHeight(valueOrDefault(options.lineHeight, globalDefaults.defaultLineHeight), size),\n        size: size,\n        style: valueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle),\n        weight: null,\n        string: ''\n      };\n      font.string = toFontString(font);\n      return font;\n    },\n\n    /**\n     * Evaluates the given `inputs` sequentially and returns the first defined value.\n     * @param {Array} inputs - An array of values, falling back to the last value.\n     * @param {object} [context] - If defined and the current value is a function, the value\n     * is called with `context` as first argument and the result becomes the new input.\n     * @param {number} [index] - If defined and the current value is an array, the value\n     * at `index` become the new input.\n     * @since 2.7.0\n     */\n    resolve: function resolve(inputs, context, index) {\n      var i, ilen, value;\n\n      for (i = 0, ilen = inputs.length; i < ilen; ++i) {\n        value = inputs[i];\n\n        if (value === undefined) {\n          continue;\n        }\n\n        if (context !== undefined && typeof value === 'function') {\n          value = value(context);\n        }\n\n        if (index !== undefined && helpers_core.isArray(value)) {\n          value = value[index];\n        }\n\n        if (value !== undefined) {\n          return value;\n        }\n      }\n    }\n  };\n  var helpers$1 = helpers_core;\n  var easing = helpers_easing;\n  var canvas = helpers_canvas;\n  var options = helpers_options;\n  helpers$1.easing = easing;\n  helpers$1.canvas = canvas;\n  helpers$1.options = options;\n\n  function interpolate(start, view, model, ease) {\n    var keys = Object.keys(model);\n    var i, ilen, key, actual, origin, target, type, c0, c1;\n\n    for (i = 0, ilen = keys.length; i < ilen; ++i) {\n      key = keys[i];\n      target = model[key]; // if a value is added to the model after pivot() has been called, the view\n      // doesn't contain it, so let's initialize the view to the target value.\n\n      if (!view.hasOwnProperty(key)) {\n        view[key] = target;\n      }\n\n      actual = view[key];\n\n      if (actual === target || key[0] === '_') {\n        continue;\n      }\n\n      if (!start.hasOwnProperty(key)) {\n        start[key] = actual;\n      }\n\n      origin = start[key];\n      type = typeof target;\n\n      if (type === typeof origin) {\n        if (type === 'string') {\n          c0 = chartjsColor(origin);\n\n          if (c0.valid) {\n            c1 = chartjsColor(target);\n\n            if (c1.valid) {\n              view[key] = c1.mix(c0, ease).rgbString();\n              continue;\n            }\n          }\n        } else if (helpers$1.isFinite(origin) && helpers$1.isFinite(target)) {\n          view[key] = origin + (target - origin) * ease;\n          continue;\n        }\n      }\n\n      view[key] = target;\n    }\n  }\n\n  var Element = function Element(configuration) {\n    helpers$1.extend(this, configuration);\n    this.initialize.apply(this, arguments);\n  };\n\n  helpers$1.extend(Element.prototype, {\n    initialize: function initialize() {\n      this.hidden = false;\n    },\n    pivot: function pivot() {\n      var me = this;\n\n      if (!me._view) {\n        me._view = helpers$1.clone(me._model);\n      }\n\n      me._start = {};\n      return me;\n    },\n    transition: function transition(ease) {\n      var me = this;\n      var model = me._model;\n      var start = me._start;\n      var view = me._view; // No animation -> No Transition\n\n      if (!model || ease === 1) {\n        me._view = model;\n        me._start = null;\n        return me;\n      }\n\n      if (!view) {\n        view = me._view = {};\n      }\n\n      if (!start) {\n        start = me._start = {};\n      }\n\n      interpolate(start, view, model, ease);\n      return me;\n    },\n    tooltipPosition: function tooltipPosition() {\n      return {\n        x: this._model.x,\n        y: this._model.y\n      };\n    },\n    hasValue: function hasValue() {\n      return helpers$1.isNumber(this._model.x) && helpers$1.isNumber(this._model.y);\n    }\n  });\n  Element.extend = helpers$1.inherits;\n  var core_element = Element;\n  var exports$2 = core_element.extend({\n    chart: null,\n    // the animation associated chart instance\n    currentStep: 0,\n    // the current animation step\n    numSteps: 60,\n    // default number of steps\n    easing: '',\n    // the easing to use for this animation\n    render: null,\n    // render function used by the animation service\n    onAnimationProgress: null,\n    // user specified callback to fire on each step of the animation\n    onAnimationComplete: null // user specified callback to fire when the animation finishes\n\n  });\n  var core_animation = exports$2; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use Chart.Animation instead\n   * @prop Chart.Animation#animationObject\n   * @deprecated since version 2.6.0\n   * @todo remove at version 3\n   */\n\n  Object.defineProperty(exports$2.prototype, 'animationObject', {\n    get: function get() {\n      return this;\n    }\n  });\n  /**\n   * Provided for backward compatibility, use Chart.Animation#chart instead\n   * @prop Chart.Animation#chartInstance\n   * @deprecated since version 2.6.0\n   * @todo remove at version 3\n   */\n\n  Object.defineProperty(exports$2.prototype, 'chartInstance', {\n    get: function get() {\n      return this.chart;\n    },\n    set: function set(value) {\n      this.chart = value;\n    }\n  });\n\n  core_defaults._set('global', {\n    animation: {\n      duration: 1000,\n      easing: 'easeOutQuart',\n      onProgress: helpers$1.noop,\n      onComplete: helpers$1.noop\n    }\n  });\n\n  var core_animations = {\n    animations: [],\n    request: null,\n\n    /**\n     * @param {Chart} chart - The chart to animate.\n     * @param {Chart.Animation} animation - The animation that we will animate.\n     * @param {number} duration - The animation duration in ms.\n     * @param {boolean} lazy - if true, the chart is not marked as animating to enable more responsive interactions\n     */\n    addAnimation: function addAnimation(chart, animation, duration, lazy) {\n      var animations = this.animations;\n      var i, ilen;\n      animation.chart = chart;\n      animation.startTime = Date.now();\n      animation.duration = duration;\n\n      if (!lazy) {\n        chart.animating = true;\n      }\n\n      for (i = 0, ilen = animations.length; i < ilen; ++i) {\n        if (animations[i].chart === chart) {\n          animations[i] = animation;\n          return;\n        }\n      }\n\n      animations.push(animation); // If there are no animations queued, manually kickstart a digest, for lack of a better word\n\n      if (animations.length === 1) {\n        this.requestAnimationFrame();\n      }\n    },\n    cancelAnimation: function cancelAnimation(chart) {\n      var index = helpers$1.findIndex(this.animations, function (animation) {\n        return animation.chart === chart;\n      });\n\n      if (index !== -1) {\n        this.animations.splice(index, 1);\n        chart.animating = false;\n      }\n    },\n    requestAnimationFrame: function requestAnimationFrame() {\n      var me = this;\n\n      if (me.request === null) {\n        // Skip animation frame requests until the active one is executed.\n        // This can happen when processing mouse events, e.g. 'mousemove'\n        // and 'mouseout' events will trigger multiple renders.\n        me.request = helpers$1.requestAnimFrame.call(window, function () {\n          me.request = null;\n          me.startDigest();\n        });\n      }\n    },\n\n    /**\n     * @private\n     */\n    startDigest: function startDigest() {\n      var me = this;\n      me.advance(); // Do we have more stuff to animate?\n\n      if (me.animations.length > 0) {\n        me.requestAnimationFrame();\n      }\n    },\n\n    /**\n     * @private\n     */\n    advance: function advance() {\n      var animations = this.animations;\n      var animation, chart, numSteps, nextStep;\n      var i = 0; // 1 animation per chart, so we are looping charts here\n\n      while (i < animations.length) {\n        animation = animations[i];\n        chart = animation.chart;\n        numSteps = animation.numSteps; // Make sure that currentStep starts at 1\n        // https://github.com/chartjs/Chart.js/issues/6104\n\n        nextStep = Math.floor((Date.now() - animation.startTime) / animation.duration * numSteps) + 1;\n        animation.currentStep = Math.min(nextStep, numSteps);\n        helpers$1.callback(animation.render, [chart, animation], chart);\n        helpers$1.callback(animation.onAnimationProgress, [animation], chart);\n\n        if (animation.currentStep >= numSteps) {\n          helpers$1.callback(animation.onAnimationComplete, [animation], chart);\n          chart.animating = false;\n          animations.splice(i, 1);\n        } else {\n          ++i;\n        }\n      }\n    }\n  };\n  var resolve = helpers$1.options.resolve;\n  var arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];\n  /**\n   * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',\n   * 'unshift') and notify the listener AFTER the array has been altered. Listeners are\n   * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.\n   */\n\n  function listenArrayEvents(array, listener) {\n    if (array._chartjs) {\n      array._chartjs.listeners.push(listener);\n\n      return;\n    }\n\n    Object.defineProperty(array, '_chartjs', {\n      configurable: true,\n      enumerable: false,\n      value: {\n        listeners: [listener]\n      }\n    });\n    arrayEvents.forEach(function (key) {\n      var method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);\n      var base = array[key];\n      Object.defineProperty(array, key, {\n        configurable: true,\n        enumerable: false,\n        value: function value() {\n          var args = Array.prototype.slice.call(arguments);\n          var res = base.apply(this, args);\n          helpers$1.each(array._chartjs.listeners, function (object) {\n            if (typeof object[method] === 'function') {\n              object[method].apply(object, args);\n            }\n          });\n          return res;\n        }\n      });\n    });\n  }\n  /**\n   * Removes the given array event listener and cleanup extra attached properties (such as\n   * the _chartjs stub and overridden methods) if array doesn't have any more listeners.\n   */\n\n\n  function unlistenArrayEvents(array, listener) {\n    var stub = array._chartjs;\n\n    if (!stub) {\n      return;\n    }\n\n    var listeners = stub.listeners;\n    var index = listeners.indexOf(listener);\n\n    if (index !== -1) {\n      listeners.splice(index, 1);\n    }\n\n    if (listeners.length > 0) {\n      return;\n    }\n\n    arrayEvents.forEach(function (key) {\n      delete array[key];\n    });\n    delete array._chartjs;\n  } // Base class for all dataset controllers (line, bar, etc)\n\n\n  var DatasetController = function DatasetController(chart, datasetIndex) {\n    this.initialize(chart, datasetIndex);\n  };\n\n  helpers$1.extend(DatasetController.prototype, {\n    /**\n     * Element type used to generate a meta dataset (e.g. Chart.element.Line).\n     * @type {Chart.core.element}\n     */\n    datasetElementType: null,\n\n    /**\n     * Element type used to generate a meta data (e.g. Chart.element.Point).\n     * @type {Chart.core.element}\n     */\n    dataElementType: null,\n    initialize: function initialize(chart, datasetIndex) {\n      var me = this;\n      me.chart = chart;\n      me.index = datasetIndex;\n      me.linkScales();\n      me.addElements();\n    },\n    updateIndex: function updateIndex(datasetIndex) {\n      this.index = datasetIndex;\n    },\n    linkScales: function linkScales() {\n      var me = this;\n      var meta = me.getMeta();\n      var dataset = me.getDataset();\n\n      if (meta.xAxisID === null || !(meta.xAxisID in me.chart.scales)) {\n        meta.xAxisID = dataset.xAxisID || me.chart.options.scales.xAxes[0].id;\n      }\n\n      if (meta.yAxisID === null || !(meta.yAxisID in me.chart.scales)) {\n        meta.yAxisID = dataset.yAxisID || me.chart.options.scales.yAxes[0].id;\n      }\n    },\n    getDataset: function getDataset() {\n      return this.chart.data.datasets[this.index];\n    },\n    getMeta: function getMeta() {\n      return this.chart.getDatasetMeta(this.index);\n    },\n    getScaleForId: function getScaleForId(scaleID) {\n      return this.chart.scales[scaleID];\n    },\n\n    /**\n     * @private\n     */\n    _getValueScaleId: function _getValueScaleId() {\n      return this.getMeta().yAxisID;\n    },\n\n    /**\n     * @private\n     */\n    _getIndexScaleId: function _getIndexScaleId() {\n      return this.getMeta().xAxisID;\n    },\n\n    /**\n     * @private\n     */\n    _getValueScale: function _getValueScale() {\n      return this.getScaleForId(this._getValueScaleId());\n    },\n\n    /**\n     * @private\n     */\n    _getIndexScale: function _getIndexScale() {\n      return this.getScaleForId(this._getIndexScaleId());\n    },\n    reset: function reset() {\n      this.update(true);\n    },\n\n    /**\n     * @private\n     */\n    destroy: function destroy() {\n      if (this._data) {\n        unlistenArrayEvents(this._data, this);\n      }\n    },\n    createMetaDataset: function createMetaDataset() {\n      var me = this;\n      var type = me.datasetElementType;\n      return type && new type({\n        _chart: me.chart,\n        _datasetIndex: me.index\n      });\n    },\n    createMetaData: function createMetaData(index) {\n      var me = this;\n      var type = me.dataElementType;\n      return type && new type({\n        _chart: me.chart,\n        _datasetIndex: me.index,\n        _index: index\n      });\n    },\n    addElements: function addElements() {\n      var me = this;\n      var meta = me.getMeta();\n      var data = me.getDataset().data || [];\n      var metaData = meta.data;\n      var i, ilen;\n\n      for (i = 0, ilen = data.length; i < ilen; ++i) {\n        metaData[i] = metaData[i] || me.createMetaData(i);\n      }\n\n      meta.dataset = meta.dataset || me.createMetaDataset();\n    },\n    addElementAndReset: function addElementAndReset(index) {\n      var element = this.createMetaData(index);\n      this.getMeta().data.splice(index, 0, element);\n      this.updateElement(element, index, true);\n    },\n    buildOrUpdateElements: function buildOrUpdateElements() {\n      var me = this;\n      var dataset = me.getDataset();\n      var data = dataset.data || (dataset.data = []); // In order to correctly handle data addition/deletion animation (an thus simulate\n      // real-time charts), we need to monitor these data modifications and synchronize\n      // the internal meta data accordingly.\n\n      if (me._data !== data) {\n        if (me._data) {\n          // This case happens when the user replaced the data array instance.\n          unlistenArrayEvents(me._data, me);\n        }\n\n        if (data && Object.isExtensible(data)) {\n          listenArrayEvents(data, me);\n        }\n\n        me._data = data;\n      } // Re-sync meta data in case the user replaced the data array or if we missed\n      // any updates and so make sure that we handle number of datapoints changing.\n\n\n      me.resyncElements();\n    },\n    update: helpers$1.noop,\n    transition: function transition(easingValue) {\n      var meta = this.getMeta();\n      var elements = meta.data || [];\n      var ilen = elements.length;\n      var i = 0;\n\n      for (; i < ilen; ++i) {\n        elements[i].transition(easingValue);\n      }\n\n      if (meta.dataset) {\n        meta.dataset.transition(easingValue);\n      }\n    },\n    draw: function draw() {\n      var meta = this.getMeta();\n      var elements = meta.data || [];\n      var ilen = elements.length;\n      var i = 0;\n\n      if (meta.dataset) {\n        meta.dataset.draw();\n      }\n\n      for (; i < ilen; ++i) {\n        elements[i].draw();\n      }\n    },\n    removeHoverStyle: function removeHoverStyle(element) {\n      helpers$1.merge(element._model, element.$previousStyle || {});\n      delete element.$previousStyle;\n    },\n    setHoverStyle: function setHoverStyle(element) {\n      var dataset = this.chart.data.datasets[element._datasetIndex];\n      var index = element._index;\n      var custom = element.custom || {};\n      var model = element._model;\n      var getHoverColor = helpers$1.getHoverColor;\n      element.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth\n      };\n      model.backgroundColor = resolve([custom.hoverBackgroundColor, dataset.hoverBackgroundColor, getHoverColor(model.backgroundColor)], undefined, index);\n      model.borderColor = resolve([custom.hoverBorderColor, dataset.hoverBorderColor, getHoverColor(model.borderColor)], undefined, index);\n      model.borderWidth = resolve([custom.hoverBorderWidth, dataset.hoverBorderWidth, model.borderWidth], undefined, index);\n    },\n\n    /**\n     * @private\n     */\n    resyncElements: function resyncElements() {\n      var me = this;\n      var meta = me.getMeta();\n      var data = me.getDataset().data;\n      var numMeta = meta.data.length;\n      var numData = data.length;\n\n      if (numData < numMeta) {\n        meta.data.splice(numData, numMeta - numData);\n      } else if (numData > numMeta) {\n        me.insertElements(numMeta, numData - numMeta);\n      }\n    },\n\n    /**\n     * @private\n     */\n    insertElements: function insertElements(start, count) {\n      for (var i = 0; i < count; ++i) {\n        this.addElementAndReset(start + i);\n      }\n    },\n\n    /**\n     * @private\n     */\n    onDataPush: function onDataPush() {\n      var count = arguments.length;\n      this.insertElements(this.getDataset().data.length - count, count);\n    },\n\n    /**\n     * @private\n     */\n    onDataPop: function onDataPop() {\n      this.getMeta().data.pop();\n    },\n\n    /**\n     * @private\n     */\n    onDataShift: function onDataShift() {\n      this.getMeta().data.shift();\n    },\n\n    /**\n     * @private\n     */\n    onDataSplice: function onDataSplice(start, count) {\n      this.getMeta().data.splice(start, count);\n      this.insertElements(start, arguments.length - 2);\n    },\n\n    /**\n     * @private\n     */\n    onDataUnshift: function onDataUnshift() {\n      this.insertElements(0, arguments.length);\n    }\n  });\n  DatasetController.extend = helpers$1.inherits;\n  var core_datasetController = DatasetController;\n\n  core_defaults._set('global', {\n    elements: {\n      arc: {\n        backgroundColor: core_defaults.global.defaultColor,\n        borderColor: '#fff',\n        borderWidth: 2,\n        borderAlign: 'center'\n      }\n    }\n  });\n\n  var element_arc = core_element.extend({\n    inLabelRange: function inLabelRange(mouseX) {\n      var vm = this._view;\n\n      if (vm) {\n        return Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2);\n      }\n\n      return false;\n    },\n    inRange: function inRange(chartX, chartY) {\n      var vm = this._view;\n\n      if (vm) {\n        var pointRelativePosition = helpers$1.getAngleFromPoint(vm, {\n          x: chartX,\n          y: chartY\n        });\n        var angle = pointRelativePosition.angle;\n        var distance = pointRelativePosition.distance; // Sanitise angle range\n\n        var startAngle = vm.startAngle;\n        var endAngle = vm.endAngle;\n\n        while (endAngle < startAngle) {\n          endAngle += 2.0 * Math.PI;\n        }\n\n        while (angle > endAngle) {\n          angle -= 2.0 * Math.PI;\n        }\n\n        while (angle < startAngle) {\n          angle += 2.0 * Math.PI;\n        } // Check if within the range of the open/close angle\n\n\n        var betweenAngles = angle >= startAngle && angle <= endAngle;\n        var withinRadius = distance >= vm.innerRadius && distance <= vm.outerRadius;\n        return betweenAngles && withinRadius;\n      }\n\n      return false;\n    },\n    getCenterPoint: function getCenterPoint() {\n      var vm = this._view;\n      var halfAngle = (vm.startAngle + vm.endAngle) / 2;\n      var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;\n      return {\n        x: vm.x + Math.cos(halfAngle) * halfRadius,\n        y: vm.y + Math.sin(halfAngle) * halfRadius\n      };\n    },\n    getArea: function getArea() {\n      var vm = this._view;\n      return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));\n    },\n    tooltipPosition: function tooltipPosition() {\n      var vm = this._view;\n      var centreAngle = vm.startAngle + (vm.endAngle - vm.startAngle) / 2;\n      var rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;\n      return {\n        x: vm.x + Math.cos(centreAngle) * rangeFromCentre,\n        y: vm.y + Math.sin(centreAngle) * rangeFromCentre\n      };\n    },\n    draw: function draw() {\n      var ctx = this._chart.ctx;\n      var vm = this._view;\n      var sA = vm.startAngle;\n      var eA = vm.endAngle;\n      var pixelMargin = vm.borderAlign === 'inner' ? 0.33 : 0;\n      var angleMargin;\n      ctx.save();\n      ctx.beginPath();\n      ctx.arc(vm.x, vm.y, Math.max(vm.outerRadius - pixelMargin, 0), sA, eA);\n      ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);\n      ctx.closePath();\n      ctx.fillStyle = vm.backgroundColor;\n      ctx.fill();\n\n      if (vm.borderWidth) {\n        if (vm.borderAlign === 'inner') {\n          // Draw an inner border by cliping the arc and drawing a double-width border\n          // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n          ctx.beginPath();\n          angleMargin = pixelMargin / vm.outerRadius;\n          ctx.arc(vm.x, vm.y, vm.outerRadius, sA - angleMargin, eA + angleMargin);\n\n          if (vm.innerRadius > pixelMargin) {\n            angleMargin = pixelMargin / vm.innerRadius;\n            ctx.arc(vm.x, vm.y, vm.innerRadius - pixelMargin, eA + angleMargin, sA - angleMargin, true);\n          } else {\n            ctx.arc(vm.x, vm.y, pixelMargin, eA + Math.PI / 2, sA - Math.PI / 2);\n          }\n\n          ctx.closePath();\n          ctx.clip();\n          ctx.beginPath();\n          ctx.arc(vm.x, vm.y, vm.outerRadius, sA, eA);\n          ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);\n          ctx.closePath();\n          ctx.lineWidth = vm.borderWidth * 2;\n          ctx.lineJoin = 'round';\n        } else {\n          ctx.lineWidth = vm.borderWidth;\n          ctx.lineJoin = 'bevel';\n        }\n\n        ctx.strokeStyle = vm.borderColor;\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  });\n  var valueOrDefault$1 = helpers$1.valueOrDefault;\n  var defaultColor = core_defaults.global.defaultColor;\n\n  core_defaults._set('global', {\n    elements: {\n      line: {\n        tension: 0.4,\n        backgroundColor: defaultColor,\n        borderWidth: 3,\n        borderColor: defaultColor,\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        capBezierPoints: true,\n        fill: true // do we fill in the area between the line and its base axis\n\n      }\n    }\n  });\n\n  var element_line = core_element.extend({\n    draw: function draw() {\n      var me = this;\n      var vm = me._view;\n      var ctx = me._chart.ctx;\n      var spanGaps = vm.spanGaps;\n\n      var points = me._children.slice(); // clone array\n\n\n      var globalDefaults = core_defaults.global;\n      var globalOptionLineElements = globalDefaults.elements.line;\n      var lastDrawnIndex = -1;\n      var index, current, previous, currentVM; // If we are looping, adding the first point again\n\n      if (me._loop && points.length) {\n        points.push(points[0]);\n      }\n\n      ctx.save(); // Stroke Line Options\n\n      ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle; // IE 9 and 10 do not support line dash\n\n      if (ctx.setLineDash) {\n        ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);\n      }\n\n      ctx.lineDashOffset = valueOrDefault$1(vm.borderDashOffset, globalOptionLineElements.borderDashOffset);\n      ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;\n      ctx.lineWidth = valueOrDefault$1(vm.borderWidth, globalOptionLineElements.borderWidth);\n      ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor; // Stroke Line\n\n      ctx.beginPath();\n      lastDrawnIndex = -1;\n\n      for (index = 0; index < points.length; ++index) {\n        current = points[index];\n        previous = helpers$1.previousItem(points, index);\n        currentVM = current._view; // First point moves to it's starting position no matter what\n\n        if (index === 0) {\n          if (!currentVM.skip) {\n            ctx.moveTo(currentVM.x, currentVM.y);\n            lastDrawnIndex = index;\n          }\n        } else {\n          previous = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];\n\n          if (!currentVM.skip) {\n            if (lastDrawnIndex !== index - 1 && !spanGaps || lastDrawnIndex === -1) {\n              // There was a gap and this is the first point after the gap\n              ctx.moveTo(currentVM.x, currentVM.y);\n            } else {\n              // Line to next point\n              helpers$1.canvas.lineTo(ctx, previous._view, current._view);\n            }\n\n            lastDrawnIndex = index;\n          }\n        }\n      }\n\n      ctx.stroke();\n      ctx.restore();\n    }\n  });\n  var valueOrDefault$2 = helpers$1.valueOrDefault;\n  var defaultColor$1 = core_defaults.global.defaultColor;\n\n  core_defaults._set('global', {\n    elements: {\n      point: {\n        radius: 3,\n        pointStyle: 'circle',\n        backgroundColor: defaultColor$1,\n        borderColor: defaultColor$1,\n        borderWidth: 1,\n        // Hover\n        hitRadius: 1,\n        hoverRadius: 4,\n        hoverBorderWidth: 1\n      }\n    }\n  });\n\n  function xRange(mouseX) {\n    var vm = this._view;\n    return vm ? Math.abs(mouseX - vm.x) < vm.radius + vm.hitRadius : false;\n  }\n\n  function yRange(mouseY) {\n    var vm = this._view;\n    return vm ? Math.abs(mouseY - vm.y) < vm.radius + vm.hitRadius : false;\n  }\n\n  var element_point = core_element.extend({\n    inRange: function inRange(mouseX, mouseY) {\n      var vm = this._view;\n      return vm ? Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2) < Math.pow(vm.hitRadius + vm.radius, 2) : false;\n    },\n    inLabelRange: xRange,\n    inXRange: xRange,\n    inYRange: yRange,\n    getCenterPoint: function getCenterPoint() {\n      var vm = this._view;\n      return {\n        x: vm.x,\n        y: vm.y\n      };\n    },\n    getArea: function getArea() {\n      return Math.PI * Math.pow(this._view.radius, 2);\n    },\n    tooltipPosition: function tooltipPosition() {\n      var vm = this._view;\n      return {\n        x: vm.x,\n        y: vm.y,\n        padding: vm.radius + vm.borderWidth\n      };\n    },\n    draw: function draw(chartArea) {\n      var vm = this._view;\n      var ctx = this._chart.ctx;\n      var pointStyle = vm.pointStyle;\n      var rotation = vm.rotation;\n      var radius = vm.radius;\n      var x = vm.x;\n      var y = vm.y;\n      var globalDefaults = core_defaults.global;\n      var defaultColor = globalDefaults.defaultColor; // eslint-disable-line no-shadow\n\n      if (vm.skip) {\n        return;\n      } // Clipping for Points.\n\n\n      if (chartArea === undefined || helpers$1.canvas._isPointInArea(vm, chartArea)) {\n        ctx.strokeStyle = vm.borderColor || defaultColor;\n        ctx.lineWidth = valueOrDefault$2(vm.borderWidth, globalDefaults.elements.point.borderWidth);\n        ctx.fillStyle = vm.backgroundColor || defaultColor;\n        helpers$1.canvas.drawPoint(ctx, pointStyle, radius, x, y, rotation);\n      }\n    }\n  });\n  var defaultColor$2 = core_defaults.global.defaultColor;\n\n  core_defaults._set('global', {\n    elements: {\n      rectangle: {\n        backgroundColor: defaultColor$2,\n        borderColor: defaultColor$2,\n        borderSkipped: 'bottom',\n        borderWidth: 0\n      }\n    }\n  });\n\n  function isVertical(vm) {\n    return vm && vm.width !== undefined;\n  }\n  /**\n   * Helper function to get the bounds of the bar regardless of the orientation\n   * @param bar {Chart.Element.Rectangle} the bar\n   * @return {Bounds} bounds of the bar\n   * @private\n   */\n\n\n  function getBarBounds(vm) {\n    var x1, x2, y1, y2, half;\n\n    if (isVertical(vm)) {\n      half = vm.width / 2;\n      x1 = vm.x - half;\n      x2 = vm.x + half;\n      y1 = Math.min(vm.y, vm.base);\n      y2 = Math.max(vm.y, vm.base);\n    } else {\n      half = vm.height / 2;\n      x1 = Math.min(vm.x, vm.base);\n      x2 = Math.max(vm.x, vm.base);\n      y1 = vm.y - half;\n      y2 = vm.y + half;\n    }\n\n    return {\n      left: x1,\n      top: y1,\n      right: x2,\n      bottom: y2\n    };\n  }\n\n  function swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n  }\n\n  function parseBorderSkipped(vm) {\n    var edge = vm.borderSkipped;\n    var res = {};\n\n    if (!edge) {\n      return res;\n    }\n\n    if (vm.horizontal) {\n      if (vm.base > vm.x) {\n        edge = swap(edge, 'left', 'right');\n      }\n    } else if (vm.base < vm.y) {\n      edge = swap(edge, 'bottom', 'top');\n    }\n\n    res[edge] = true;\n    return res;\n  }\n\n  function parseBorderWidth(vm, maxW, maxH) {\n    var value = vm.borderWidth;\n    var skip = parseBorderSkipped(vm);\n    var t, r, b, l;\n\n    if (helpers$1.isObject(value)) {\n      t = +value.top || 0;\n      r = +value.right || 0;\n      b = +value.bottom || 0;\n      l = +value.left || 0;\n    } else {\n      t = r = b = l = +value || 0;\n    }\n\n    return {\n      t: skip.top || t < 0 ? 0 : t > maxH ? maxH : t,\n      r: skip.right || r < 0 ? 0 : r > maxW ? maxW : r,\n      b: skip.bottom || b < 0 ? 0 : b > maxH ? maxH : b,\n      l: skip.left || l < 0 ? 0 : l > maxW ? maxW : l\n    };\n  }\n\n  function boundingRects(vm) {\n    var bounds = getBarBounds(vm);\n    var width = bounds.right - bounds.left;\n    var height = bounds.bottom - bounds.top;\n    var border = parseBorderWidth(vm, width / 2, height / 2);\n    return {\n      outer: {\n        x: bounds.left,\n        y: bounds.top,\n        w: width,\n        h: height\n      },\n      inner: {\n        x: bounds.left + border.l,\n        y: bounds.top + border.t,\n        w: width - border.l - border.r,\n        h: height - border.t - border.b\n      }\n    };\n  }\n\n  function _inRange(vm, x, y) {\n    var skipX = x === null;\n    var skipY = y === null;\n    var bounds = !vm || skipX && skipY ? false : getBarBounds(vm);\n    return bounds && (skipX || x >= bounds.left && x <= bounds.right) && (skipY || y >= bounds.top && y <= bounds.bottom);\n  }\n\n  var element_rectangle = core_element.extend({\n    draw: function draw() {\n      var ctx = this._chart.ctx;\n      var vm = this._view;\n      var rects = boundingRects(vm);\n      var outer = rects.outer;\n      var inner = rects.inner;\n      ctx.fillStyle = vm.backgroundColor;\n      ctx.fillRect(outer.x, outer.y, outer.w, outer.h);\n\n      if (outer.w === inner.w && outer.h === inner.h) {\n        return;\n      }\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(outer.x, outer.y, outer.w, outer.h);\n      ctx.clip();\n      ctx.fillStyle = vm.borderColor;\n      ctx.rect(inner.x, inner.y, inner.w, inner.h);\n      ctx.fill('evenodd');\n      ctx.restore();\n    },\n    height: function height() {\n      var vm = this._view;\n      return vm.base - vm.y;\n    },\n    inRange: function inRange(mouseX, mouseY) {\n      return _inRange(this._view, mouseX, mouseY);\n    },\n    inLabelRange: function inLabelRange(mouseX, mouseY) {\n      var vm = this._view;\n      return isVertical(vm) ? _inRange(vm, mouseX, null) : _inRange(vm, null, mouseY);\n    },\n    inXRange: function inXRange(mouseX) {\n      return _inRange(this._view, mouseX, null);\n    },\n    inYRange: function inYRange(mouseY) {\n      return _inRange(this._view, null, mouseY);\n    },\n    getCenterPoint: function getCenterPoint() {\n      var vm = this._view;\n      var x, y;\n\n      if (isVertical(vm)) {\n        x = vm.x;\n        y = (vm.y + vm.base) / 2;\n      } else {\n        x = (vm.x + vm.base) / 2;\n        y = vm.y;\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    },\n    getArea: function getArea() {\n      var vm = this._view;\n      return isVertical(vm) ? vm.width * Math.abs(vm.y - vm.base) : vm.height * Math.abs(vm.x - vm.base);\n    },\n    tooltipPosition: function tooltipPosition() {\n      var vm = this._view;\n      return {\n        x: vm.x,\n        y: vm.y\n      };\n    }\n  });\n  var elements = {};\n  var Arc = element_arc;\n  var Line = element_line;\n  var Point = element_point;\n  var Rectangle = element_rectangle;\n  elements.Arc = Arc;\n  elements.Line = Line;\n  elements.Point = Point;\n  elements.Rectangle = Rectangle;\n  var resolve$1 = helpers$1.options.resolve;\n\n  core_defaults._set('bar', {\n    hover: {\n      mode: 'label'\n    },\n    scales: {\n      xAxes: [{\n        type: 'category',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        offset: true,\n        gridLines: {\n          offsetGridLines: true\n        }\n      }],\n      yAxes: [{\n        type: 'linear'\n      }]\n    }\n  });\n  /**\n   * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n   * @private\n   */\n\n\n  function computeMinSampleSize(scale, pixels) {\n    var min = scale.isHorizontal() ? scale.width : scale.height;\n    var ticks = scale.getTicks();\n    var prev, curr, i, ilen;\n\n    for (i = 1, ilen = pixels.length; i < ilen; ++i) {\n      min = Math.min(min, Math.abs(pixels[i] - pixels[i - 1]));\n    }\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      curr = scale.getPixelForTick(i);\n      min = i > 0 ? Math.min(min, curr - prev) : min;\n      prev = curr;\n    }\n\n    return min;\n  }\n  /**\n   * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n   * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n   * mode currently always generates bars equally sized (until we introduce scriptable options?).\n   * @private\n   */\n\n\n  function computeFitCategoryTraits(index, ruler, options) {\n    var thickness = options.barThickness;\n    var count = ruler.stackCount;\n    var curr = ruler.pixels[index];\n    var size, ratio;\n\n    if (helpers$1.isNullOrUndef(thickness)) {\n      size = ruler.min * options.categoryPercentage;\n      ratio = options.barPercentage;\n    } else {\n      // When bar thickness is enforced, category and bar percentages are ignored.\n      // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n      // and deprecate barPercentage since this value is ignored when thickness is absolute.\n      size = thickness * count;\n      ratio = 1;\n    }\n\n    return {\n      chunk: size / count,\n      ratio: ratio,\n      start: curr - size / 2\n    };\n  }\n  /**\n   * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n   * percentage options are 1), based on the previous and following categories. This mode\n   * generates bars with different widths when data are not evenly spaced.\n   * @private\n   */\n\n\n  function computeFlexCategoryTraits(index, ruler, options) {\n    var pixels = ruler.pixels;\n    var curr = pixels[index];\n    var prev = index > 0 ? pixels[index - 1] : null;\n    var next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    var percent = options.categoryPercentage;\n    var start, size;\n\n    if (prev === null) {\n      // first data: its size is double based on the next point or,\n      // if it's also the last data, we use the scale size.\n      prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n\n    if (next === null) {\n      // last data: its size is also double based on the previous point.\n      next = curr + curr - prev;\n    }\n\n    start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    size = Math.abs(next - prev) / 2 * percent;\n    return {\n      chunk: size / ruler.stackCount,\n      ratio: options.barPercentage,\n      start: start\n    };\n  }\n\n  var controller_bar = core_datasetController.extend({\n    dataElementType: elements.Rectangle,\n    initialize: function initialize() {\n      var me = this;\n      var meta;\n      core_datasetController.prototype.initialize.apply(me, arguments);\n      meta = me.getMeta();\n      meta.stack = me.getDataset().stack;\n      meta.bar = true;\n    },\n    update: function update(reset) {\n      var me = this;\n      var rects = me.getMeta().data;\n      var i, ilen;\n      me._ruler = me.getRuler();\n\n      for (i = 0, ilen = rects.length; i < ilen; ++i) {\n        me.updateElement(rects[i], i, reset);\n      }\n    },\n    updateElement: function updateElement(rectangle, index, reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var dataset = me.getDataset();\n\n      var options = me._resolveElementOptions(rectangle, index);\n\n      rectangle._xScale = me.getScaleForId(meta.xAxisID);\n      rectangle._yScale = me.getScaleForId(meta.yAxisID);\n      rectangle._datasetIndex = me.index;\n      rectangle._index = index;\n      rectangle._model = {\n        backgroundColor: options.backgroundColor,\n        borderColor: options.borderColor,\n        borderSkipped: options.borderSkipped,\n        borderWidth: options.borderWidth,\n        datasetLabel: dataset.label,\n        label: me.chart.data.labels[index]\n      };\n\n      me._updateElementGeometry(rectangle, index, reset);\n\n      rectangle.pivot();\n    },\n\n    /**\n     * @private\n     */\n    _updateElementGeometry: function _updateElementGeometry(rectangle, index, reset) {\n      var me = this;\n      var model = rectangle._model;\n\n      var vscale = me._getValueScale();\n\n      var base = vscale.getBasePixel();\n      var horizontal = vscale.isHorizontal();\n      var ruler = me._ruler || me.getRuler();\n      var vpixels = me.calculateBarValuePixels(me.index, index);\n      var ipixels = me.calculateBarIndexPixels(me.index, index, ruler);\n      model.horizontal = horizontal;\n      model.base = reset ? base : vpixels.base;\n      model.x = horizontal ? reset ? base : vpixels.head : ipixels.center;\n      model.y = horizontal ? ipixels.center : reset ? base : vpixels.head;\n      model.height = horizontal ? ipixels.size : undefined;\n      model.width = horizontal ? undefined : ipixels.size;\n    },\n\n    /**\n     * Returns the stacks based on groups and bar visibility.\n     * @param {number} [last] - The dataset index\n     * @returns {string[]} The list of stack IDs\n     * @private\n     */\n    _getStacks: function _getStacks(last) {\n      var me = this;\n      var chart = me.chart;\n\n      var scale = me._getIndexScale();\n\n      var stacked = scale.options.stacked;\n      var ilen = last === undefined ? chart.data.datasets.length : last + 1;\n      var stacks = [];\n      var i, meta;\n\n      for (i = 0; i < ilen; ++i) {\n        meta = chart.getDatasetMeta(i);\n\n        if (meta.bar && chart.isDatasetVisible(i) && (stacked === false || stacked === true && stacks.indexOf(meta.stack) === -1 || stacked === undefined && (meta.stack === undefined || stacks.indexOf(meta.stack) === -1))) {\n          stacks.push(meta.stack);\n        }\n      }\n\n      return stacks;\n    },\n\n    /**\n     * Returns the effective number of stacks based on groups and bar visibility.\n     * @private\n     */\n    getStackCount: function getStackCount() {\n      return this._getStacks().length;\n    },\n\n    /**\n     * Returns the stack index for the given dataset based on groups and bar visibility.\n     * @param {number} [datasetIndex] - The dataset index\n     * @param {string} [name] - The stack name to find\n     * @returns {number} The stack index\n     * @private\n     */\n    getStackIndex: function getStackIndex(datasetIndex, name) {\n      var stacks = this._getStacks(datasetIndex);\n\n      var index = name !== undefined ? stacks.indexOf(name) : -1; // indexOf returns -1 if element is not present\n\n      return index === -1 ? stacks.length - 1 : index;\n    },\n\n    /**\n     * @private\n     */\n    getRuler: function getRuler() {\n      var me = this;\n\n      var scale = me._getIndexScale();\n\n      var stackCount = me.getStackCount();\n      var datasetIndex = me.index;\n      var isHorizontal = scale.isHorizontal();\n      var start = isHorizontal ? scale.left : scale.top;\n      var end = start + (isHorizontal ? scale.width : scale.height);\n      var pixels = [];\n      var i, ilen, min;\n\n      for (i = 0, ilen = me.getMeta().data.length; i < ilen; ++i) {\n        pixels.push(scale.getPixelForValue(null, i, datasetIndex));\n      }\n\n      min = helpers$1.isNullOrUndef(scale.options.barThickness) ? computeMinSampleSize(scale, pixels) : -1;\n      return {\n        min: min,\n        pixels: pixels,\n        start: start,\n        end: end,\n        stackCount: stackCount,\n        scale: scale\n      };\n    },\n\n    /**\n     * Note: pixel values are not clamped to the scale area.\n     * @private\n     */\n    calculateBarValuePixels: function calculateBarValuePixels(datasetIndex, index) {\n      var me = this;\n      var chart = me.chart;\n      var meta = me.getMeta();\n\n      var scale = me._getValueScale();\n\n      var isHorizontal = scale.isHorizontal();\n      var datasets = chart.data.datasets;\n      var value = +scale.getRightValue(datasets[datasetIndex].data[index]);\n      var minBarLength = scale.options.minBarLength;\n      var stacked = scale.options.stacked;\n      var stack = meta.stack;\n      var start = 0;\n      var i, imeta, ivalue, base, head, size;\n\n      if (stacked || stacked === undefined && stack !== undefined) {\n        for (i = 0; i < datasetIndex; ++i) {\n          imeta = chart.getDatasetMeta(i);\n\n          if (imeta.bar && imeta.stack === stack && imeta.controller._getValueScaleId() === scale.id && chart.isDatasetVisible(i)) {\n            ivalue = +scale.getRightValue(datasets[i].data[index]);\n\n            if (value < 0 && ivalue < 0 || value >= 0 && ivalue > 0) {\n              start += ivalue;\n            }\n          }\n        }\n      }\n\n      base = scale.getPixelForValue(start);\n      head = scale.getPixelForValue(start + value);\n      size = head - base;\n\n      if (minBarLength !== undefined && Math.abs(size) < minBarLength) {\n        size = minBarLength;\n\n        if (value >= 0 && !isHorizontal || value < 0 && isHorizontal) {\n          head = base - minBarLength;\n        } else {\n          head = base + minBarLength;\n        }\n      }\n\n      return {\n        size: size,\n        base: base,\n        head: head,\n        center: head + size / 2\n      };\n    },\n\n    /**\n     * @private\n     */\n    calculateBarIndexPixels: function calculateBarIndexPixels(datasetIndex, index, ruler) {\n      var me = this;\n      var options = ruler.scale.options;\n      var range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options) : computeFitCategoryTraits(index, ruler, options);\n      var stackIndex = me.getStackIndex(datasetIndex, me.getMeta().stack);\n      var center = range.start + range.chunk * stackIndex + range.chunk / 2;\n      var size = Math.min(helpers$1.valueOrDefault(options.maxBarThickness, Infinity), range.chunk * range.ratio);\n      return {\n        base: center - size / 2,\n        head: center + size / 2,\n        center: center,\n        size: size\n      };\n    },\n    draw: function draw() {\n      var me = this;\n      var chart = me.chart;\n\n      var scale = me._getValueScale();\n\n      var rects = me.getMeta().data;\n      var dataset = me.getDataset();\n      var ilen = rects.length;\n      var i = 0;\n      helpers$1.canvas.clipArea(chart.ctx, chart.chartArea);\n\n      for (; i < ilen; ++i) {\n        if (!isNaN(scale.getRightValue(dataset.data[i]))) {\n          rects[i].draw();\n        }\n      }\n\n      helpers$1.canvas.unclipArea(chart.ctx);\n    },\n\n    /**\n     * @private\n     */\n    _resolveElementOptions: function _resolveElementOptions(rectangle, index) {\n      var me = this;\n      var chart = me.chart;\n      var datasets = chart.data.datasets;\n      var dataset = datasets[me.index];\n      var custom = rectangle.custom || {};\n      var options = chart.options.elements.rectangle;\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var keys = ['backgroundColor', 'borderColor', 'borderSkipped', 'borderWidth'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$1([custom[key], dataset[key], options[key]], context, index);\n      }\n\n      return values;\n    }\n  });\n  var valueOrDefault$3 = helpers$1.valueOrDefault;\n  var resolve$2 = helpers$1.options.resolve;\n\n  core_defaults._set('bubble', {\n    hover: {\n      mode: 'single'\n    },\n    scales: {\n      xAxes: [{\n        type: 'linear',\n        // bubble should probably use a linear scale by default\n        position: 'bottom',\n        id: 'x-axis-0' // need an ID so datasets can reference the scale\n\n      }],\n      yAxes: [{\n        type: 'linear',\n        position: 'left',\n        id: 'y-axis-0'\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        title: function title() {\n          // Title doesn't make sense for scatter since we format the data as a point\n          return '';\n        },\n        label: function label(item, data) {\n          var datasetLabel = data.datasets[item.datasetIndex].label || '';\n          var dataPoint = data.datasets[item.datasetIndex].data[item.index];\n          return datasetLabel + ': (' + item.xLabel + ', ' + item.yLabel + ', ' + dataPoint.r + ')';\n        }\n      }\n    }\n  });\n\n  var controller_bubble = core_datasetController.extend({\n    /**\n     * @protected\n     */\n    dataElementType: elements.Point,\n\n    /**\n     * @protected\n     */\n    update: function update(reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var points = meta.data; // Update Points\n\n      helpers$1.each(points, function (point, index) {\n        me.updateElement(point, index, reset);\n      });\n    },\n\n    /**\n     * @protected\n     */\n    updateElement: function updateElement(point, index, reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var custom = point.custom || {};\n      var xScale = me.getScaleForId(meta.xAxisID);\n      var yScale = me.getScaleForId(meta.yAxisID);\n\n      var options = me._resolveElementOptions(point, index);\n\n      var data = me.getDataset().data[index];\n      var dsIndex = me.index;\n      var x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex);\n      var y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex);\n      point._xScale = xScale;\n      point._yScale = yScale;\n      point._options = options;\n      point._datasetIndex = dsIndex;\n      point._index = index;\n      point._model = {\n        backgroundColor: options.backgroundColor,\n        borderColor: options.borderColor,\n        borderWidth: options.borderWidth,\n        hitRadius: options.hitRadius,\n        pointStyle: options.pointStyle,\n        rotation: options.rotation,\n        radius: reset ? 0 : options.radius,\n        skip: custom.skip || isNaN(x) || isNaN(y),\n        x: x,\n        y: y\n      };\n      point.pivot();\n    },\n\n    /**\n     * @protected\n     */\n    setHoverStyle: function setHoverStyle(point) {\n      var model = point._model;\n      var options = point._options;\n      var getHoverColor = helpers$1.getHoverColor;\n      point.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth,\n        radius: model.radius\n      };\n      model.backgroundColor = valueOrDefault$3(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n      model.borderColor = valueOrDefault$3(options.hoverBorderColor, getHoverColor(options.borderColor));\n      model.borderWidth = valueOrDefault$3(options.hoverBorderWidth, options.borderWidth);\n      model.radius = options.radius + options.hoverRadius;\n    },\n\n    /**\n     * @private\n     */\n    _resolveElementOptions: function _resolveElementOptions(point, index) {\n      var me = this;\n      var chart = me.chart;\n      var datasets = chart.data.datasets;\n      var dataset = datasets[me.index];\n      var custom = point.custom || {};\n      var options = chart.options.elements.point;\n      var data = dataset.data[index];\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var keys = ['backgroundColor', 'borderColor', 'borderWidth', 'hoverBackgroundColor', 'hoverBorderColor', 'hoverBorderWidth', 'hoverRadius', 'hitRadius', 'pointStyle', 'rotation'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$2([custom[key], dataset[key], options[key]], context, index);\n      } // Custom radius resolution\n\n\n      values.radius = resolve$2([custom.radius, data ? data.r : undefined, dataset.radius, options.radius], context, index);\n      return values;\n    }\n  });\n  var resolve$3 = helpers$1.options.resolve;\n  var valueOrDefault$4 = helpers$1.valueOrDefault;\n\n  core_defaults._set('doughnut', {\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    hover: {\n      mode: 'single'\n    },\n    legendCallback: function legendCallback(chart) {\n      var text = [];\n      text.push('<ul class=\"' + chart.id + '-legend\">');\n      var data = chart.data;\n      var datasets = data.datasets;\n      var labels = data.labels;\n\n      if (datasets.length) {\n        for (var i = 0; i < datasets[0].data.length; ++i) {\n          text.push('<li><span style=\"background-color:' + datasets[0].backgroundColor[i] + '\"></span>');\n\n          if (labels[i]) {\n            text.push(labels[i]);\n          }\n\n          text.push('</li>');\n        }\n      }\n\n      text.push('</ul>');\n      return text.join('');\n    },\n    legend: {\n      labels: {\n        generateLabels: function generateLabels(chart) {\n          var data = chart.data;\n\n          if (data.labels.length && data.datasets.length) {\n            return data.labels.map(function (label, i) {\n              var meta = chart.getDatasetMeta(0);\n              var ds = data.datasets[0];\n              var arc = meta.data[i];\n              var custom = arc && arc.custom || {};\n              var arcOpts = chart.options.elements.arc;\n              var fill = resolve$3([custom.backgroundColor, ds.backgroundColor, arcOpts.backgroundColor], undefined, i);\n              var stroke = resolve$3([custom.borderColor, ds.borderColor, arcOpts.borderColor], undefined, i);\n              var bw = resolve$3([custom.borderWidth, ds.borderWidth, arcOpts.borderWidth], undefined, i);\n              return {\n                text: label,\n                fillStyle: fill,\n                strokeStyle: stroke,\n                lineWidth: bw,\n                hidden: isNaN(ds.data[i]) || meta.data[i].hidden,\n                // Extra data used for toggling the correct item\n                index: i\n              };\n            });\n          }\n\n          return [];\n        }\n      },\n      onClick: function onClick(e, legendItem) {\n        var index = legendItem.index;\n        var chart = this.chart;\n        var i, ilen, meta;\n\n        for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n          meta = chart.getDatasetMeta(i); // toggle visibility of index if exists\n\n          if (meta.data[index]) {\n            meta.data[index].hidden = !meta.data[index].hidden;\n          }\n        }\n\n        chart.update();\n      }\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutoutPercentage: 50,\n    // The rotation of the chart, where the first data arc begins.\n    rotation: Math.PI * -0.5,\n    // The total circumference of the chart.\n    circumference: Math.PI * 2.0,\n    // Need to override these to give a nice default\n    tooltips: {\n      callbacks: {\n        title: function title() {\n          return '';\n        },\n        label: function label(tooltipItem, data) {\n          var dataLabel = data.labels[tooltipItem.index];\n          var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n\n          if (helpers$1.isArray(dataLabel)) {\n            // show value on first line of multiline label\n            // need to clone because we are changing the value\n            dataLabel = dataLabel.slice();\n            dataLabel[0] += value;\n          } else {\n            dataLabel += value;\n          }\n\n          return dataLabel;\n        }\n      }\n    }\n  });\n\n  var controller_doughnut = core_datasetController.extend({\n    dataElementType: elements.Arc,\n    linkScales: helpers$1.noop,\n    // Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly\n    getRingIndex: function getRingIndex(datasetIndex) {\n      var ringIndex = 0;\n\n      for (var j = 0; j < datasetIndex; ++j) {\n        if (this.chart.isDatasetVisible(j)) {\n          ++ringIndex;\n        }\n      }\n\n      return ringIndex;\n    },\n    update: function update(reset) {\n      var me = this;\n      var chart = me.chart;\n      var chartArea = chart.chartArea;\n      var opts = chart.options;\n      var availableWidth = chartArea.right - chartArea.left;\n      var availableHeight = chartArea.bottom - chartArea.top;\n      var minSize = Math.min(availableWidth, availableHeight);\n      var offset = {\n        x: 0,\n        y: 0\n      };\n      var meta = me.getMeta();\n      var arcs = meta.data;\n      var cutoutPercentage = opts.cutoutPercentage;\n      var circumference = opts.circumference;\n\n      var chartWeight = me._getRingWeight(me.index);\n\n      var i, ilen; // If the chart's circumference isn't a full circle, calculate minSize as a ratio of the width/height of the arc\n\n      if (circumference < Math.PI * 2.0) {\n        var startAngle = opts.rotation % (Math.PI * 2.0);\n        startAngle += Math.PI * 2.0 * (startAngle >= Math.PI ? -1 : startAngle < -Math.PI ? 1 : 0);\n        var endAngle = startAngle + circumference;\n        var start = {\n          x: Math.cos(startAngle),\n          y: Math.sin(startAngle)\n        };\n        var end = {\n          x: Math.cos(endAngle),\n          y: Math.sin(endAngle)\n        };\n        var contains0 = startAngle <= 0 && endAngle >= 0 || startAngle <= Math.PI * 2.0 && Math.PI * 2.0 <= endAngle;\n        var contains90 = startAngle <= Math.PI * 0.5 && Math.PI * 0.5 <= endAngle || startAngle <= Math.PI * 2.5 && Math.PI * 2.5 <= endAngle;\n        var contains180 = startAngle <= -Math.PI && -Math.PI <= endAngle || startAngle <= Math.PI && Math.PI <= endAngle;\n        var contains270 = startAngle <= -Math.PI * 0.5 && -Math.PI * 0.5 <= endAngle || startAngle <= Math.PI * 1.5 && Math.PI * 1.5 <= endAngle;\n        var cutout = cutoutPercentage / 100.0;\n        var min = {\n          x: contains180 ? -1 : Math.min(start.x * (start.x < 0 ? 1 : cutout), end.x * (end.x < 0 ? 1 : cutout)),\n          y: contains270 ? -1 : Math.min(start.y * (start.y < 0 ? 1 : cutout), end.y * (end.y < 0 ? 1 : cutout))\n        };\n        var max = {\n          x: contains0 ? 1 : Math.max(start.x * (start.x > 0 ? 1 : cutout), end.x * (end.x > 0 ? 1 : cutout)),\n          y: contains90 ? 1 : Math.max(start.y * (start.y > 0 ? 1 : cutout), end.y * (end.y > 0 ? 1 : cutout))\n        };\n        var size = {\n          width: (max.x - min.x) * 0.5,\n          height: (max.y - min.y) * 0.5\n        };\n        minSize = Math.min(availableWidth / size.width, availableHeight / size.height);\n        offset = {\n          x: (max.x + min.x) * -0.5,\n          y: (max.y + min.y) * -0.5\n        };\n      }\n\n      for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n        arcs[i]._options = me._resolveElementOptions(arcs[i], i);\n      }\n\n      chart.borderWidth = me.getMaxBorderWidth();\n      chart.outerRadius = Math.max((minSize - chart.borderWidth) / 2, 0);\n      chart.innerRadius = Math.max(cutoutPercentage ? chart.outerRadius / 100 * cutoutPercentage : 0, 0);\n      chart.radiusLength = (chart.outerRadius - chart.innerRadius) / (me._getVisibleDatasetWeightTotal() || 1);\n      chart.offsetX = offset.x * chart.outerRadius;\n      chart.offsetY = offset.y * chart.outerRadius;\n      meta.total = me.calculateTotal();\n      me.outerRadius = chart.outerRadius - chart.radiusLength * me._getRingWeightOffset(me.index);\n      me.innerRadius = Math.max(me.outerRadius - chart.radiusLength * chartWeight, 0);\n\n      for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n        me.updateElement(arcs[i], i, reset);\n      }\n    },\n    updateElement: function updateElement(arc, index, reset) {\n      var me = this;\n      var chart = me.chart;\n      var chartArea = chart.chartArea;\n      var opts = chart.options;\n      var animationOpts = opts.animation;\n      var centerX = (chartArea.left + chartArea.right) / 2;\n      var centerY = (chartArea.top + chartArea.bottom) / 2;\n      var startAngle = opts.rotation; // non reset case handled later\n\n      var endAngle = opts.rotation; // non reset case handled later\n\n      var dataset = me.getDataset();\n      var circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / (2.0 * Math.PI));\n      var innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;\n      var outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;\n      var options = arc._options || {};\n      helpers$1.extend(arc, {\n        // Utility\n        _datasetIndex: me.index,\n        _index: index,\n        // Desired view properties\n        _model: {\n          backgroundColor: options.backgroundColor,\n          borderColor: options.borderColor,\n          borderWidth: options.borderWidth,\n          borderAlign: options.borderAlign,\n          x: centerX + chart.offsetX,\n          y: centerY + chart.offsetY,\n          startAngle: startAngle,\n          endAngle: endAngle,\n          circumference: circumference,\n          outerRadius: outerRadius,\n          innerRadius: innerRadius,\n          label: helpers$1.valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])\n        }\n      });\n      var model = arc._model; // Set correct angles if not resetting\n\n      if (!reset || !animationOpts.animateRotate) {\n        if (index === 0) {\n          model.startAngle = opts.rotation;\n        } else {\n          model.startAngle = me.getMeta().data[index - 1]._model.endAngle;\n        }\n\n        model.endAngle = model.startAngle + model.circumference;\n      }\n\n      arc.pivot();\n    },\n    calculateTotal: function calculateTotal() {\n      var dataset = this.getDataset();\n      var meta = this.getMeta();\n      var total = 0;\n      var value;\n      helpers$1.each(meta.data, function (element, index) {\n        value = dataset.data[index];\n\n        if (!isNaN(value) && !element.hidden) {\n          total += Math.abs(value);\n        }\n      });\n      /* if (total === 0) {\n      \ttotal = NaN;\n      }*/\n\n      return total;\n    },\n    calculateCircumference: function calculateCircumference(value) {\n      var total = this.getMeta().total;\n\n      if (total > 0 && !isNaN(value)) {\n        return Math.PI * 2.0 * (Math.abs(value) / total);\n      }\n\n      return 0;\n    },\n    // gets the max border or hover width to properly scale pie charts\n    getMaxBorderWidth: function getMaxBorderWidth(arcs) {\n      var me = this;\n      var max = 0;\n      var chart = me.chart;\n      var i, ilen, meta, arc, controller, options, borderWidth, hoverWidth;\n\n      if (!arcs) {\n        // Find the outmost visible dataset\n        for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n          if (chart.isDatasetVisible(i)) {\n            meta = chart.getDatasetMeta(i);\n            arcs = meta.data;\n\n            if (i !== me.index) {\n              controller = meta.controller;\n            }\n\n            break;\n          }\n        }\n      }\n\n      if (!arcs) {\n        return 0;\n      }\n\n      for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n        arc = arcs[i];\n        options = controller ? controller._resolveElementOptions(arc, i) : arc._options;\n\n        if (options.borderAlign !== 'inner') {\n          borderWidth = options.borderWidth;\n          hoverWidth = options.hoverBorderWidth;\n          max = borderWidth > max ? borderWidth : max;\n          max = hoverWidth > max ? hoverWidth : max;\n        }\n      }\n\n      return max;\n    },\n\n    /**\n     * @protected\n     */\n    setHoverStyle: function setHoverStyle(arc) {\n      var model = arc._model;\n      var options = arc._options;\n      var getHoverColor = helpers$1.getHoverColor;\n      arc.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth\n      };\n      model.backgroundColor = valueOrDefault$4(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n      model.borderColor = valueOrDefault$4(options.hoverBorderColor, getHoverColor(options.borderColor));\n      model.borderWidth = valueOrDefault$4(options.hoverBorderWidth, options.borderWidth);\n    },\n\n    /**\n     * @private\n     */\n    _resolveElementOptions: function _resolveElementOptions(arc, index) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = me.getDataset();\n      var custom = arc.custom || {};\n      var options = chart.options.elements.arc;\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var keys = ['backgroundColor', 'borderColor', 'borderWidth', 'borderAlign', 'hoverBackgroundColor', 'hoverBorderColor', 'hoverBorderWidth'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$3([custom[key], dataset[key], options[key]], context, index);\n      }\n\n      return values;\n    },\n\n    /**\n     * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n     * @private\n     */\n    _getRingWeightOffset: function _getRingWeightOffset(datasetIndex) {\n      var ringWeightOffset = 0;\n\n      for (var i = 0; i < datasetIndex; ++i) {\n        if (this.chart.isDatasetVisible(i)) {\n          ringWeightOffset += this._getRingWeight(i);\n        }\n      }\n\n      return ringWeightOffset;\n    },\n\n    /**\n     * @private\n     */\n    _getRingWeight: function _getRingWeight(dataSetIndex) {\n      return Math.max(valueOrDefault$4(this.chart.data.datasets[dataSetIndex].weight, 1), 0);\n    },\n\n    /**\n     * Returns the sum of all visibile data set weights.  This value can be 0.\n     * @private\n     */\n    _getVisibleDatasetWeightTotal: function _getVisibleDatasetWeightTotal() {\n      return this._getRingWeightOffset(this.chart.data.datasets.length);\n    }\n  });\n\n  core_defaults._set('horizontalBar', {\n    hover: {\n      mode: 'index',\n      axis: 'y'\n    },\n    scales: {\n      xAxes: [{\n        type: 'linear',\n        position: 'bottom'\n      }],\n      yAxes: [{\n        type: 'category',\n        position: 'left',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        offset: true,\n        gridLines: {\n          offsetGridLines: true\n        }\n      }]\n    },\n    elements: {\n      rectangle: {\n        borderSkipped: 'left'\n      }\n    },\n    tooltips: {\n      mode: 'index',\n      axis: 'y'\n    }\n  });\n\n  var controller_horizontalBar = controller_bar.extend({\n    /**\n     * @private\n     */\n    _getValueScaleId: function _getValueScaleId() {\n      return this.getMeta().xAxisID;\n    },\n\n    /**\n     * @private\n     */\n    _getIndexScaleId: function _getIndexScaleId() {\n      return this.getMeta().yAxisID;\n    }\n  });\n  var valueOrDefault$5 = helpers$1.valueOrDefault;\n  var resolve$4 = helpers$1.options.resolve;\n  var isPointInArea = helpers$1.canvas._isPointInArea;\n\n  core_defaults._set('line', {\n    showLines: true,\n    spanGaps: false,\n    hover: {\n      mode: 'label'\n    },\n    scales: {\n      xAxes: [{\n        type: 'category',\n        id: 'x-axis-0'\n      }],\n      yAxes: [{\n        type: 'linear',\n        id: 'y-axis-0'\n      }]\n    }\n  });\n\n  function lineEnabled(dataset, options) {\n    return valueOrDefault$5(dataset.showLine, options.showLines);\n  }\n\n  var controller_line = core_datasetController.extend({\n    datasetElementType: elements.Line,\n    dataElementType: elements.Point,\n    update: function update(reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var line = meta.dataset;\n      var points = meta.data || [];\n      var scale = me.getScaleForId(meta.yAxisID);\n      var dataset = me.getDataset();\n      var showLine = lineEnabled(dataset, me.chart.options);\n      var i, ilen; // Update Line\n\n      if (showLine) {\n        // Compatibility: If the properties are defined with only the old name, use those values\n        if (dataset.tension !== undefined && dataset.lineTension === undefined) {\n          dataset.lineTension = dataset.tension;\n        } // Utility\n\n\n        line._scale = scale;\n        line._datasetIndex = me.index; // Data\n\n        line._children = points; // Model\n\n        line._model = me._resolveLineOptions(line);\n        line.pivot();\n      } // Update Points\n\n\n      for (i = 0, ilen = points.length; i < ilen; ++i) {\n        me.updateElement(points[i], i, reset);\n      }\n\n      if (showLine && line._model.tension !== 0) {\n        me.updateBezierControlPoints();\n      } // Now pivot the point for animation\n\n\n      for (i = 0, ilen = points.length; i < ilen; ++i) {\n        points[i].pivot();\n      }\n    },\n    updateElement: function updateElement(point, index, reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var custom = point.custom || {};\n      var dataset = me.getDataset();\n      var datasetIndex = me.index;\n      var value = dataset.data[index];\n      var yScale = me.getScaleForId(meta.yAxisID);\n      var xScale = me.getScaleForId(meta.xAxisID);\n      var lineModel = meta.dataset._model;\n      var x, y;\n\n      var options = me._resolvePointOptions(point, index);\n\n      x = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex);\n      y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex); // Utility\n\n      point._xScale = xScale;\n      point._yScale = yScale;\n      point._options = options;\n      point._datasetIndex = datasetIndex;\n      point._index = index; // Desired view properties\n\n      point._model = {\n        x: x,\n        y: y,\n        skip: custom.skip || isNaN(x) || isNaN(y),\n        // Appearance\n        radius: options.radius,\n        pointStyle: options.pointStyle,\n        rotation: options.rotation,\n        backgroundColor: options.backgroundColor,\n        borderColor: options.borderColor,\n        borderWidth: options.borderWidth,\n        tension: valueOrDefault$5(custom.tension, lineModel ? lineModel.tension : 0),\n        steppedLine: lineModel ? lineModel.steppedLine : false,\n        // Tooltip\n        hitRadius: options.hitRadius\n      };\n    },\n\n    /**\n     * @private\n     */\n    _resolvePointOptions: function _resolvePointOptions(element, index) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = chart.data.datasets[me.index];\n      var custom = element.custom || {};\n      var options = chart.options.elements.point;\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var ELEMENT_OPTIONS = {\n        backgroundColor: 'pointBackgroundColor',\n        borderColor: 'pointBorderColor',\n        borderWidth: 'pointBorderWidth',\n        hitRadius: 'pointHitRadius',\n        hoverBackgroundColor: 'pointHoverBackgroundColor',\n        hoverBorderColor: 'pointHoverBorderColor',\n        hoverBorderWidth: 'pointHoverBorderWidth',\n        hoverRadius: 'pointHoverRadius',\n        pointStyle: 'pointStyle',\n        radius: 'pointRadius',\n        rotation: 'pointRotation'\n      };\n      var keys = Object.keys(ELEMENT_OPTIONS);\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$4([custom[key], dataset[ELEMENT_OPTIONS[key]], dataset[key], options[key]], context, index);\n      }\n\n      return values;\n    },\n\n    /**\n     * @private\n     */\n    _resolveLineOptions: function _resolveLineOptions(element) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = chart.data.datasets[me.index];\n      var custom = element.custom || {};\n      var options = chart.options;\n      var elementOptions = options.elements.line;\n      var values = {};\n      var i, ilen, key;\n      var keys = ['backgroundColor', 'borderWidth', 'borderColor', 'borderCapStyle', 'borderDash', 'borderDashOffset', 'borderJoinStyle', 'fill', 'cubicInterpolationMode'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$4([custom[key], dataset[key], elementOptions[key]]);\n      } // The default behavior of lines is to break at null values, according\n      // to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158\n      // This option gives lines the ability to span gaps\n\n\n      values.spanGaps = valueOrDefault$5(dataset.spanGaps, options.spanGaps);\n      values.tension = valueOrDefault$5(dataset.lineTension, elementOptions.tension);\n      values.steppedLine = resolve$4([custom.steppedLine, dataset.steppedLine, elementOptions.stepped]);\n      return values;\n    },\n    calculatePointY: function calculatePointY(value, index, datasetIndex) {\n      var me = this;\n      var chart = me.chart;\n      var meta = me.getMeta();\n      var yScale = me.getScaleForId(meta.yAxisID);\n      var sumPos = 0;\n      var sumNeg = 0;\n      var i, ds, dsMeta;\n\n      if (yScale.options.stacked) {\n        for (i = 0; i < datasetIndex; i++) {\n          ds = chart.data.datasets[i];\n          dsMeta = chart.getDatasetMeta(i);\n\n          if (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i)) {\n            var stackedRightValue = Number(yScale.getRightValue(ds.data[index]));\n\n            if (stackedRightValue < 0) {\n              sumNeg += stackedRightValue || 0;\n            } else {\n              sumPos += stackedRightValue || 0;\n            }\n          }\n        }\n\n        var rightValue = Number(yScale.getRightValue(value));\n\n        if (rightValue < 0) {\n          return yScale.getPixelForValue(sumNeg + rightValue);\n        }\n\n        return yScale.getPixelForValue(sumPos + rightValue);\n      }\n\n      return yScale.getPixelForValue(value);\n    },\n    updateBezierControlPoints: function updateBezierControlPoints() {\n      var me = this;\n      var chart = me.chart;\n      var meta = me.getMeta();\n      var lineModel = meta.dataset._model;\n      var area = chart.chartArea;\n      var points = meta.data || [];\n      var i, ilen, model, controlPoints; // Only consider points that are drawn in case the spanGaps option is used\n\n      if (lineModel.spanGaps) {\n        points = points.filter(function (pt) {\n          return !pt._model.skip;\n        });\n      }\n\n      function capControlPoint(pt, min, max) {\n        return Math.max(Math.min(pt, max), min);\n      }\n\n      if (lineModel.cubicInterpolationMode === 'monotone') {\n        helpers$1.splineCurveMonotone(points);\n      } else {\n        for (i = 0, ilen = points.length; i < ilen; ++i) {\n          model = points[i]._model;\n          controlPoints = helpers$1.splineCurve(helpers$1.previousItem(points, i)._model, model, helpers$1.nextItem(points, i)._model, lineModel.tension);\n          model.controlPointPreviousX = controlPoints.previous.x;\n          model.controlPointPreviousY = controlPoints.previous.y;\n          model.controlPointNextX = controlPoints.next.x;\n          model.controlPointNextY = controlPoints.next.y;\n        }\n      }\n\n      if (chart.options.elements.line.capBezierPoints) {\n        for (i = 0, ilen = points.length; i < ilen; ++i) {\n          model = points[i]._model;\n\n          if (isPointInArea(model, area)) {\n            if (i > 0 && isPointInArea(points[i - 1]._model, area)) {\n              model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);\n              model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);\n            }\n\n            if (i < points.length - 1 && isPointInArea(points[i + 1]._model, area)) {\n              model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);\n              model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);\n            }\n          }\n        }\n      }\n    },\n    draw: function draw() {\n      var me = this;\n      var chart = me.chart;\n      var meta = me.getMeta();\n      var points = meta.data || [];\n      var area = chart.chartArea;\n      var ilen = points.length;\n      var halfBorderWidth;\n      var i = 0;\n\n      if (lineEnabled(me.getDataset(), chart.options)) {\n        halfBorderWidth = (meta.dataset._model.borderWidth || 0) / 2;\n        helpers$1.canvas.clipArea(chart.ctx, {\n          left: area.left,\n          right: area.right,\n          top: area.top - halfBorderWidth,\n          bottom: area.bottom + halfBorderWidth\n        });\n        meta.dataset.draw();\n        helpers$1.canvas.unclipArea(chart.ctx);\n      } // Draw the points\n\n\n      for (; i < ilen; ++i) {\n        points[i].draw(area);\n      }\n    },\n\n    /**\n     * @protected\n     */\n    setHoverStyle: function setHoverStyle(point) {\n      var model = point._model;\n      var options = point._options;\n      var getHoverColor = helpers$1.getHoverColor;\n      point.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth,\n        radius: model.radius\n      };\n      model.backgroundColor = valueOrDefault$5(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n      model.borderColor = valueOrDefault$5(options.hoverBorderColor, getHoverColor(options.borderColor));\n      model.borderWidth = valueOrDefault$5(options.hoverBorderWidth, options.borderWidth);\n      model.radius = valueOrDefault$5(options.hoverRadius, options.radius);\n    }\n  });\n  var resolve$5 = helpers$1.options.resolve;\n\n  core_defaults._set('polarArea', {\n    scale: {\n      type: 'radialLinear',\n      angleLines: {\n        display: false\n      },\n      gridLines: {\n        circular: true\n      },\n      pointLabels: {\n        display: false\n      },\n      ticks: {\n        beginAtZero: true\n      }\n    },\n    // Boolean - Whether to animate the rotation of the chart\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    startAngle: -0.5 * Math.PI,\n    legendCallback: function legendCallback(chart) {\n      var text = [];\n      text.push('<ul class=\"' + chart.id + '-legend\">');\n      var data = chart.data;\n      var datasets = data.datasets;\n      var labels = data.labels;\n\n      if (datasets.length) {\n        for (var i = 0; i < datasets[0].data.length; ++i) {\n          text.push('<li><span style=\"background-color:' + datasets[0].backgroundColor[i] + '\"></span>');\n\n          if (labels[i]) {\n            text.push(labels[i]);\n          }\n\n          text.push('</li>');\n        }\n      }\n\n      text.push('</ul>');\n      return text.join('');\n    },\n    legend: {\n      labels: {\n        generateLabels: function generateLabels(chart) {\n          var data = chart.data;\n\n          if (data.labels.length && data.datasets.length) {\n            return data.labels.map(function (label, i) {\n              var meta = chart.getDatasetMeta(0);\n              var ds = data.datasets[0];\n              var arc = meta.data[i];\n              var custom = arc.custom || {};\n              var arcOpts = chart.options.elements.arc;\n              var fill = resolve$5([custom.backgroundColor, ds.backgroundColor, arcOpts.backgroundColor], undefined, i);\n              var stroke = resolve$5([custom.borderColor, ds.borderColor, arcOpts.borderColor], undefined, i);\n              var bw = resolve$5([custom.borderWidth, ds.borderWidth, arcOpts.borderWidth], undefined, i);\n              return {\n                text: label,\n                fillStyle: fill,\n                strokeStyle: stroke,\n                lineWidth: bw,\n                hidden: isNaN(ds.data[i]) || meta.data[i].hidden,\n                // Extra data used for toggling the correct item\n                index: i\n              };\n            });\n          }\n\n          return [];\n        }\n      },\n      onClick: function onClick(e, legendItem) {\n        var index = legendItem.index;\n        var chart = this.chart;\n        var i, ilen, meta;\n\n        for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n          meta = chart.getDatasetMeta(i);\n          meta.data[index].hidden = !meta.data[index].hidden;\n        }\n\n        chart.update();\n      }\n    },\n    // Need to override these to give a nice default\n    tooltips: {\n      callbacks: {\n        title: function title() {\n          return '';\n        },\n        label: function label(item, data) {\n          return data.labels[item.index] + ': ' + item.yLabel;\n        }\n      }\n    }\n  });\n\n  var controller_polarArea = core_datasetController.extend({\n    dataElementType: elements.Arc,\n    linkScales: helpers$1.noop,\n    update: function update(reset) {\n      var me = this;\n      var dataset = me.getDataset();\n      var meta = me.getMeta();\n      var start = me.chart.options.startAngle || 0;\n      var starts = me._starts = [];\n      var angles = me._angles = [];\n      var arcs = meta.data;\n      var i, ilen, angle;\n\n      me._updateRadius();\n\n      meta.count = me.countVisibleElements();\n\n      for (i = 0, ilen = dataset.data.length; i < ilen; i++) {\n        starts[i] = start;\n        angle = me._computeAngle(i);\n        angles[i] = angle;\n        start += angle;\n      }\n\n      for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n        arcs[i]._options = me._resolveElementOptions(arcs[i], i);\n        me.updateElement(arcs[i], i, reset);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _updateRadius: function _updateRadius() {\n      var me = this;\n      var chart = me.chart;\n      var chartArea = chart.chartArea;\n      var opts = chart.options;\n      var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n      chart.outerRadius = Math.max(minSize / 2, 0);\n      chart.innerRadius = Math.max(opts.cutoutPercentage ? chart.outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n      chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();\n      me.outerRadius = chart.outerRadius - chart.radiusLength * me.index;\n      me.innerRadius = me.outerRadius - chart.radiusLength;\n    },\n    updateElement: function updateElement(arc, index, reset) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = me.getDataset();\n      var opts = chart.options;\n      var animationOpts = opts.animation;\n      var scale = chart.scale;\n      var labels = chart.data.labels;\n      var centerX = scale.xCenter;\n      var centerY = scale.yCenter; // var negHalfPI = -0.5 * Math.PI;\n\n      var datasetStartAngle = opts.startAngle;\n      var distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);\n      var startAngle = me._starts[index];\n      var endAngle = startAngle + (arc.hidden ? 0 : me._angles[index]);\n      var resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);\n      var options = arc._options || {};\n      helpers$1.extend(arc, {\n        // Utility\n        _datasetIndex: me.index,\n        _index: index,\n        _scale: scale,\n        // Desired view properties\n        _model: {\n          backgroundColor: options.backgroundColor,\n          borderColor: options.borderColor,\n          borderWidth: options.borderWidth,\n          borderAlign: options.borderAlign,\n          x: centerX,\n          y: centerY,\n          innerRadius: 0,\n          outerRadius: reset ? resetRadius : distance,\n          startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,\n          endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,\n          label: helpers$1.valueAtIndexOrDefault(labels, index, labels[index])\n        }\n      });\n      arc.pivot();\n    },\n    countVisibleElements: function countVisibleElements() {\n      var dataset = this.getDataset();\n      var meta = this.getMeta();\n      var count = 0;\n      helpers$1.each(meta.data, function (element, index) {\n        if (!isNaN(dataset.data[index]) && !element.hidden) {\n          count++;\n        }\n      });\n      return count;\n    },\n\n    /**\n     * @protected\n     */\n    setHoverStyle: function setHoverStyle(arc) {\n      var model = arc._model;\n      var options = arc._options;\n      var getHoverColor = helpers$1.getHoverColor;\n      var valueOrDefault = helpers$1.valueOrDefault;\n      arc.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth\n      };\n      model.backgroundColor = valueOrDefault(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n      model.borderColor = valueOrDefault(options.hoverBorderColor, getHoverColor(options.borderColor));\n      model.borderWidth = valueOrDefault(options.hoverBorderWidth, options.borderWidth);\n    },\n\n    /**\n     * @private\n     */\n    _resolveElementOptions: function _resolveElementOptions(arc, index) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = me.getDataset();\n      var custom = arc.custom || {};\n      var options = chart.options.elements.arc;\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var keys = ['backgroundColor', 'borderColor', 'borderWidth', 'borderAlign', 'hoverBackgroundColor', 'hoverBorderColor', 'hoverBorderWidth'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$5([custom[key], dataset[key], options[key]], context, index);\n      }\n\n      return values;\n    },\n\n    /**\n     * @private\n     */\n    _computeAngle: function _computeAngle(index) {\n      var me = this;\n      var count = this.getMeta().count;\n      var dataset = me.getDataset();\n      var meta = me.getMeta();\n\n      if (isNaN(dataset.data[index]) || meta.data[index].hidden) {\n        return 0;\n      } // Scriptable options\n\n\n      var context = {\n        chart: me.chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      return resolve$5([me.chart.options.elements.arc.angle, 2 * Math.PI / count], context, index);\n    }\n  });\n\n  core_defaults._set('pie', helpers$1.clone(core_defaults.doughnut));\n\n  core_defaults._set('pie', {\n    cutoutPercentage: 0\n  }); // Pie charts are Doughnut chart with different defaults\n\n\n  var controller_pie = controller_doughnut;\n  var valueOrDefault$6 = helpers$1.valueOrDefault;\n  var resolve$6 = helpers$1.options.resolve;\n\n  core_defaults._set('radar', {\n    scale: {\n      type: 'radialLinear'\n    },\n    elements: {\n      line: {\n        tension: 0 // no bezier in radar\n\n      }\n    }\n  });\n\n  var controller_radar = core_datasetController.extend({\n    datasetElementType: elements.Line,\n    dataElementType: elements.Point,\n    linkScales: helpers$1.noop,\n    update: function update(reset) {\n      var me = this;\n      var meta = me.getMeta();\n      var line = meta.dataset;\n      var points = meta.data || [];\n      var scale = me.chart.scale;\n      var dataset = me.getDataset();\n      var i, ilen; // Compatibility: If the properties are defined with only the old name, use those values\n\n      if (dataset.tension !== undefined && dataset.lineTension === undefined) {\n        dataset.lineTension = dataset.tension;\n      } // Utility\n\n\n      line._scale = scale;\n      line._datasetIndex = me.index; // Data\n\n      line._children = points;\n      line._loop = true; // Model\n\n      line._model = me._resolveLineOptions(line);\n      line.pivot(); // Update Points\n\n      for (i = 0, ilen = points.length; i < ilen; ++i) {\n        me.updateElement(points[i], i, reset);\n      } // Update bezier control points\n\n\n      me.updateBezierControlPoints(); // Now pivot the point for animation\n\n      for (i = 0, ilen = points.length; i < ilen; ++i) {\n        points[i].pivot();\n      }\n    },\n    updateElement: function updateElement(point, index, reset) {\n      var me = this;\n      var custom = point.custom || {};\n      var dataset = me.getDataset();\n      var scale = me.chart.scale;\n      var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);\n\n      var options = me._resolvePointOptions(point, index);\n\n      var lineModel = me.getMeta().dataset._model;\n\n      var x = reset ? scale.xCenter : pointPosition.x;\n      var y = reset ? scale.yCenter : pointPosition.y; // Utility\n\n      point._scale = scale;\n      point._options = options;\n      point._datasetIndex = me.index;\n      point._index = index; // Desired view properties\n\n      point._model = {\n        x: x,\n        // value not used in dataset scale, but we want a consistent API between scales\n        y: y,\n        skip: custom.skip || isNaN(x) || isNaN(y),\n        // Appearance\n        radius: options.radius,\n        pointStyle: options.pointStyle,\n        rotation: options.rotation,\n        backgroundColor: options.backgroundColor,\n        borderColor: options.borderColor,\n        borderWidth: options.borderWidth,\n        tension: valueOrDefault$6(custom.tension, lineModel ? lineModel.tension : 0),\n        // Tooltip\n        hitRadius: options.hitRadius\n      };\n    },\n\n    /**\n     * @private\n     */\n    _resolvePointOptions: function _resolvePointOptions(element, index) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = chart.data.datasets[me.index];\n      var custom = element.custom || {};\n      var options = chart.options.elements.point;\n      var values = {};\n      var i, ilen, key; // Scriptable options\n\n      var context = {\n        chart: chart,\n        dataIndex: index,\n        dataset: dataset,\n        datasetIndex: me.index\n      };\n      var ELEMENT_OPTIONS = {\n        backgroundColor: 'pointBackgroundColor',\n        borderColor: 'pointBorderColor',\n        borderWidth: 'pointBorderWidth',\n        hitRadius: 'pointHitRadius',\n        hoverBackgroundColor: 'pointHoverBackgroundColor',\n        hoverBorderColor: 'pointHoverBorderColor',\n        hoverBorderWidth: 'pointHoverBorderWidth',\n        hoverRadius: 'pointHoverRadius',\n        pointStyle: 'pointStyle',\n        radius: 'pointRadius',\n        rotation: 'pointRotation'\n      };\n      var keys = Object.keys(ELEMENT_OPTIONS);\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$6([custom[key], dataset[ELEMENT_OPTIONS[key]], dataset[key], options[key]], context, index);\n      }\n\n      return values;\n    },\n\n    /**\n     * @private\n     */\n    _resolveLineOptions: function _resolveLineOptions(element) {\n      var me = this;\n      var chart = me.chart;\n      var dataset = chart.data.datasets[me.index];\n      var custom = element.custom || {};\n      var options = chart.options.elements.line;\n      var values = {};\n      var i, ilen, key;\n      var keys = ['backgroundColor', 'borderWidth', 'borderColor', 'borderCapStyle', 'borderDash', 'borderDashOffset', 'borderJoinStyle', 'fill'];\n\n      for (i = 0, ilen = keys.length; i < ilen; ++i) {\n        key = keys[i];\n        values[key] = resolve$6([custom[key], dataset[key], options[key]]);\n      }\n\n      values.tension = valueOrDefault$6(dataset.lineTension, options.tension);\n      return values;\n    },\n    updateBezierControlPoints: function updateBezierControlPoints() {\n      var me = this;\n      var meta = me.getMeta();\n      var area = me.chart.chartArea;\n      var points = meta.data || [];\n      var i, ilen, model, controlPoints;\n\n      function capControlPoint(pt, min, max) {\n        return Math.max(Math.min(pt, max), min);\n      }\n\n      for (i = 0, ilen = points.length; i < ilen; ++i) {\n        model = points[i]._model;\n        controlPoints = helpers$1.splineCurve(helpers$1.previousItem(points, i, true)._model, model, helpers$1.nextItem(points, i, true)._model, model.tension); // Prevent the bezier going outside of the bounds of the graph\n\n        model.controlPointPreviousX = capControlPoint(controlPoints.previous.x, area.left, area.right);\n        model.controlPointPreviousY = capControlPoint(controlPoints.previous.y, area.top, area.bottom);\n        model.controlPointNextX = capControlPoint(controlPoints.next.x, area.left, area.right);\n        model.controlPointNextY = capControlPoint(controlPoints.next.y, area.top, area.bottom);\n      }\n    },\n    setHoverStyle: function setHoverStyle(point) {\n      var model = point._model;\n      var options = point._options;\n      var getHoverColor = helpers$1.getHoverColor;\n      point.$previousStyle = {\n        backgroundColor: model.backgroundColor,\n        borderColor: model.borderColor,\n        borderWidth: model.borderWidth,\n        radius: model.radius\n      };\n      model.backgroundColor = valueOrDefault$6(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n      model.borderColor = valueOrDefault$6(options.hoverBorderColor, getHoverColor(options.borderColor));\n      model.borderWidth = valueOrDefault$6(options.hoverBorderWidth, options.borderWidth);\n      model.radius = valueOrDefault$6(options.hoverRadius, options.radius);\n    }\n  });\n\n  core_defaults._set('scatter', {\n    hover: {\n      mode: 'single'\n    },\n    scales: {\n      xAxes: [{\n        id: 'x-axis-1',\n        // need an ID so datasets can reference the scale\n        type: 'linear',\n        // scatter should not use a category axis\n        position: 'bottom'\n      }],\n      yAxes: [{\n        id: 'y-axis-1',\n        type: 'linear',\n        position: 'left'\n      }]\n    },\n    showLines: false,\n    tooltips: {\n      callbacks: {\n        title: function title() {\n          return ''; // doesn't make sense for scatter since data are formatted as a point\n        },\n        label: function label(item) {\n          return '(' + item.xLabel + ', ' + item.yLabel + ')';\n        }\n      }\n    }\n  }); // Scatter charts use line controllers\n\n\n  var controller_scatter = controller_line; // NOTE export a map in which the key represents the controller type, not\n  // the class, and so must be CamelCase in order to be correctly retrieved\n  // by the controller in core.controller.js (`controllers[meta.type]`).\n\n  var controllers = {\n    bar: controller_bar,\n    bubble: controller_bubble,\n    doughnut: controller_doughnut,\n    horizontalBar: controller_horizontalBar,\n    line: controller_line,\n    polarArea: controller_polarArea,\n    pie: controller_pie,\n    radar: controller_radar,\n    scatter: controller_scatter\n  };\n  /**\n   * Helper function to get relative position for an event\n   * @param {Event|IEvent} event - The event to get the position for\n   * @param {Chart} chart - The chart\n   * @returns {object} the event position\n   */\n\n  function getRelativePosition(e, chart) {\n    if (e.native) {\n      return {\n        x: e.x,\n        y: e.y\n      };\n    }\n\n    return helpers$1.getRelativePosition(e, chart);\n  }\n  /**\n   * Helper function to traverse all of the visible elements in the chart\n   * @param {Chart} chart - the chart\n   * @param {function} handler - the callback to execute for each visible item\n   */\n\n\n  function parseVisibleItems(chart, handler) {\n    var datasets = chart.data.datasets;\n    var meta, i, j, ilen, jlen;\n\n    for (i = 0, ilen = datasets.length; i < ilen; ++i) {\n      if (!chart.isDatasetVisible(i)) {\n        continue;\n      }\n\n      meta = chart.getDatasetMeta(i);\n\n      for (j = 0, jlen = meta.data.length; j < jlen; ++j) {\n        var element = meta.data[j];\n\n        if (!element._view.skip) {\n          handler(element);\n        }\n      }\n    }\n  }\n  /**\n   * Helper function to get the items that intersect the event position\n   * @param {ChartElement[]} items - elements to filter\n   * @param {object} position - the point to be nearest to\n   * @return {ChartElement[]} the nearest items\n   */\n\n\n  function getIntersectItems(chart, position) {\n    var elements = [];\n    parseVisibleItems(chart, function (element) {\n      if (element.inRange(position.x, position.y)) {\n        elements.push(element);\n      }\n    });\n    return elements;\n  }\n  /**\n   * Helper function to get the items nearest to the event position considering all visible items in teh chart\n   * @param {Chart} chart - the chart to look at elements from\n   * @param {object} position - the point to be nearest to\n   * @param {boolean} intersect - if true, only consider items that intersect the position\n   * @param {function} distanceMetric - function to provide the distance between points\n   * @return {ChartElement[]} the nearest items\n   */\n\n\n  function getNearestItems(chart, position, intersect, distanceMetric) {\n    var minDistance = Number.POSITIVE_INFINITY;\n    var nearestItems = [];\n    parseVisibleItems(chart, function (element) {\n      if (intersect && !element.inRange(position.x, position.y)) {\n        return;\n      }\n\n      var center = element.getCenterPoint();\n      var distance = distanceMetric(position, center);\n\n      if (distance < minDistance) {\n        nearestItems = [element];\n        minDistance = distance;\n      } else if (distance === minDistance) {\n        // Can have multiple items at the same distance in which case we sort by size\n        nearestItems.push(element);\n      }\n    });\n    return nearestItems;\n  }\n  /**\n   * Get a distance metric function for two points based on the\n   * axis mode setting\n   * @param {string} axis - the axis mode. x|y|xy\n   */\n\n\n  function getDistanceMetricForAxis(axis) {\n    var useX = axis.indexOf('x') !== -1;\n    var useY = axis.indexOf('y') !== -1;\n    return function (pt1, pt2) {\n      var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n      var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n      return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n  }\n\n  function indexMode(chart, e, options) {\n    var position = getRelativePosition(e, chart); // Default axis for index mode is 'x' to match old behaviour\n\n    options.axis = options.axis || 'x';\n    var distanceMetric = getDistanceMetricForAxis(options.axis);\n    var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);\n    var elements = [];\n\n    if (!items.length) {\n      return [];\n    }\n\n    chart.data.datasets.forEach(function (dataset, datasetIndex) {\n      if (chart.isDatasetVisible(datasetIndex)) {\n        var meta = chart.getDatasetMeta(datasetIndex);\n        var element = meta.data[items[0]._index]; // don't count items that are skipped (null data)\n\n        if (element && !element._view.skip) {\n          elements.push(element);\n        }\n      }\n    });\n    return elements;\n  }\n  /**\n   * @interface IInteractionOptions\n   */\n\n  /**\n   * If true, only consider items that intersect the point\n   * @name IInterfaceOptions#boolean\n   * @type Boolean\n   */\n\n  /**\n   * Contains interaction related functions\n   * @namespace Chart.Interaction\n   */\n\n\n  var core_interaction = {\n    // Helper function for different modes\n    modes: {\n      single: function single(chart, e) {\n        var position = getRelativePosition(e, chart);\n        var elements = [];\n        parseVisibleItems(chart, function (element) {\n          if (element.inRange(position.x, position.y)) {\n            elements.push(element);\n            return elements;\n          }\n        });\n        return elements.slice(0, 1);\n      },\n\n      /**\n       * @function Chart.Interaction.modes.label\n       * @deprecated since version 2.4.0\n       * @todo remove at version 3\n       * @private\n       */\n      label: indexMode,\n\n      /**\n       * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n       * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n       * @function Chart.Interaction.modes.index\n       * @since v2.4.0\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @param {IInteractionOptions} options - options to use during interaction\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      index: indexMode,\n\n      /**\n       * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n       * If the options.intersect is false, we find the nearest item and return the items in that dataset\n       * @function Chart.Interaction.modes.dataset\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @param {IInteractionOptions} options - options to use during interaction\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      dataset: function dataset(chart, e, options) {\n        var position = getRelativePosition(e, chart);\n        options.axis = options.axis || 'xy';\n        var distanceMetric = getDistanceMetricForAxis(options.axis);\n        var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);\n\n        if (items.length > 0) {\n          items = chart.getDatasetMeta(items[0]._datasetIndex).data;\n        }\n\n        return items;\n      },\n\n      /**\n       * @function Chart.Interaction.modes.x-axis\n       * @deprecated since version 2.4.0. Use index mode and intersect == true\n       * @todo remove at version 3\n       * @private\n       */\n      'x-axis': function xAxis(chart, e) {\n        return indexMode(chart, e, {\n          intersect: false\n        });\n      },\n\n      /**\n       * Point mode returns all elements that hit test based on the event position\n       * of the event\n       * @function Chart.Interaction.modes.intersect\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      point: function point(chart, e) {\n        var position = getRelativePosition(e, chart);\n        return getIntersectItems(chart, position);\n      },\n\n      /**\n       * nearest mode returns the element closest to the point\n       * @function Chart.Interaction.modes.intersect\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @param {IInteractionOptions} options - options to use\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      nearest: function nearest(chart, e, options) {\n        var position = getRelativePosition(e, chart);\n        options.axis = options.axis || 'xy';\n        var distanceMetric = getDistanceMetricForAxis(options.axis);\n        return getNearestItems(chart, position, options.intersect, distanceMetric);\n      },\n\n      /**\n       * x mode returns the elements that hit-test at the current x coordinate\n       * @function Chart.Interaction.modes.x\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @param {IInteractionOptions} options - options to use\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      x: function x(chart, e, options) {\n        var position = getRelativePosition(e, chart);\n        var items = [];\n        var intersectsItem = false;\n        parseVisibleItems(chart, function (element) {\n          if (element.inXRange(position.x)) {\n            items.push(element);\n          }\n\n          if (element.inRange(position.x, position.y)) {\n            intersectsItem = true;\n          }\n        }); // If we want to trigger on an intersect and we don't have any items\n        // that intersect the position, return nothing\n\n        if (options.intersect && !intersectsItem) {\n          items = [];\n        }\n\n        return items;\n      },\n\n      /**\n       * y mode returns the elements that hit-test at the current y coordinate\n       * @function Chart.Interaction.modes.y\n       * @param {Chart} chart - the chart we are returning items from\n       * @param {Event} e - the event we are find things at\n       * @param {IInteractionOptions} options - options to use\n       * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n       */\n      y: function y(chart, e, options) {\n        var position = getRelativePosition(e, chart);\n        var items = [];\n        var intersectsItem = false;\n        parseVisibleItems(chart, function (element) {\n          if (element.inYRange(position.y)) {\n            items.push(element);\n          }\n\n          if (element.inRange(position.x, position.y)) {\n            intersectsItem = true;\n          }\n        }); // If we want to trigger on an intersect and we don't have any items\n        // that intersect the position, return nothing\n\n        if (options.intersect && !intersectsItem) {\n          items = [];\n        }\n\n        return items;\n      }\n    }\n  };\n\n  function filterByPosition(array, position) {\n    return helpers$1.where(array, function (v) {\n      return v.position === position;\n    });\n  }\n\n  function sortByWeight(array, reverse) {\n    array.forEach(function (v, i) {\n      v._tmpIndex_ = i;\n      return v;\n    });\n    array.sort(function (a, b) {\n      var v0 = reverse ? b : a;\n      var v1 = reverse ? a : b;\n      return v0.weight === v1.weight ? v0._tmpIndex_ - v1._tmpIndex_ : v0.weight - v1.weight;\n    });\n    array.forEach(function (v) {\n      delete v._tmpIndex_;\n    });\n  }\n\n  function findMaxPadding(boxes) {\n    var top = 0;\n    var left = 0;\n    var bottom = 0;\n    var right = 0;\n    helpers$1.each(boxes, function (box) {\n      if (box.getPadding) {\n        var boxPadding = box.getPadding();\n        top = Math.max(top, boxPadding.top);\n        left = Math.max(left, boxPadding.left);\n        bottom = Math.max(bottom, boxPadding.bottom);\n        right = Math.max(right, boxPadding.right);\n      }\n    });\n    return {\n      top: top,\n      left: left,\n      bottom: bottom,\n      right: right\n    };\n  }\n\n  function addSizeByPosition(boxes, size) {\n    helpers$1.each(boxes, function (box) {\n      size[box.position] += box.isHorizontal() ? box.height : box.width;\n    });\n  }\n\n  core_defaults._set('global', {\n    layout: {\n      padding: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      }\n    }\n  });\n  /**\n   * @interface ILayoutItem\n   * @prop {string} position - The position of the item in the chart layout. Possible values are\n   * 'left', 'top', 'right', 'bottom', and 'chartArea'\n   * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n   * @prop {boolean} fullWidth - if true, and the item is horizontal, then push vertical boxes down\n   * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n   * @prop {function} update - Takes two parameters: width and height. Returns size of item\n   * @prop {function} getPadding -  Returns an object with padding on the edges\n   * @prop {number} width - Width of item. Must be valid after update()\n   * @prop {number} height - Height of item. Must be valid after update()\n   * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n   * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n   * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n   * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n   */\n  // The layout service is very self explanatory.  It's responsible for the layout within a chart.\n  // Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n  // It is this service's responsibility of carrying out that layout.\n\n\n  var core_layouts = {\n    defaults: {},\n\n    /**\n     * Register a box to a chart.\n     * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n     * @param {Chart} chart - the chart to use\n     * @param {ILayoutItem} item - the item to add to be layed out\n     */\n    addBox: function addBox(chart, item) {\n      if (!chart.boxes) {\n        chart.boxes = [];\n      } // initialize item with default values\n\n\n      item.fullWidth = item.fullWidth || false;\n      item.position = item.position || 'top';\n      item.weight = item.weight || 0;\n      chart.boxes.push(item);\n    },\n\n    /**\n     * Remove a layoutItem from a chart\n     * @param {Chart} chart - the chart to remove the box from\n     * @param {ILayoutItem} layoutItem - the item to remove from the layout\n     */\n    removeBox: function removeBox(chart, layoutItem) {\n      var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n\n      if (index !== -1) {\n        chart.boxes.splice(index, 1);\n      }\n    },\n\n    /**\n     * Sets (or updates) options on the given `item`.\n     * @param {Chart} chart - the chart in which the item lives (or will be added to)\n     * @param {ILayoutItem} item - the item to configure with the given options\n     * @param {object} options - the new item options.\n     */\n    configure: function configure(chart, item, options) {\n      var props = ['fullWidth', 'position', 'weight'];\n      var ilen = props.length;\n      var i = 0;\n      var prop;\n\n      for (; i < ilen; ++i) {\n        prop = props[i];\n\n        if (options.hasOwnProperty(prop)) {\n          item[prop] = options[prop];\n        }\n      }\n    },\n\n    /**\n     * Fits boxes of the given chart into the given size by having each box measure itself\n     * then running a fitting algorithm\n     * @param {Chart} chart - the chart\n     * @param {number} width - the width to fit into\n     * @param {number} height - the height to fit into\n     */\n    update: function update(chart, width, height) {\n      if (!chart) {\n        return;\n      }\n\n      var layoutOptions = chart.options.layout || {};\n      var padding = helpers$1.options.toPadding(layoutOptions.padding);\n      var leftPadding = padding.left;\n      var rightPadding = padding.right;\n      var topPadding = padding.top;\n      var bottomPadding = padding.bottom;\n      var leftBoxes = filterByPosition(chart.boxes, 'left');\n      var rightBoxes = filterByPosition(chart.boxes, 'right');\n      var topBoxes = filterByPosition(chart.boxes, 'top');\n      var bottomBoxes = filterByPosition(chart.boxes, 'bottom');\n      var chartAreaBoxes = filterByPosition(chart.boxes, 'chartArea'); // Sort boxes by weight. A higher weight is further away from the chart area\n\n      sortByWeight(leftBoxes, true);\n      sortByWeight(rightBoxes, false);\n      sortByWeight(topBoxes, true);\n      sortByWeight(bottomBoxes, false);\n      var verticalBoxes = leftBoxes.concat(rightBoxes);\n      var horizontalBoxes = topBoxes.concat(bottomBoxes);\n      var outerBoxes = verticalBoxes.concat(horizontalBoxes); // Essentially we now have any number of boxes on each of the 4 sides.\n      // Our canvas looks like the following.\n      // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n      // B1 is the bottom axis\n      // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n      // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n      // an error will be thrown.\n      //\n      // |----------------------------------------------------|\n      // |                  T1 (Full Width)                   |\n      // |----------------------------------------------------|\n      // |    |    |                 T2                  |    |\n      // |    |----|-------------------------------------|----|\n      // |    |    | C1 |                           | C2 |    |\n      // |    |    |----|                           |----|    |\n      // |    |    |                                     |    |\n      // | L1 | L2 |           ChartArea (C0)            | R1 |\n      // |    |    |                                     |    |\n      // |    |    |----|                           |----|    |\n      // |    |    | C3 |                           | C4 |    |\n      // |    |----|-------------------------------------|----|\n      // |    |    |                 B1                  |    |\n      // |----------------------------------------------------|\n      // |                  B2 (Full Width)                   |\n      // |----------------------------------------------------|\n      //\n      // What we do to find the best sizing, we do the following\n      // 1. Determine the minimum size of the chart area.\n      // 2. Split the remaining width equally between each vertical axis\n      // 3. Split the remaining height equally between each horizontal axis\n      // 4. Give each layout the maximum size it can be. The layout will return it's minimum size\n      // 5. Adjust the sizes of each axis based on it's minimum reported size.\n      // 6. Refit each axis\n      // 7. Position each axis in the final location\n      // 8. Tell the chart the final location of the chart area\n      // 9. Tell any axes that overlay the chart area the positions of the chart area\n      // Step 1\n\n      var chartWidth = width - leftPadding - rightPadding;\n      var chartHeight = height - topPadding - bottomPadding;\n      var chartAreaWidth = chartWidth / 2; // min 50%\n      // Step 2\n\n      var verticalBoxWidth = (width - chartAreaWidth) / verticalBoxes.length; // Step 3\n      // TODO re-limit horizontal axis height (this limit has affected only padding calculation since PR 1837)\n      // var horizontalBoxHeight = (height - chartAreaHeight) / horizontalBoxes.length;\n      // Step 4\n\n      var maxChartAreaWidth = chartWidth;\n      var maxChartAreaHeight = chartHeight;\n      var outerBoxSizes = {\n        top: topPadding,\n        left: leftPadding,\n        bottom: bottomPadding,\n        right: rightPadding\n      };\n      var minBoxSizes = [];\n      var maxPadding;\n\n      function getMinimumBoxSize(box) {\n        var minSize;\n        var isHorizontal = box.isHorizontal();\n\n        if (isHorizontal) {\n          minSize = box.update(box.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2);\n          maxChartAreaHeight -= minSize.height;\n        } else {\n          minSize = box.update(verticalBoxWidth, maxChartAreaHeight);\n          maxChartAreaWidth -= minSize.width;\n        }\n\n        minBoxSizes.push({\n          horizontal: isHorizontal,\n          width: minSize.width,\n          box: box\n        });\n      }\n\n      helpers$1.each(outerBoxes, getMinimumBoxSize); // If a horizontal box has padding, we move the left boxes over to avoid ugly charts (see issue #2478)\n\n      maxPadding = findMaxPadding(outerBoxes); // At this point, maxChartAreaHeight and maxChartAreaWidth are the size the chart area could\n      // be if the axes are drawn at their minimum sizes.\n      // Steps 5 & 6\n      // Function to fit a box\n\n      function fitBox(box) {\n        var minBoxSize = helpers$1.findNextWhere(minBoxSizes, function (minBox) {\n          return minBox.box === box;\n        });\n\n        if (minBoxSize) {\n          if (minBoxSize.horizontal) {\n            var scaleMargin = {\n              left: Math.max(outerBoxSizes.left, maxPadding.left),\n              right: Math.max(outerBoxSizes.right, maxPadding.right),\n              top: 0,\n              bottom: 0\n            }; // Don't use min size here because of label rotation. When the labels are rotated, their rotation highly depends\n            // on the margin. Sometimes they need to increase in size slightly\n\n            box.update(box.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2, scaleMargin);\n          } else {\n            box.update(minBoxSize.width, maxChartAreaHeight);\n          }\n        }\n      } // Update, and calculate the left and right margins for the horizontal boxes\n\n\n      helpers$1.each(verticalBoxes, fitBox);\n      addSizeByPosition(verticalBoxes, outerBoxSizes); // Set the Left and Right margins for the horizontal boxes\n\n      helpers$1.each(horizontalBoxes, fitBox);\n      addSizeByPosition(horizontalBoxes, outerBoxSizes);\n\n      function finalFitVerticalBox(box) {\n        var minBoxSize = helpers$1.findNextWhere(minBoxSizes, function (minSize) {\n          return minSize.box === box;\n        });\n        var scaleMargin = {\n          left: 0,\n          right: 0,\n          top: outerBoxSizes.top,\n          bottom: outerBoxSizes.bottom\n        };\n\n        if (minBoxSize) {\n          box.update(minBoxSize.width, maxChartAreaHeight, scaleMargin);\n        }\n      } // Let the left layout know the final margin\n\n\n      helpers$1.each(verticalBoxes, finalFitVerticalBox); // Recalculate because the size of each layout might have changed slightly due to the margins (label rotation for instance)\n\n      outerBoxSizes = {\n        top: topPadding,\n        left: leftPadding,\n        bottom: bottomPadding,\n        right: rightPadding\n      };\n      addSizeByPosition(outerBoxes, outerBoxSizes); // We may be adding some padding to account for rotated x axis labels\n\n      var leftPaddingAddition = Math.max(maxPadding.left - outerBoxSizes.left, 0);\n      outerBoxSizes.left += leftPaddingAddition;\n      outerBoxSizes.right += Math.max(maxPadding.right - outerBoxSizes.right, 0);\n      var topPaddingAddition = Math.max(maxPadding.top - outerBoxSizes.top, 0);\n      outerBoxSizes.top += topPaddingAddition;\n      outerBoxSizes.bottom += Math.max(maxPadding.bottom - outerBoxSizes.bottom, 0); // Figure out if our chart area changed. This would occur if the dataset layout label rotation\n      // changed due to the application of the margins in step 6. Since we can only get bigger, this is safe to do\n      // without calling `fit` again\n\n      var newMaxChartAreaHeight = height - outerBoxSizes.top - outerBoxSizes.bottom;\n      var newMaxChartAreaWidth = width - outerBoxSizes.left - outerBoxSizes.right;\n\n      if (newMaxChartAreaWidth !== maxChartAreaWidth || newMaxChartAreaHeight !== maxChartAreaHeight) {\n        helpers$1.each(verticalBoxes, function (box) {\n          box.height = newMaxChartAreaHeight;\n        });\n        helpers$1.each(horizontalBoxes, function (box) {\n          if (!box.fullWidth) {\n            box.width = newMaxChartAreaWidth;\n          }\n        });\n        maxChartAreaHeight = newMaxChartAreaHeight;\n        maxChartAreaWidth = newMaxChartAreaWidth;\n      } // Step 7 - Position the boxes\n\n\n      var left = leftPadding + leftPaddingAddition;\n      var top = topPadding + topPaddingAddition;\n\n      function placeBox(box) {\n        if (box.isHorizontal()) {\n          box.left = box.fullWidth ? leftPadding : outerBoxSizes.left;\n          box.right = box.fullWidth ? width - rightPadding : outerBoxSizes.left + maxChartAreaWidth;\n          box.top = top;\n          box.bottom = top + box.height; // Move to next point\n\n          top = box.bottom;\n        } else {\n          box.left = left;\n          box.right = left + box.width;\n          box.top = outerBoxSizes.top;\n          box.bottom = outerBoxSizes.top + maxChartAreaHeight; // Move to next point\n\n          left = box.right;\n        }\n      }\n\n      helpers$1.each(leftBoxes.concat(topBoxes), placeBox); // Account for chart width and height\n\n      left += maxChartAreaWidth;\n      top += maxChartAreaHeight;\n      helpers$1.each(rightBoxes, placeBox);\n      helpers$1.each(bottomBoxes, placeBox); // Step 8\n\n      chart.chartArea = {\n        left: outerBoxSizes.left,\n        top: outerBoxSizes.top,\n        right: outerBoxSizes.left + maxChartAreaWidth,\n        bottom: outerBoxSizes.top + maxChartAreaHeight\n      }; // Step 9\n\n      helpers$1.each(chartAreaBoxes, function (box) {\n        box.left = chart.chartArea.left;\n        box.top = chart.chartArea.top;\n        box.right = chart.chartArea.right;\n        box.bottom = chart.chartArea.bottom;\n        box.update(maxChartAreaWidth, maxChartAreaHeight);\n      });\n    }\n  };\n  /**\n   * Platform fallback implementation (minimal).\n   * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n   */\n\n  var platform_basic = {\n    acquireContext: function acquireContext(item) {\n      if (item && item.canvas) {\n        // Support for any object associated to a canvas (including a context2d)\n        item = item.canvas;\n      }\n\n      return item && item.getContext('2d') || null;\n    }\n  };\n  var platform_dom = \"/*\\n * DOM element rendering detection\\n * https://davidwalsh.name/detect-node-insertion\\n */\\n@keyframes chartjs-render-animation {\\n\\tfrom { opacity: 0.99; }\\n\\tto { opacity: 1; }\\n}\\n\\n.chartjs-render-monitor {\\n\\tanimation: chartjs-render-animation 0.001s;\\n}\\n\\n/*\\n * DOM element resizing detection\\n * https://github.com/marcj/css-element-queries\\n */\\n.chartjs-size-monitor,\\n.chartjs-size-monitor-expand,\\n.chartjs-size-monitor-shrink {\\n\\tposition: absolute;\\n\\tdirection: ltr;\\n\\tleft: 0;\\n\\ttop: 0;\\n\\tright: 0;\\n\\tbottom: 0;\\n\\toverflow: hidden;\\n\\tpointer-events: none;\\n\\tvisibility: hidden;\\n\\tz-index: -1;\\n}\\n\\n.chartjs-size-monitor-expand > div {\\n\\tposition: absolute;\\n\\twidth: 1000000px;\\n\\theight: 1000000px;\\n\\tleft: 0;\\n\\ttop: 0;\\n}\\n\\n.chartjs-size-monitor-shrink > div {\\n\\tposition: absolute;\\n\\twidth: 200%;\\n\\theight: 200%;\\n\\tleft: 0;\\n\\ttop: 0;\\n}\\n\";\n  var platform_dom$1 =\n  /*#__PURE__*/\n  Object.freeze({\n    default: platform_dom\n  });\n\n  function getCjsExportFromNamespace(n) {\n    return n && n.default || n;\n  }\n\n  var stylesheet = getCjsExportFromNamespace(platform_dom$1);\n  var EXPANDO_KEY = '$chartjs';\n  var CSS_PREFIX = 'chartjs-';\n  var CSS_SIZE_MONITOR = CSS_PREFIX + 'size-monitor';\n  var CSS_RENDER_MONITOR = CSS_PREFIX + 'render-monitor';\n  var CSS_RENDER_ANIMATION = CSS_PREFIX + 'render-animation';\n  var ANIMATION_START_EVENTS = ['animationstart', 'webkitAnimationStart'];\n  /**\n   * DOM event types -> Chart.js event types.\n   * Note: only events with different types are mapped.\n   * @see https://developer.mozilla.org/en-US/docs/Web/Events\n   */\n\n  var EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n  };\n  /**\n   * The \"used\" size is the final value of a dimension property after all calculations have\n   * been performed. This method uses the computed style of `element` but returns undefined\n   * if the computed style is not expressed in pixels. That can happen in some cases where\n   * `element` has a size relative to its parent and this last one is not yet displayed,\n   * for example because of `display: none` on a parent node.\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n   * @returns {number} Size in pixels or undefined if unknown.\n   */\n\n  function readUsedSize(element, property) {\n    var value = helpers$1.getStyle(element, property);\n    var matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n    return matches ? Number(matches[1]) : undefined;\n  }\n  /**\n   * Initializes the canvas style and render size without modifying the canvas display size,\n   * since responsiveness is handled by the controller.resize() method. The config is used\n   * to determine the aspect ratio to apply in case no explicit height has been specified.\n   */\n\n\n  function initCanvas(canvas, config) {\n    var style = canvas.style; // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n    // returns null or '' if no explicit value has been set to the canvas attribute.\n\n    var renderHeight = canvas.getAttribute('height');\n    var renderWidth = canvas.getAttribute('width'); // Chart.js modifies some canvas values that we want to restore on destroy\n\n    canvas[EXPANDO_KEY] = {\n      initial: {\n        height: renderHeight,\n        width: renderWidth,\n        style: {\n          display: style.display,\n          height: style.height,\n          width: style.width\n        }\n      }\n    }; // Force canvas to display as block to avoid extra space caused by inline\n    // elements, which would interfere with the responsive resize process.\n    // https://github.com/chartjs/Chart.js/issues/2538\n\n    style.display = style.display || 'block';\n\n    if (renderWidth === null || renderWidth === '') {\n      var displayWidth = readUsedSize(canvas, 'width');\n\n      if (displayWidth !== undefined) {\n        canvas.width = displayWidth;\n      }\n    }\n\n    if (renderHeight === null || renderHeight === '') {\n      if (canvas.style.height === '') {\n        // If no explicit render height and style height, let's apply the aspect ratio,\n        // which one can be specified by the user but also by charts as default option\n        // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n        canvas.height = canvas.width / (config.options.aspectRatio || 2);\n      } else {\n        var displayHeight = readUsedSize(canvas, 'height');\n\n        if (displayWidth !== undefined) {\n          canvas.height = displayHeight;\n        }\n      }\n    }\n\n    return canvas;\n  }\n  /**\n   * Detects support for options object argument in addEventListener.\n   * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n   * @private\n   */\n\n\n  var supportsEventListenerOptions = function () {\n    var supports = false;\n\n    try {\n      var options = Object.defineProperty({}, 'passive', {\n        // eslint-disable-next-line getter-return\n        get: function get() {\n          supports = true;\n        }\n      });\n      window.addEventListener('e', null, options);\n    } catch (e) {// continue regardless of error\n    }\n\n    return supports;\n  }(); // Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n  // https://github.com/chartjs/Chart.js/issues/4287\n\n\n  var eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n  } : false;\n\n  function addListener(node, type, listener) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n\n  function removeListener(node, type, listener) {\n    node.removeEventListener(type, listener, eventListenerOptions);\n  }\n\n  function createEvent(type, chart, x, y, nativeEvent) {\n    return {\n      type: type,\n      chart: chart,\n      native: nativeEvent || null,\n      x: x !== undefined ? x : null,\n      y: y !== undefined ? y : null\n    };\n  }\n\n  function fromNativeEvent(event, chart) {\n    var type = EVENT_TYPES[event.type] || event.type;\n    var pos = helpers$1.getRelativePosition(event, chart);\n    return createEvent(type, chart, pos.x, pos.y, event);\n  }\n\n  function throttled(fn, thisArg) {\n    var ticking = false;\n    var args = [];\n    return function () {\n      args = Array.prototype.slice.call(arguments);\n      thisArg = thisArg || this;\n\n      if (!ticking) {\n        ticking = true;\n        helpers$1.requestAnimFrame.call(window, function () {\n          ticking = false;\n          fn.apply(thisArg, args);\n        });\n      }\n    };\n  }\n\n  function createDiv(cls) {\n    var el = document.createElement('div');\n    el.className = cls || '';\n    return el;\n  } // Implementation based on https://github.com/marcj/css-element-queries\n\n\n  function createResizer(handler) {\n    var maxSize = 1000000; // NOTE(SB) Don't use innerHTML because it could be considered unsafe.\n    // https://github.com/chartjs/Chart.js/issues/5902\n\n    var resizer = createDiv(CSS_SIZE_MONITOR);\n    var expand = createDiv(CSS_SIZE_MONITOR + '-expand');\n    var shrink = createDiv(CSS_SIZE_MONITOR + '-shrink');\n    expand.appendChild(createDiv());\n    shrink.appendChild(createDiv());\n    resizer.appendChild(expand);\n    resizer.appendChild(shrink);\n\n    resizer._reset = function () {\n      expand.scrollLeft = maxSize;\n      expand.scrollTop = maxSize;\n      shrink.scrollLeft = maxSize;\n      shrink.scrollTop = maxSize;\n    };\n\n    var onScroll = function onScroll() {\n      resizer._reset();\n\n      handler();\n    };\n\n    addListener(expand, 'scroll', onScroll.bind(expand, 'expand'));\n    addListener(shrink, 'scroll', onScroll.bind(shrink, 'shrink'));\n    return resizer;\n  } // https://davidwalsh.name/detect-node-insertion\n\n\n  function watchForRender(node, handler) {\n    var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});\n\n    var proxy = expando.renderProxy = function (e) {\n      if (e.animationName === CSS_RENDER_ANIMATION) {\n        handler();\n      }\n    };\n\n    helpers$1.each(ANIMATION_START_EVENTS, function (type) {\n      addListener(node, type, proxy);\n    }); // #4737: Chrome might skip the CSS animation when the CSS_RENDER_MONITOR class\n    // is removed then added back immediately (same animation frame?). Accessing the\n    // `offsetParent` property will force a reflow and re-evaluate the CSS animation.\n    // https://gist.github.com/paulirish/5d52fb081b3570c81e3a#box-metrics\n    // https://github.com/chartjs/Chart.js/issues/4737\n\n    expando.reflow = !!node.offsetParent;\n    node.classList.add(CSS_RENDER_MONITOR);\n  }\n\n  function unwatchForRender(node) {\n    var expando = node[EXPANDO_KEY] || {};\n    var proxy = expando.renderProxy;\n\n    if (proxy) {\n      helpers$1.each(ANIMATION_START_EVENTS, function (type) {\n        removeListener(node, type, proxy);\n      });\n      delete expando.renderProxy;\n    }\n\n    node.classList.remove(CSS_RENDER_MONITOR);\n  }\n\n  function addResizeListener(node, listener, chart) {\n    var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {}); // Let's keep track of this added resizer and thus avoid DOM query when removing it.\n\n    var resizer = expando.resizer = createResizer(throttled(function () {\n      if (expando.resizer) {\n        var container = chart.options.maintainAspectRatio && node.parentNode;\n        var w = container ? container.clientWidth : 0;\n        listener(createEvent('resize', chart));\n\n        if (container && container.clientWidth < w && chart.canvas) {\n          // If the container size shrank during chart resize, let's assume\n          // scrollbar appeared. So we resize again with the scrollbar visible -\n          // effectively making chart smaller and the scrollbar hidden again.\n          // Because we are inside `throttled`, and currently `ticking`, scroll\n          // events are ignored during this whole 2 resize process.\n          // If we assumed wrong and something else happened, we are resizing\n          // twice in a frame (potential performance issue)\n          listener(createEvent('resize', chart));\n        }\n      }\n    })); // The resizer needs to be attached to the node parent, so we first need to be\n    // sure that `node` is attached to the DOM before injecting the resizer element.\n\n    watchForRender(node, function () {\n      if (expando.resizer) {\n        var container = node.parentNode;\n\n        if (container && container !== resizer.parentNode) {\n          container.insertBefore(resizer, container.firstChild);\n        } // The container size might have changed, let's reset the resizer state.\n\n\n        resizer._reset();\n      }\n    });\n  }\n\n  function removeResizeListener(node) {\n    var expando = node[EXPANDO_KEY] || {};\n    var resizer = expando.resizer;\n    delete expando.resizer;\n    unwatchForRender(node);\n\n    if (resizer && resizer.parentNode) {\n      resizer.parentNode.removeChild(resizer);\n    }\n  }\n\n  function injectCSS(platform, css) {\n    // https://stackoverflow.com/q/3922139\n    var style = platform._style || document.createElement('style');\n\n    if (!platform._style) {\n      platform._style = style;\n      css = '/* Chart.js */\\n' + css;\n      style.setAttribute('type', 'text/css');\n      document.getElementsByTagName('head')[0].appendChild(style);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n\n  var platform_dom$2 = {\n    /**\n     * When `true`, prevents the automatic injection of the stylesheet required to\n     * correctly detect when the chart is added to the DOM and then resized. This\n     * switch has been added to allow external stylesheet (`dist/Chart(.min)?.js`)\n     * to be manually imported to make this library compatible with any CSP.\n     * See https://github.com/chartjs/Chart.js/issues/5208\n     */\n    disableCSSInjection: false,\n\n    /**\n     * This property holds whether this platform is enabled for the current environment.\n     * Currently used by platform.js to select the proper implementation.\n     * @private\n     */\n    _enabled: typeof window !== 'undefined' && typeof document !== 'undefined',\n\n    /**\n     * @private\n     */\n    _ensureLoaded: function _ensureLoaded() {\n      if (this._loaded) {\n        return;\n      }\n\n      this._loaded = true; // https://github.com/chartjs/Chart.js/issues/5208\n\n      if (!this.disableCSSInjection) {\n        injectCSS(this, stylesheet);\n      }\n    },\n    acquireContext: function acquireContext(item, config) {\n      if (typeof item === 'string') {\n        item = document.getElementById(item);\n      } else if (item.length) {\n        // Support for array based queries (such as jQuery)\n        item = item[0];\n      }\n\n      if (item && item.canvas) {\n        // Support for any object associated to a canvas (including a context2d)\n        item = item.canvas;\n      } // To prevent canvas fingerprinting, some add-ons undefine the getContext\n      // method, for example: https://github.com/kkapsner/CanvasBlocker\n      // https://github.com/chartjs/Chart.js/issues/2807\n\n\n      var context = item && item.getContext && item.getContext('2d'); // Load platform resources on first chart creation, to make possible to change\n      // platform options after importing the library (e.g. `disableCSSInjection`).\n\n      this._ensureLoaded(); // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the item is\n      // inside an iframe or when running in a protected environment. We could guess the\n      // types from their toString() value but let's keep things flexible and assume it's\n      // a sufficient condition if the item has a context2D which has item as `canvas`.\n      // https://github.com/chartjs/Chart.js/issues/3887\n      // https://github.com/chartjs/Chart.js/issues/4102\n      // https://github.com/chartjs/Chart.js/issues/4152\n\n\n      if (context && context.canvas === item) {\n        initCanvas(item, config);\n        return context;\n      }\n\n      return null;\n    },\n    releaseContext: function releaseContext(context) {\n      var canvas = context.canvas;\n\n      if (!canvas[EXPANDO_KEY]) {\n        return;\n      }\n\n      var initial = canvas[EXPANDO_KEY].initial;\n      ['height', 'width'].forEach(function (prop) {\n        var value = initial[prop];\n\n        if (helpers$1.isNullOrUndef(value)) {\n          canvas.removeAttribute(prop);\n        } else {\n          canvas.setAttribute(prop, value);\n        }\n      });\n      helpers$1.each(initial.style || {}, function (value, key) {\n        canvas.style[key] = value;\n      }); // The canvas render size might have been changed (and thus the state stack discarded),\n      // we can't use save() and restore() to restore the initial state. So make sure that at\n      // least the canvas context is reset to the default state by setting the canvas width.\n      // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n      // eslint-disable-next-line no-self-assign\n\n      canvas.width = canvas.width;\n      delete canvas[EXPANDO_KEY];\n    },\n    addEventListener: function addEventListener(chart, type, listener) {\n      var canvas = chart.canvas;\n\n      if (type === 'resize') {\n        // Note: the resize event is not supported on all browsers.\n        addResizeListener(canvas, listener, chart);\n        return;\n      }\n\n      var expando = listener[EXPANDO_KEY] || (listener[EXPANDO_KEY] = {});\n      var proxies = expando.proxies || (expando.proxies = {});\n\n      var proxy = proxies[chart.id + '_' + type] = function (event) {\n        listener(fromNativeEvent(event, chart));\n      };\n\n      addListener(canvas, type, proxy);\n    },\n    removeEventListener: function removeEventListener(chart, type, listener) {\n      var canvas = chart.canvas;\n\n      if (type === 'resize') {\n        // Note: the resize event is not supported on all browsers.\n        removeResizeListener(canvas);\n        return;\n      }\n\n      var expando = listener[EXPANDO_KEY] || {};\n      var proxies = expando.proxies || {};\n      var proxy = proxies[chart.id + '_' + type];\n\n      if (!proxy) {\n        return;\n      }\n\n      removeListener(canvas, type, proxy);\n    }\n  }; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use EventTarget.addEventListener instead.\n   * EventTarget.addEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n   * @function Chart.helpers.addEvent\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers$1.addEvent = addListener;\n  /**\n   * Provided for backward compatibility, use EventTarget.removeEventListener instead.\n   * EventTarget.removeEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener\n   * @function Chart.helpers.removeEvent\n   * @deprecated since version 2.7.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers$1.removeEvent = removeListener; // @TODO Make possible to select another platform at build time.\n\n  var implementation = platform_dom$2._enabled ? platform_dom$2 : platform_basic;\n  /**\n   * @namespace Chart.platform\n   * @see https://chartjs.gitbooks.io/proposals/content/Platform.html\n   * @since 2.4.0\n   */\n\n  var platform = helpers$1.extend({\n    /**\n     * @since 2.7.0\n     */\n    initialize: function initialize() {},\n\n    /**\n     * Called at chart construction time, returns a context2d instance implementing\n     * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n     * @param {*} item - The native item from which to acquire context (platform specific)\n     * @param {object} options - The chart options\n     * @returns {CanvasRenderingContext2D} context2d instance\n     */\n    acquireContext: function acquireContext() {},\n\n    /**\n     * Called at chart destruction time, releases any resources associated to the context\n     * previously returned by the acquireContext() method.\n     * @param {CanvasRenderingContext2D} context - The context2d instance\n     * @returns {boolean} true if the method succeeded, else false\n     */\n    releaseContext: function releaseContext() {},\n\n    /**\n     * Registers the specified listener on the given chart.\n     * @param {Chart} chart - Chart from which to listen for event\n     * @param {string} type - The ({@link IEvent}) type to listen for\n     * @param {function} listener - Receives a notification (an object that implements\n     * the {@link IEvent} interface) when an event of the specified type occurs.\n     */\n    addEventListener: function addEventListener() {},\n\n    /**\n     * Removes the specified listener previously registered with addEventListener.\n     * @param {Chart} chart - Chart from which to remove the listener\n     * @param {string} type - The ({@link IEvent}) type to remove\n     * @param {function} listener - The listener function to remove from the event target.\n     */\n    removeEventListener: function removeEventListener() {}\n  }, implementation);\n\n  core_defaults._set('global', {\n    plugins: {}\n  });\n  /**\n   * The plugin service singleton\n   * @namespace Chart.plugins\n   * @since 2.1.0\n   */\n\n\n  var core_plugins = {\n    /**\n     * Globally registered plugins.\n     * @private\n     */\n    _plugins: [],\n\n    /**\n     * This identifier is used to invalidate the descriptors cache attached to each chart\n     * when a global plugin is registered or unregistered. In this case, the cache ID is\n     * incremented and descriptors are regenerated during following API calls.\n     * @private\n     */\n    _cacheId: 0,\n\n    /**\n     * Registers the given plugin(s) if not already registered.\n     * @param {IPlugin[]|IPlugin} plugins plugin instance(s).\n     */\n    register: function register(plugins) {\n      var p = this._plugins;\n      [].concat(plugins).forEach(function (plugin) {\n        if (p.indexOf(plugin) === -1) {\n          p.push(plugin);\n        }\n      });\n      this._cacheId++;\n    },\n\n    /**\n     * Unregisters the given plugin(s) only if registered.\n     * @param {IPlugin[]|IPlugin} plugins plugin instance(s).\n     */\n    unregister: function unregister(plugins) {\n      var p = this._plugins;\n      [].concat(plugins).forEach(function (plugin) {\n        var idx = p.indexOf(plugin);\n\n        if (idx !== -1) {\n          p.splice(idx, 1);\n        }\n      });\n      this._cacheId++;\n    },\n\n    /**\n     * Remove all registered plugins.\n     * @since 2.1.5\n     */\n    clear: function clear() {\n      this._plugins = [];\n      this._cacheId++;\n    },\n\n    /**\n     * Returns the number of registered plugins?\n     * @returns {number}\n     * @since 2.1.5\n     */\n    count: function count() {\n      return this._plugins.length;\n    },\n\n    /**\n     * Returns all registered plugin instances.\n     * @returns {IPlugin[]} array of plugin objects.\n     * @since 2.1.5\n     */\n    getAll: function getAll() {\n      return this._plugins;\n    },\n\n    /**\n     * Calls enabled plugins for `chart` on the specified hook and with the given args.\n     * This method immediately returns as soon as a plugin explicitly returns false. The\n     * returned value can be used, for instance, to interrupt the current action.\n     * @param {Chart} chart - The chart instance for which plugins should be called.\n     * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n     * @param {Array} [args] - Extra arguments to apply to the hook call.\n     * @returns {boolean} false if any of the plugins return false, else returns true.\n     */\n    notify: function notify(chart, hook, args) {\n      var descriptors = this.descriptors(chart);\n      var ilen = descriptors.length;\n      var i, descriptor, plugin, params, method;\n\n      for (i = 0; i < ilen; ++i) {\n        descriptor = descriptors[i];\n        plugin = descriptor.plugin;\n        method = plugin[hook];\n\n        if (typeof method === 'function') {\n          params = [chart].concat(args || []);\n          params.push(descriptor.options);\n\n          if (method.apply(plugin, params) === false) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    },\n\n    /**\n     * Returns descriptors of enabled plugins for the given chart.\n     * @returns {object[]} [{ plugin, options }]\n     * @private\n     */\n    descriptors: function descriptors(chart) {\n      var cache = chart.$plugins || (chart.$plugins = {});\n\n      if (cache.id === this._cacheId) {\n        return cache.descriptors;\n      }\n\n      var plugins = [];\n      var descriptors = [];\n      var config = chart && chart.config || {};\n      var options = config.options && config.options.plugins || {};\n\n      this._plugins.concat(config.plugins || []).forEach(function (plugin) {\n        var idx = plugins.indexOf(plugin);\n\n        if (idx !== -1) {\n          return;\n        }\n\n        var id = plugin.id;\n        var opts = options[id];\n\n        if (opts === false) {\n          return;\n        }\n\n        if (opts === true) {\n          opts = helpers$1.clone(core_defaults.global.plugins[id]);\n        }\n\n        plugins.push(plugin);\n        descriptors.push({\n          plugin: plugin,\n          options: opts || {}\n        });\n      });\n\n      cache.descriptors = descriptors;\n      cache.id = this._cacheId;\n      return descriptors;\n    },\n\n    /**\n     * Invalidates cache for the given chart: descriptors hold a reference on plugin option,\n     * but in some cases, this reference can be changed by the user when updating options.\n     * https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n     * @private\n     */\n    _invalidate: function _invalidate(chart) {\n      delete chart.$plugins;\n    }\n  };\n  var core_scaleService = {\n    // Scale registration object. Extensions can register new scale types (such as log or DB scales) and then\n    // use the new chart options to grab the correct scale\n    constructors: {},\n    // Use a registration function so that we can move to an ES6 map when we no longer need to support\n    // old browsers\n    // Scale config defaults\n    defaults: {},\n    registerScaleType: function registerScaleType(type, scaleConstructor, scaleDefaults) {\n      this.constructors[type] = scaleConstructor;\n      this.defaults[type] = helpers$1.clone(scaleDefaults);\n    },\n    getScaleConstructor: function getScaleConstructor(type) {\n      return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;\n    },\n    getScaleDefaults: function getScaleDefaults(type) {\n      // Return the scale defaults merged with the global settings so that we always use the latest ones\n      return this.defaults.hasOwnProperty(type) ? helpers$1.merge({}, [core_defaults.scale, this.defaults[type]]) : {};\n    },\n    updateScaleDefaults: function updateScaleDefaults(type, additions) {\n      var me = this;\n\n      if (me.defaults.hasOwnProperty(type)) {\n        me.defaults[type] = helpers$1.extend(me.defaults[type], additions);\n      }\n    },\n    addScalesToLayout: function addScalesToLayout(chart) {\n      // Adds each scale to the chart.boxes array to be sized accordingly\n      helpers$1.each(chart.scales, function (scale) {\n        // Set ILayoutItem parameters for backwards compatibility\n        scale.fullWidth = scale.options.fullWidth;\n        scale.position = scale.options.position;\n        scale.weight = scale.options.weight;\n        core_layouts.addBox(chart, scale);\n      });\n    }\n  };\n  var valueOrDefault$7 = helpers$1.valueOrDefault;\n\n  core_defaults._set('global', {\n    tooltips: {\n      enabled: true,\n      custom: null,\n      mode: 'nearest',\n      position: 'average',\n      intersect: true,\n      backgroundColor: 'rgba(0,0,0,0.8)',\n      titleFontStyle: 'bold',\n      titleSpacing: 2,\n      titleMarginBottom: 6,\n      titleFontColor: '#fff',\n      titleAlign: 'left',\n      bodySpacing: 2,\n      bodyFontColor: '#fff',\n      bodyAlign: 'left',\n      footerFontStyle: 'bold',\n      footerSpacing: 2,\n      footerMarginTop: 6,\n      footerFontColor: '#fff',\n      footerAlign: 'left',\n      yPadding: 6,\n      xPadding: 6,\n      caretPadding: 2,\n      caretSize: 5,\n      cornerRadius: 6,\n      multiKeyBackground: '#fff',\n      displayColors: true,\n      borderColor: 'rgba(0,0,0,0)',\n      borderWidth: 0,\n      callbacks: {\n        // Args are: (tooltipItems, data)\n        beforeTitle: helpers$1.noop,\n        title: function title(tooltipItems, data) {\n          var title = '';\n          var labels = data.labels;\n          var labelCount = labels ? labels.length : 0;\n\n          if (tooltipItems.length > 0) {\n            var item = tooltipItems[0];\n\n            if (item.label) {\n              title = item.label;\n            } else if (item.xLabel) {\n              title = item.xLabel;\n            } else if (labelCount > 0 && item.index < labelCount) {\n              title = labels[item.index];\n            }\n          }\n\n          return title;\n        },\n        afterTitle: helpers$1.noop,\n        // Args are: (tooltipItems, data)\n        beforeBody: helpers$1.noop,\n        // Args are: (tooltipItem, data)\n        beforeLabel: helpers$1.noop,\n        label: function label(tooltipItem, data) {\n          var label = data.datasets[tooltipItem.datasetIndex].label || '';\n\n          if (label) {\n            label += ': ';\n          }\n\n          if (!helpers$1.isNullOrUndef(tooltipItem.value)) {\n            label += tooltipItem.value;\n          } else {\n            label += tooltipItem.yLabel;\n          }\n\n          return label;\n        },\n        labelColor: function labelColor(tooltipItem, chart) {\n          var meta = chart.getDatasetMeta(tooltipItem.datasetIndex);\n          var activeElement = meta.data[tooltipItem.index];\n          var view = activeElement._view;\n          return {\n            borderColor: view.borderColor,\n            backgroundColor: view.backgroundColor\n          };\n        },\n        labelTextColor: function labelTextColor() {\n          return this._options.bodyFontColor;\n        },\n        afterLabel: helpers$1.noop,\n        // Args are: (tooltipItems, data)\n        afterBody: helpers$1.noop,\n        // Args are: (tooltipItems, data)\n        beforeFooter: helpers$1.noop,\n        footer: helpers$1.noop,\n        afterFooter: helpers$1.noop\n      }\n    }\n  });\n\n  var positioners = {\n    /**\n     * Average mode places the tooltip at the average position of the elements shown\n     * @function Chart.Tooltip.positioners.average\n     * @param elements {ChartElement[]} the elements being displayed in the tooltip\n     * @returns {object} tooltip position\n     */\n    average: function average(elements) {\n      if (!elements.length) {\n        return false;\n      }\n\n      var i, len;\n      var x = 0;\n      var y = 0;\n      var count = 0;\n\n      for (i = 0, len = elements.length; i < len; ++i) {\n        var el = elements[i];\n\n        if (el && el.hasValue()) {\n          var pos = el.tooltipPosition();\n          x += pos.x;\n          y += pos.y;\n          ++count;\n        }\n      }\n\n      return {\n        x: x / count,\n        y: y / count\n      };\n    },\n\n    /**\n     * Gets the tooltip position nearest of the item nearest to the event position\n     * @function Chart.Tooltip.positioners.nearest\n     * @param elements {Chart.Element[]} the tooltip elements\n     * @param eventPosition {object} the position of the event in canvas coordinates\n     * @returns {object} the tooltip position\n     */\n    nearest: function nearest(elements, eventPosition) {\n      var x = eventPosition.x;\n      var y = eventPosition.y;\n      var minDistance = Number.POSITIVE_INFINITY;\n      var i, len, nearestElement;\n\n      for (i = 0, len = elements.length; i < len; ++i) {\n        var el = elements[i];\n\n        if (el && el.hasValue()) {\n          var center = el.getCenterPoint();\n          var d = helpers$1.distanceBetweenPoints(eventPosition, center);\n\n          if (d < minDistance) {\n            minDistance = d;\n            nearestElement = el;\n          }\n        }\n      }\n\n      if (nearestElement) {\n        var tp = nearestElement.tooltipPosition();\n        x = tp.x;\n        y = tp.y;\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n  }; // Helper to push or concat based on if the 2nd parameter is an array or not\n\n  function pushOrConcat(base, toPush) {\n    if (toPush) {\n      if (helpers$1.isArray(toPush)) {\n        // base = base.concat(toPush);\n        Array.prototype.push.apply(base, toPush);\n      } else {\n        base.push(toPush);\n      }\n    }\n\n    return base;\n  }\n  /**\n   * Returns array of strings split by newline\n   * @param {string} value - The value to split by newline.\n   * @returns {string[]} value if newline present - Returned from String split() method\n   * @function\n   */\n\n\n  function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n      return str.split('\\n');\n    }\n\n    return str;\n  }\n  /**\n   * Private helper to create a tooltip item model\n   * @param element - the chart element (point, arc, bar) to create the tooltip item for\n   * @return new tooltip item\n   */\n\n\n  function createTooltipItem(element) {\n    var xScale = element._xScale;\n    var yScale = element._yScale || element._scale; // handle radar || polarArea charts\n\n    var index = element._index;\n    var datasetIndex = element._datasetIndex;\n\n    var controller = element._chart.getDatasetMeta(datasetIndex).controller;\n\n    var indexScale = controller._getIndexScale();\n\n    var valueScale = controller._getValueScale();\n\n    return {\n      xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',\n      yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',\n      label: indexScale ? '' + indexScale.getLabelForIndex(index, datasetIndex) : '',\n      value: valueScale ? '' + valueScale.getLabelForIndex(index, datasetIndex) : '',\n      index: index,\n      datasetIndex: datasetIndex,\n      x: element._model.x,\n      y: element._model.y\n    };\n  }\n  /**\n   * Helper to get the reset model for the tooltip\n   * @param tooltipOpts {object} the tooltip options\n   */\n\n\n  function getBaseModel(tooltipOpts) {\n    var globalDefaults = core_defaults.global;\n    return {\n      // Positioning\n      xPadding: tooltipOpts.xPadding,\n      yPadding: tooltipOpts.yPadding,\n      xAlign: tooltipOpts.xAlign,\n      yAlign: tooltipOpts.yAlign,\n      // Body\n      bodyFontColor: tooltipOpts.bodyFontColor,\n      _bodyFontFamily: valueOrDefault$7(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),\n      _bodyFontStyle: valueOrDefault$7(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),\n      _bodyAlign: tooltipOpts.bodyAlign,\n      bodyFontSize: valueOrDefault$7(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),\n      bodySpacing: tooltipOpts.bodySpacing,\n      // Title\n      titleFontColor: tooltipOpts.titleFontColor,\n      _titleFontFamily: valueOrDefault$7(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),\n      _titleFontStyle: valueOrDefault$7(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),\n      titleFontSize: valueOrDefault$7(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),\n      _titleAlign: tooltipOpts.titleAlign,\n      titleSpacing: tooltipOpts.titleSpacing,\n      titleMarginBottom: tooltipOpts.titleMarginBottom,\n      // Footer\n      footerFontColor: tooltipOpts.footerFontColor,\n      _footerFontFamily: valueOrDefault$7(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),\n      _footerFontStyle: valueOrDefault$7(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),\n      footerFontSize: valueOrDefault$7(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),\n      _footerAlign: tooltipOpts.footerAlign,\n      footerSpacing: tooltipOpts.footerSpacing,\n      footerMarginTop: tooltipOpts.footerMarginTop,\n      // Appearance\n      caretSize: tooltipOpts.caretSize,\n      cornerRadius: tooltipOpts.cornerRadius,\n      backgroundColor: tooltipOpts.backgroundColor,\n      opacity: 0,\n      legendColorBackground: tooltipOpts.multiKeyBackground,\n      displayColors: tooltipOpts.displayColors,\n      borderColor: tooltipOpts.borderColor,\n      borderWidth: tooltipOpts.borderWidth\n    };\n  }\n  /**\n   * Get the size of the tooltip\n   */\n\n\n  function getTooltipSize(tooltip, model) {\n    var ctx = tooltip._chart.ctx;\n    var height = model.yPadding * 2; // Tooltip Padding\n\n    var width = 0; // Count of all lines in the body\n\n    var body = model.body;\n    var combinedBodyLength = body.reduce(function (count, bodyItem) {\n      return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;\n    }, 0);\n    combinedBodyLength += model.beforeBody.length + model.afterBody.length;\n    var titleLineCount = model.title.length;\n    var footerLineCount = model.footer.length;\n    var titleFontSize = model.titleFontSize;\n    var bodyFontSize = model.bodyFontSize;\n    var footerFontSize = model.footerFontSize;\n    height += titleLineCount * titleFontSize; // Title Lines\n\n    height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing\n\n    height += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin\n\n    height += combinedBodyLength * bodyFontSize; // Body Lines\n\n    height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing\n\n    height += footerLineCount ? model.footerMarginTop : 0; // Footer Margin\n\n    height += footerLineCount * footerFontSize; // Footer Lines\n\n    height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing\n    // Title width\n\n    var widthPadding = 0;\n\n    var maxLineWidth = function maxLineWidth(line) {\n      width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n\n    ctx.font = helpers$1.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);\n    helpers$1.each(model.title, maxLineWidth); // Body width\n\n    ctx.font = helpers$1.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);\n    helpers$1.each(model.beforeBody.concat(model.afterBody), maxLineWidth); // Body lines may include some extra width due to the color box\n\n    widthPadding = model.displayColors ? bodyFontSize + 2 : 0;\n    helpers$1.each(body, function (bodyItem) {\n      helpers$1.each(bodyItem.before, maxLineWidth);\n      helpers$1.each(bodyItem.lines, maxLineWidth);\n      helpers$1.each(bodyItem.after, maxLineWidth);\n    }); // Reset back to 0\n\n    widthPadding = 0; // Footer width\n\n    ctx.font = helpers$1.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);\n    helpers$1.each(model.footer, maxLineWidth); // Add padding\n\n    width += 2 * model.xPadding;\n    return {\n      width: width,\n      height: height\n    };\n  }\n  /**\n   * Helper to get the alignment of a tooltip given the size\n   */\n\n\n  function determineAlignment(tooltip, size) {\n    var model = tooltip._model;\n    var chart = tooltip._chart;\n    var chartArea = tooltip._chart.chartArea;\n    var xAlign = 'center';\n    var yAlign = 'center';\n\n    if (model.y < size.height) {\n      yAlign = 'top';\n    } else if (model.y > chart.height - size.height) {\n      yAlign = 'bottom';\n    }\n\n    var lf, rf; // functions to determine left, right alignment\n\n    var olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart\n\n    var yf; // function to get the y alignment if the tooltip goes outside of the left or right edges\n\n    var midX = (chartArea.left + chartArea.right) / 2;\n    var midY = (chartArea.top + chartArea.bottom) / 2;\n\n    if (yAlign === 'center') {\n      lf = function lf(x) {\n        return x <= midX;\n      };\n\n      rf = function rf(x) {\n        return x > midX;\n      };\n    } else {\n      lf = function lf(x) {\n        return x <= size.width / 2;\n      };\n\n      rf = function rf(x) {\n        return x >= chart.width - size.width / 2;\n      };\n    }\n\n    olf = function olf(x) {\n      return x + size.width + model.caretSize + model.caretPadding > chart.width;\n    };\n\n    orf = function orf(x) {\n      return x - size.width - model.caretSize - model.caretPadding < 0;\n    };\n\n    yf = function yf(y) {\n      return y <= midY ? 'top' : 'bottom';\n    };\n\n    if (lf(model.x)) {\n      xAlign = 'left'; // Is tooltip too wide and goes over the right side of the chart.?\n\n      if (olf(model.x)) {\n        xAlign = 'center';\n        yAlign = yf(model.y);\n      }\n    } else if (rf(model.x)) {\n      xAlign = 'right'; // Is tooltip too wide and goes outside left edge of canvas?\n\n      if (orf(model.x)) {\n        xAlign = 'center';\n        yAlign = yf(model.y);\n      }\n    }\n\n    var opts = tooltip._options;\n    return {\n      xAlign: opts.xAlign ? opts.xAlign : xAlign,\n      yAlign: opts.yAlign ? opts.yAlign : yAlign\n    };\n  }\n  /**\n   * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n   */\n\n\n  function getBackgroundPoint(vm, size, alignment, chart) {\n    // Background Position\n    var x = vm.x;\n    var y = vm.y;\n    var caretSize = vm.caretSize;\n    var caretPadding = vm.caretPadding;\n    var cornerRadius = vm.cornerRadius;\n    var xAlign = alignment.xAlign;\n    var yAlign = alignment.yAlign;\n    var paddingAndSize = caretSize + caretPadding;\n    var radiusAndPadding = cornerRadius + caretPadding;\n\n    if (xAlign === 'right') {\n      x -= size.width;\n    } else if (xAlign === 'center') {\n      x -= size.width / 2;\n\n      if (x + size.width > chart.width) {\n        x = chart.width - size.width;\n      }\n\n      if (x < 0) {\n        x = 0;\n      }\n    }\n\n    if (yAlign === 'top') {\n      y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n      y -= size.height + paddingAndSize;\n    } else {\n      y -= size.height / 2;\n    }\n\n    if (yAlign === 'center') {\n      if (xAlign === 'left') {\n        x += paddingAndSize;\n      } else if (xAlign === 'right') {\n        x -= paddingAndSize;\n      }\n    } else if (xAlign === 'left') {\n      x -= radiusAndPadding;\n    } else if (xAlign === 'right') {\n      x += radiusAndPadding;\n    }\n\n    return {\n      x: x,\n      y: y\n    };\n  }\n\n  function getAlignedX(vm, align) {\n    return align === 'center' ? vm.x + vm.width / 2 : align === 'right' ? vm.x + vm.width - vm.xPadding : vm.x + vm.xPadding;\n  }\n  /**\n   * Helper to build before and after body lines\n   */\n\n\n  function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n  }\n\n  var exports$3 = core_element.extend({\n    initialize: function initialize() {\n      this._model = getBaseModel(this._options);\n      this._lastActive = [];\n    },\n    // Get the title\n    // Args are: (tooltipItem, data)\n    getTitle: function getTitle() {\n      var me = this;\n      var opts = me._options;\n      var callbacks = opts.callbacks;\n      var beforeTitle = callbacks.beforeTitle.apply(me, arguments);\n      var title = callbacks.title.apply(me, arguments);\n      var afterTitle = callbacks.afterTitle.apply(me, arguments);\n      var lines = [];\n      lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n      lines = pushOrConcat(lines, splitNewlines(title));\n      lines = pushOrConcat(lines, splitNewlines(afterTitle));\n      return lines;\n    },\n    // Args are: (tooltipItem, data)\n    getBeforeBody: function getBeforeBody() {\n      return getBeforeAfterBodyLines(this._options.callbacks.beforeBody.apply(this, arguments));\n    },\n    // Args are: (tooltipItem, data)\n    getBody: function getBody(tooltipItems, data) {\n      var me = this;\n      var callbacks = me._options.callbacks;\n      var bodyItems = [];\n      helpers$1.each(tooltipItems, function (tooltipItem) {\n        var bodyItem = {\n          before: [],\n          lines: [],\n          after: []\n        };\n        pushOrConcat(bodyItem.before, splitNewlines(callbacks.beforeLabel.call(me, tooltipItem, data)));\n        pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));\n        pushOrConcat(bodyItem.after, splitNewlines(callbacks.afterLabel.call(me, tooltipItem, data)));\n        bodyItems.push(bodyItem);\n      });\n      return bodyItems;\n    },\n    // Args are: (tooltipItem, data)\n    getAfterBody: function getAfterBody() {\n      return getBeforeAfterBodyLines(this._options.callbacks.afterBody.apply(this, arguments));\n    },\n    // Get the footer and beforeFooter and afterFooter lines\n    // Args are: (tooltipItem, data)\n    getFooter: function getFooter() {\n      var me = this;\n      var callbacks = me._options.callbacks;\n      var beforeFooter = callbacks.beforeFooter.apply(me, arguments);\n      var footer = callbacks.footer.apply(me, arguments);\n      var afterFooter = callbacks.afterFooter.apply(me, arguments);\n      var lines = [];\n      lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n      lines = pushOrConcat(lines, splitNewlines(footer));\n      lines = pushOrConcat(lines, splitNewlines(afterFooter));\n      return lines;\n    },\n    update: function update(changed) {\n      var me = this;\n      var opts = me._options; // Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition\n      // that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time\n      // which breaks any animations.\n\n      var existingModel = me._model;\n      var model = me._model = getBaseModel(opts);\n      var active = me._active;\n      var data = me._data; // In the case where active.length === 0 we need to keep these at existing values for good animations\n\n      var alignment = {\n        xAlign: existingModel.xAlign,\n        yAlign: existingModel.yAlign\n      };\n      var backgroundPoint = {\n        x: existingModel.x,\n        y: existingModel.y\n      };\n      var tooltipSize = {\n        width: existingModel.width,\n        height: existingModel.height\n      };\n      var tooltipPosition = {\n        x: existingModel.caretX,\n        y: existingModel.caretY\n      };\n      var i, len;\n\n      if (active.length) {\n        model.opacity = 1;\n        var labelColors = [];\n        var labelTextColors = [];\n        tooltipPosition = positioners[opts.position].call(me, active, me._eventPosition);\n        var tooltipItems = [];\n\n        for (i = 0, len = active.length; i < len; ++i) {\n          tooltipItems.push(createTooltipItem(active[i]));\n        } // If the user provided a filter function, use it to modify the tooltip items\n\n\n        if (opts.filter) {\n          tooltipItems = tooltipItems.filter(function (a) {\n            return opts.filter(a, data);\n          });\n        } // If the user provided a sorting function, use it to modify the tooltip items\n\n\n        if (opts.itemSort) {\n          tooltipItems = tooltipItems.sort(function (a, b) {\n            return opts.itemSort(a, b, data);\n          });\n        } // Determine colors for boxes\n\n\n        helpers$1.each(tooltipItems, function (tooltipItem) {\n          labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, me._chart));\n          labelTextColors.push(opts.callbacks.labelTextColor.call(me, tooltipItem, me._chart));\n        }); // Build the Text Lines\n\n        model.title = me.getTitle(tooltipItems, data);\n        model.beforeBody = me.getBeforeBody(tooltipItems, data);\n        model.body = me.getBody(tooltipItems, data);\n        model.afterBody = me.getAfterBody(tooltipItems, data);\n        model.footer = me.getFooter(tooltipItems, data); // Initial positioning and colors\n\n        model.x = tooltipPosition.x;\n        model.y = tooltipPosition.y;\n        model.caretPadding = opts.caretPadding;\n        model.labelColors = labelColors;\n        model.labelTextColors = labelTextColors; // data points\n\n        model.dataPoints = tooltipItems; // We need to determine alignment of the tooltip\n\n        tooltipSize = getTooltipSize(this, model);\n        alignment = determineAlignment(this, tooltipSize); // Final Size and Position\n\n        backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment, me._chart);\n      } else {\n        model.opacity = 0;\n      }\n\n      model.xAlign = alignment.xAlign;\n      model.yAlign = alignment.yAlign;\n      model.x = backgroundPoint.x;\n      model.y = backgroundPoint.y;\n      model.width = tooltipSize.width;\n      model.height = tooltipSize.height; // Point where the caret on the tooltip points to\n\n      model.caretX = tooltipPosition.x;\n      model.caretY = tooltipPosition.y;\n      me._model = model;\n\n      if (changed && opts.custom) {\n        opts.custom.call(me, model);\n      }\n\n      return me;\n    },\n    drawCaret: function drawCaret(tooltipPoint, size) {\n      var ctx = this._chart.ctx;\n      var vm = this._view;\n      var caretPosition = this.getCaretPosition(tooltipPoint, size, vm);\n      ctx.lineTo(caretPosition.x1, caretPosition.y1);\n      ctx.lineTo(caretPosition.x2, caretPosition.y2);\n      ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    },\n    getCaretPosition: function getCaretPosition(tooltipPoint, size, vm) {\n      var x1, x2, x3, y1, y2, y3;\n      var caretSize = vm.caretSize;\n      var cornerRadius = vm.cornerRadius;\n      var xAlign = vm.xAlign;\n      var yAlign = vm.yAlign;\n      var ptX = tooltipPoint.x;\n      var ptY = tooltipPoint.y;\n      var width = size.width;\n      var height = size.height;\n\n      if (yAlign === 'center') {\n        y2 = ptY + height / 2;\n\n        if (xAlign === 'left') {\n          x1 = ptX;\n          x2 = x1 - caretSize;\n          x3 = x1;\n          y1 = y2 + caretSize;\n          y3 = y2 - caretSize;\n        } else {\n          x1 = ptX + width;\n          x2 = x1 + caretSize;\n          x3 = x1;\n          y1 = y2 - caretSize;\n          y3 = y2 + caretSize;\n        }\n      } else {\n        if (xAlign === 'left') {\n          x2 = ptX + cornerRadius + caretSize;\n          x1 = x2 - caretSize;\n          x3 = x2 + caretSize;\n        } else if (xAlign === 'right') {\n          x2 = ptX + width - cornerRadius - caretSize;\n          x1 = x2 - caretSize;\n          x3 = x2 + caretSize;\n        } else {\n          x2 = vm.caretX;\n          x1 = x2 - caretSize;\n          x3 = x2 + caretSize;\n        }\n\n        if (yAlign === 'top') {\n          y1 = ptY;\n          y2 = y1 - caretSize;\n          y3 = y1;\n        } else {\n          y1 = ptY + height;\n          y2 = y1 + caretSize;\n          y3 = y1; // invert drawing order\n\n          var tmp = x3;\n          x3 = x1;\n          x1 = tmp;\n        }\n      }\n\n      return {\n        x1: x1,\n        x2: x2,\n        x3: x3,\n        y1: y1,\n        y2: y2,\n        y3: y3\n      };\n    },\n    drawTitle: function drawTitle(pt, vm, ctx) {\n      var title = vm.title;\n\n      if (title.length) {\n        pt.x = getAlignedX(vm, vm._titleAlign);\n        ctx.textAlign = vm._titleAlign;\n        ctx.textBaseline = 'top';\n        var titleFontSize = vm.titleFontSize;\n        var titleSpacing = vm.titleSpacing;\n        ctx.fillStyle = vm.titleFontColor;\n        ctx.font = helpers$1.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);\n        var i, len;\n\n        for (i = 0, len = title.length; i < len; ++i) {\n          ctx.fillText(title[i], pt.x, pt.y);\n          pt.y += titleFontSize + titleSpacing; // Line Height and spacing\n\n          if (i + 1 === title.length) {\n            pt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n          }\n        }\n      }\n    },\n    drawBody: function drawBody(pt, vm, ctx) {\n      var bodyFontSize = vm.bodyFontSize;\n      var bodySpacing = vm.bodySpacing;\n      var bodyAlign = vm._bodyAlign;\n      var body = vm.body;\n      var drawColorBoxes = vm.displayColors;\n      var labelColors = vm.labelColors;\n      var xLinePadding = 0;\n      var colorX = drawColorBoxes ? getAlignedX(vm, 'left') : 0;\n      var textColor;\n      ctx.textAlign = bodyAlign;\n      ctx.textBaseline = 'top';\n      ctx.font = helpers$1.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);\n      pt.x = getAlignedX(vm, bodyAlign); // Before Body\n\n      var fillLineOfText = function fillLineOfText(line) {\n        ctx.fillText(line, pt.x + xLinePadding, pt.y);\n        pt.y += bodyFontSize + bodySpacing;\n      }; // Before body lines\n\n\n      ctx.fillStyle = vm.bodyFontColor;\n      helpers$1.each(vm.beforeBody, fillLineOfText);\n      xLinePadding = drawColorBoxes && bodyAlign !== 'right' ? bodyAlign === 'center' ? bodyFontSize / 2 + 1 : bodyFontSize + 2 : 0; // Draw body lines now\n\n      helpers$1.each(body, function (bodyItem, i) {\n        textColor = vm.labelTextColors[i];\n        ctx.fillStyle = textColor;\n        helpers$1.each(bodyItem.before, fillLineOfText);\n        helpers$1.each(bodyItem.lines, function (line) {\n          // Draw Legend-like boxes if needed\n          if (drawColorBoxes) {\n            // Fill a white rect so that colours merge nicely if the opacity is < 1\n            ctx.fillStyle = vm.legendColorBackground;\n            ctx.fillRect(colorX, pt.y, bodyFontSize, bodyFontSize); // Border\n\n            ctx.lineWidth = 1;\n            ctx.strokeStyle = labelColors[i].borderColor;\n            ctx.strokeRect(colorX, pt.y, bodyFontSize, bodyFontSize); // Inner square\n\n            ctx.fillStyle = labelColors[i].backgroundColor;\n            ctx.fillRect(colorX + 1, pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);\n            ctx.fillStyle = textColor;\n          }\n\n          fillLineOfText(line);\n        });\n        helpers$1.each(bodyItem.after, fillLineOfText);\n      }); // Reset back to 0 for after body\n\n      xLinePadding = 0; // After body lines\n\n      helpers$1.each(vm.afterBody, fillLineOfText);\n      pt.y -= bodySpacing; // Remove last body spacing\n    },\n    drawFooter: function drawFooter(pt, vm, ctx) {\n      var footer = vm.footer;\n\n      if (footer.length) {\n        pt.x = getAlignedX(vm, vm._footerAlign);\n        pt.y += vm.footerMarginTop;\n        ctx.textAlign = vm._footerAlign;\n        ctx.textBaseline = 'top';\n        ctx.fillStyle = vm.footerFontColor;\n        ctx.font = helpers$1.fontString(vm.footerFontSize, vm._footerFontStyle, vm._footerFontFamily);\n        helpers$1.each(footer, function (line) {\n          ctx.fillText(line, pt.x, pt.y);\n          pt.y += vm.footerFontSize + vm.footerSpacing;\n        });\n      }\n    },\n    drawBackground: function drawBackground(pt, vm, ctx, tooltipSize) {\n      ctx.fillStyle = vm.backgroundColor;\n      ctx.strokeStyle = vm.borderColor;\n      ctx.lineWidth = vm.borderWidth;\n      var xAlign = vm.xAlign;\n      var yAlign = vm.yAlign;\n      var x = pt.x;\n      var y = pt.y;\n      var width = tooltipSize.width;\n      var height = tooltipSize.height;\n      var radius = vm.cornerRadius;\n      ctx.beginPath();\n      ctx.moveTo(x + radius, y);\n\n      if (yAlign === 'top') {\n        this.drawCaret(pt, tooltipSize);\n      }\n\n      ctx.lineTo(x + width - radius, y);\n      ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n\n      if (yAlign === 'center' && xAlign === 'right') {\n        this.drawCaret(pt, tooltipSize);\n      }\n\n      ctx.lineTo(x + width, y + height - radius);\n      ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n\n      if (yAlign === 'bottom') {\n        this.drawCaret(pt, tooltipSize);\n      }\n\n      ctx.lineTo(x + radius, y + height);\n      ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n\n      if (yAlign === 'center' && xAlign === 'left') {\n        this.drawCaret(pt, tooltipSize);\n      }\n\n      ctx.lineTo(x, y + radius);\n      ctx.quadraticCurveTo(x, y, x + radius, y);\n      ctx.closePath();\n      ctx.fill();\n\n      if (vm.borderWidth > 0) {\n        ctx.stroke();\n      }\n    },\n    draw: function draw() {\n      var ctx = this._chart.ctx;\n      var vm = this._view;\n\n      if (vm.opacity === 0) {\n        return;\n      }\n\n      var tooltipSize = {\n        width: vm.width,\n        height: vm.height\n      };\n      var pt = {\n        x: vm.x,\n        y: vm.y\n      }; // IE11/Edge does not like very small opacities, so snap to 0\n\n      var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity; // Truthy/falsey value for empty tooltip\n\n      var hasTooltipContent = vm.title.length || vm.beforeBody.length || vm.body.length || vm.afterBody.length || vm.footer.length;\n\n      if (this._options.enabled && hasTooltipContent) {\n        ctx.save();\n        ctx.globalAlpha = opacity; // Draw Background\n\n        this.drawBackground(pt, vm, ctx, tooltipSize); // Draw Title, Body, and Footer\n\n        pt.y += vm.yPadding; // Titles\n\n        this.drawTitle(pt, vm, ctx); // Body\n\n        this.drawBody(pt, vm, ctx); // Footer\n\n        this.drawFooter(pt, vm, ctx);\n        ctx.restore();\n      }\n    },\n\n    /**\n     * Handle an event\n     * @private\n     * @param {IEvent} event - The event to handle\n     * @returns {boolean} true if the tooltip changed\n     */\n    handleEvent: function handleEvent(e) {\n      var me = this;\n      var options = me._options;\n      var changed = false;\n      me._lastActive = me._lastActive || []; // Find Active Elements for tooltips\n\n      if (e.type === 'mouseout') {\n        me._active = [];\n      } else {\n        me._active = me._chart.getElementsAtEventForMode(e, options.mode, options);\n      } // Remember Last Actives\n\n\n      changed = !helpers$1.arrayEquals(me._active, me._lastActive); // Only handle target event on tooltip change\n\n      if (changed) {\n        me._lastActive = me._active;\n\n        if (options.enabled || options.custom) {\n          me._eventPosition = {\n            x: e.x,\n            y: e.y\n          };\n          me.update(true);\n          me.pivot();\n        }\n      }\n\n      return changed;\n    }\n  });\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n\n  var positioners_1 = positioners;\n  var core_tooltip = exports$3;\n  core_tooltip.positioners = positioners_1;\n  var valueOrDefault$8 = helpers$1.valueOrDefault;\n\n  core_defaults._set('global', {\n    elements: {},\n    events: ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'],\n    hover: {\n      onHover: null,\n      mode: 'nearest',\n      intersect: true,\n      animationDuration: 400\n    },\n    onClick: null,\n    maintainAspectRatio: true,\n    responsive: true,\n    responsiveAnimationDuration: 0\n  });\n  /**\n   * Recursively merge the given config objects representing the `scales` option\n   * by incorporating scale defaults in `xAxes` and `yAxes` array items, then\n   * returns a deep copy of the result, thus doesn't alter inputs.\n   */\n\n\n  function mergeScaleConfig()\n  /* config objects ... */\n  {\n    return helpers$1.merge({}, [].slice.call(arguments), {\n      merger: function merger(key, target, source, options) {\n        if (key === 'xAxes' || key === 'yAxes') {\n          var slen = source[key].length;\n          var i, type, scale;\n\n          if (!target[key]) {\n            target[key] = [];\n          }\n\n          for (i = 0; i < slen; ++i) {\n            scale = source[key][i];\n            type = valueOrDefault$8(scale.type, key === 'xAxes' ? 'category' : 'linear');\n\n            if (i >= target[key].length) {\n              target[key].push({});\n            }\n\n            if (!target[key][i].type || scale.type && scale.type !== target[key][i].type) {\n              // new/untyped scale or type changed: let's apply the new defaults\n              // then merge source scale to correctly overwrite the defaults.\n              helpers$1.merge(target[key][i], [core_scaleService.getScaleDefaults(type), scale]);\n            } else {\n              // scales type are the same\n              helpers$1.merge(target[key][i], scale);\n            }\n          }\n        } else {\n          helpers$1._merger(key, target, source, options);\n        }\n      }\n    });\n  }\n  /**\n   * Recursively merge the given config objects as the root options by handling\n   * default scale options for the `scales` and `scale` properties, then returns\n   * a deep copy of the result, thus doesn't alter inputs.\n   */\n\n\n  function mergeConfig()\n  /* config objects ... */\n  {\n    return helpers$1.merge({}, [].slice.call(arguments), {\n      merger: function merger(key, target, source, options) {\n        var tval = target[key] || {};\n        var sval = source[key];\n\n        if (key === 'scales') {\n          // scale config merging is complex. Add our own function here for that\n          target[key] = mergeScaleConfig(tval, sval);\n        } else if (key === 'scale') {\n          // used in polar area & radar charts since there is only one scale\n          target[key] = helpers$1.merge(tval, [core_scaleService.getScaleDefaults(sval.type), sval]);\n        } else {\n          helpers$1._merger(key, target, source, options);\n        }\n      }\n    });\n  }\n\n  function initConfig(config) {\n    config = config || {}; // Do NOT use mergeConfig for the data object because this method merges arrays\n    // and so would change references to labels and datasets, preventing data updates.\n\n    var data = config.data = config.data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    config.options = mergeConfig(core_defaults.global, core_defaults[config.type], config.options || {});\n    return config;\n  }\n\n  function updateConfig(chart) {\n    var newOptions = chart.options;\n    helpers$1.each(chart.scales, function (scale) {\n      core_layouts.removeBox(chart, scale);\n    });\n    newOptions = mergeConfig(core_defaults.global, core_defaults[chart.config.type], newOptions);\n    chart.options = chart.config.options = newOptions;\n    chart.ensureScalesHaveIDs();\n    chart.buildOrUpdateScales(); // Tooltip\n\n    chart.tooltip._options = newOptions.tooltips;\n    chart.tooltip.initialize();\n  }\n\n  function positionIsHorizontal(position) {\n    return position === 'top' || position === 'bottom';\n  }\n\n  var Chart = function Chart(item, config) {\n    this.construct(item, config);\n    return this;\n  };\n\n  helpers$1.extend(Chart.prototype,\n  /** @lends Chart */\n  {\n    /**\n     * @private\n     */\n    construct: function construct(item, config) {\n      var me = this;\n      config = initConfig(config);\n      var context = platform.acquireContext(item, config);\n      var canvas = context && context.canvas;\n      var height = canvas && canvas.height;\n      var width = canvas && canvas.width;\n      me.id = helpers$1.uid();\n      me.ctx = context;\n      me.canvas = canvas;\n      me.config = config;\n      me.width = width;\n      me.height = height;\n      me.aspectRatio = height ? width / height : null;\n      me.options = config.options;\n      me._bufferedRender = false;\n      /**\n       * Provided for backward compatibility, Chart and Chart.Controller have been merged,\n       * the \"instance\" still need to be defined since it might be called from plugins.\n       * @prop Chart#chart\n       * @deprecated since version 2.6.0\n       * @todo remove at version 3\n       * @private\n       */\n\n      me.chart = me;\n      me.controller = me; // chart.chart.controller #inception\n      // Add the chart instance to the global namespace\n\n      Chart.instances[me.id] = me; // Define alias to the config data: `chart.data === chart.config.data`\n\n      Object.defineProperty(me, 'data', {\n        get: function get() {\n          return me.config.data;\n        },\n        set: function set(value) {\n          me.config.data = value;\n        }\n      });\n\n      if (!context || !canvas) {\n        // The given item is not a compatible context2d element, let's return before finalizing\n        // the chart initialization but after setting basic chart / controller properties that\n        // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n        // https://github.com/chartjs/Chart.js/issues/2807\n        console.error(\"Failed to create chart: can't acquire context from the given item\");\n        return;\n      }\n\n      me.initialize();\n      me.update();\n    },\n\n    /**\n     * @private\n     */\n    initialize: function initialize() {\n      var me = this; // Before init plugin notification\n\n      core_plugins.notify(me, 'beforeInit');\n      helpers$1.retinaScale(me, me.options.devicePixelRatio);\n      me.bindEvents();\n\n      if (me.options.responsive) {\n        // Initial resize before chart draws (must be silent to preserve initial animations).\n        me.resize(true);\n      } // Make sure scales have IDs and are built before we build any controllers.\n\n\n      me.ensureScalesHaveIDs();\n      me.buildOrUpdateScales();\n      me.initToolTip(); // After init plugin notification\n\n      core_plugins.notify(me, 'afterInit');\n      return me;\n    },\n    clear: function clear() {\n      helpers$1.canvas.clear(this);\n      return this;\n    },\n    stop: function stop() {\n      // Stops any current animation loop occurring\n      core_animations.cancelAnimation(this);\n      return this;\n    },\n    resize: function resize(silent) {\n      var me = this;\n      var options = me.options;\n      var canvas = me.canvas;\n      var aspectRatio = options.maintainAspectRatio && me.aspectRatio || null; // the canvas render width and height will be casted to integers so make sure that\n      // the canvas display style uses the same integer values to avoid blurring effect.\n      // Set to 0 instead of canvas.size because the size defaults to 300x150 if the element is collapsed\n\n      var newWidth = Math.max(0, Math.floor(helpers$1.getMaximumWidth(canvas)));\n      var newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : helpers$1.getMaximumHeight(canvas)));\n\n      if (me.width === newWidth && me.height === newHeight) {\n        return;\n      }\n\n      canvas.width = me.width = newWidth;\n      canvas.height = me.height = newHeight;\n      canvas.style.width = newWidth + 'px';\n      canvas.style.height = newHeight + 'px';\n      helpers$1.retinaScale(me, options.devicePixelRatio);\n\n      if (!silent) {\n        // Notify any plugins about the resize\n        var newSize = {\n          width: newWidth,\n          height: newHeight\n        };\n        core_plugins.notify(me, 'resize', [newSize]); // Notify of resize\n\n        if (options.onResize) {\n          options.onResize(me, newSize);\n        }\n\n        me.stop();\n        me.update({\n          duration: options.responsiveAnimationDuration\n        });\n      }\n    },\n    ensureScalesHaveIDs: function ensureScalesHaveIDs() {\n      var options = this.options;\n      var scalesOptions = options.scales || {};\n      var scaleOptions = options.scale;\n      helpers$1.each(scalesOptions.xAxes, function (xAxisOptions, index) {\n        xAxisOptions.id = xAxisOptions.id || 'x-axis-' + index;\n      });\n      helpers$1.each(scalesOptions.yAxes, function (yAxisOptions, index) {\n        yAxisOptions.id = yAxisOptions.id || 'y-axis-' + index;\n      });\n\n      if (scaleOptions) {\n        scaleOptions.id = scaleOptions.id || 'scale';\n      }\n    },\n\n    /**\n     * Builds a map of scale ID to scale object for future lookup.\n     */\n    buildOrUpdateScales: function buildOrUpdateScales() {\n      var me = this;\n      var options = me.options;\n      var scales = me.scales || {};\n      var items = [];\n      var updated = Object.keys(scales).reduce(function (obj, id) {\n        obj[id] = false;\n        return obj;\n      }, {});\n\n      if (options.scales) {\n        items = items.concat((options.scales.xAxes || []).map(function (xAxisOptions) {\n          return {\n            options: xAxisOptions,\n            dtype: 'category',\n            dposition: 'bottom'\n          };\n        }), (options.scales.yAxes || []).map(function (yAxisOptions) {\n          return {\n            options: yAxisOptions,\n            dtype: 'linear',\n            dposition: 'left'\n          };\n        }));\n      }\n\n      if (options.scale) {\n        items.push({\n          options: options.scale,\n          dtype: 'radialLinear',\n          isDefault: true,\n          dposition: 'chartArea'\n        });\n      }\n\n      helpers$1.each(items, function (item) {\n        var scaleOptions = item.options;\n        var id = scaleOptions.id;\n        var scaleType = valueOrDefault$8(scaleOptions.type, item.dtype);\n\n        if (positionIsHorizontal(scaleOptions.position) !== positionIsHorizontal(item.dposition)) {\n          scaleOptions.position = item.dposition;\n        }\n\n        updated[id] = true;\n        var scale = null;\n\n        if (id in scales && scales[id].type === scaleType) {\n          scale = scales[id];\n          scale.options = scaleOptions;\n          scale.ctx = me.ctx;\n          scale.chart = me;\n        } else {\n          var scaleClass = core_scaleService.getScaleConstructor(scaleType);\n\n          if (!scaleClass) {\n            return;\n          }\n\n          scale = new scaleClass({\n            id: id,\n            type: scaleType,\n            options: scaleOptions,\n            ctx: me.ctx,\n            chart: me\n          });\n          scales[scale.id] = scale;\n        }\n\n        scale.mergeTicksOptions(); // TODO(SB): I think we should be able to remove this custom case (options.scale)\n        // and consider it as a regular scale part of the \"scales\"\" map only! This would\n        // make the logic easier and remove some useless? custom code.\n\n        if (item.isDefault) {\n          me.scale = scale;\n        }\n      }); // clear up discarded scales\n\n      helpers$1.each(updated, function (hasUpdated, id) {\n        if (!hasUpdated) {\n          delete scales[id];\n        }\n      });\n      me.scales = scales;\n      core_scaleService.addScalesToLayout(this);\n    },\n    buildOrUpdateControllers: function buildOrUpdateControllers() {\n      var me = this;\n      var newControllers = [];\n      helpers$1.each(me.data.datasets, function (dataset, datasetIndex) {\n        var meta = me.getDatasetMeta(datasetIndex);\n        var type = dataset.type || me.config.type;\n\n        if (meta.type && meta.type !== type) {\n          me.destroyDatasetMeta(datasetIndex);\n          meta = me.getDatasetMeta(datasetIndex);\n        }\n\n        meta.type = type;\n\n        if (meta.controller) {\n          meta.controller.updateIndex(datasetIndex);\n          meta.controller.linkScales();\n        } else {\n          var ControllerClass = controllers[meta.type];\n\n          if (ControllerClass === undefined) {\n            throw new Error('\"' + meta.type + '\" is not a chart type.');\n          }\n\n          meta.controller = new ControllerClass(me, datasetIndex);\n          newControllers.push(meta.controller);\n        }\n      }, me);\n      return newControllers;\n    },\n\n    /**\n     * Reset the elements of all datasets\n     * @private\n     */\n    resetElements: function resetElements() {\n      var me = this;\n      helpers$1.each(me.data.datasets, function (dataset, datasetIndex) {\n        me.getDatasetMeta(datasetIndex).controller.reset();\n      }, me);\n    },\n\n    /**\n    * Resets the chart back to it's state before the initial animation\n    */\n    reset: function reset() {\n      this.resetElements();\n      this.tooltip.initialize();\n    },\n    update: function update(config) {\n      var me = this;\n\n      if (!config || typeof config !== 'object') {\n        // backwards compatibility\n        config = {\n          duration: config,\n          lazy: arguments[1]\n        };\n      }\n\n      updateConfig(me); // plugins options references might have change, let's invalidate the cache\n      // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n\n      core_plugins._invalidate(me);\n\n      if (core_plugins.notify(me, 'beforeUpdate') === false) {\n        return;\n      } // In case the entire data object changed\n\n\n      me.tooltip._data = me.data; // Make sure dataset controllers are updated and new controllers are reset\n\n      var newControllers = me.buildOrUpdateControllers(); // Make sure all dataset controllers have correct meta data counts\n\n      helpers$1.each(me.data.datasets, function (dataset, datasetIndex) {\n        me.getDatasetMeta(datasetIndex).controller.buildOrUpdateElements();\n      }, me);\n      me.updateLayout(); // Can only reset the new controllers after the scales have been updated\n\n      if (me.options.animation && me.options.animation.duration) {\n        helpers$1.each(newControllers, function (controller) {\n          controller.reset();\n        });\n      }\n\n      me.updateDatasets(); // Need to reset tooltip in case it is displayed with elements that are removed\n      // after update.\n\n      me.tooltip.initialize(); // Last active contains items that were previously in the tooltip.\n      // When we reset the tooltip, we need to clear it\n\n      me.lastActive = []; // Do this before render so that any plugins that need final scale updates can use it\n\n      core_plugins.notify(me, 'afterUpdate');\n\n      if (me._bufferedRender) {\n        me._bufferedRequest = {\n          duration: config.duration,\n          easing: config.easing,\n          lazy: config.lazy\n        };\n      } else {\n        me.render(config);\n      }\n    },\n\n    /**\n     * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n     * hook, in which case, plugins will not be called on `afterLayout`.\n     * @private\n     */\n    updateLayout: function updateLayout() {\n      var me = this;\n\n      if (core_plugins.notify(me, 'beforeLayout') === false) {\n        return;\n      }\n\n      core_layouts.update(this, this.width, this.height);\n      /**\n       * Provided for backward compatibility, use `afterLayout` instead.\n       * @method IPlugin#afterScaleUpdate\n       * @deprecated since version 2.5.0\n       * @todo remove at version 3\n       * @private\n       */\n\n      core_plugins.notify(me, 'afterScaleUpdate');\n      core_plugins.notify(me, 'afterLayout');\n    },\n\n    /**\n     * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n     * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n     * @private\n     */\n    updateDatasets: function updateDatasets() {\n      var me = this;\n\n      if (core_plugins.notify(me, 'beforeDatasetsUpdate') === false) {\n        return;\n      }\n\n      for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n        me.updateDataset(i);\n      }\n\n      core_plugins.notify(me, 'afterDatasetsUpdate');\n    },\n\n    /**\n     * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n     * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n     * @private\n     */\n    updateDataset: function updateDataset(index) {\n      var me = this;\n      var meta = me.getDatasetMeta(index);\n      var args = {\n        meta: meta,\n        index: index\n      };\n\n      if (core_plugins.notify(me, 'beforeDatasetUpdate', [args]) === false) {\n        return;\n      }\n\n      meta.controller.update();\n      core_plugins.notify(me, 'afterDatasetUpdate', [args]);\n    },\n    render: function render(config) {\n      var me = this;\n\n      if (!config || typeof config !== 'object') {\n        // backwards compatibility\n        config = {\n          duration: config,\n          lazy: arguments[1]\n        };\n      }\n\n      var animationOptions = me.options.animation;\n      var duration = valueOrDefault$8(config.duration, animationOptions && animationOptions.duration);\n      var lazy = config.lazy;\n\n      if (core_plugins.notify(me, 'beforeRender') === false) {\n        return;\n      }\n\n      var onComplete = function onComplete(animation) {\n        core_plugins.notify(me, 'afterRender');\n        helpers$1.callback(animationOptions && animationOptions.onComplete, [animation], me);\n      };\n\n      if (animationOptions && duration) {\n        var animation = new core_animation({\n          numSteps: duration / 16.66,\n          // 60 fps\n          easing: config.easing || animationOptions.easing,\n          render: function render(chart, animationObject) {\n            var easingFunction = helpers$1.easing.effects[animationObject.easing];\n            var currentStep = animationObject.currentStep;\n            var stepDecimal = currentStep / animationObject.numSteps;\n            chart.draw(easingFunction(stepDecimal), stepDecimal, currentStep);\n          },\n          onAnimationProgress: animationOptions.onProgress,\n          onAnimationComplete: onComplete\n        });\n        core_animations.addAnimation(me, animation, duration, lazy);\n      } else {\n        me.draw(); // See https://github.com/chartjs/Chart.js/issues/3781\n\n        onComplete(new core_animation({\n          numSteps: 0,\n          chart: me\n        }));\n      }\n\n      return me;\n    },\n    draw: function draw(easingValue) {\n      var me = this;\n      me.clear();\n\n      if (helpers$1.isNullOrUndef(easingValue)) {\n        easingValue = 1;\n      }\n\n      me.transition(easingValue);\n\n      if (me.width <= 0 || me.height <= 0) {\n        return;\n      }\n\n      if (core_plugins.notify(me, 'beforeDraw', [easingValue]) === false) {\n        return;\n      } // Draw all the scales\n\n\n      helpers$1.each(me.boxes, function (box) {\n        box.draw(me.chartArea);\n      }, me);\n      me.drawDatasets(easingValue);\n\n      me._drawTooltip(easingValue);\n\n      core_plugins.notify(me, 'afterDraw', [easingValue]);\n    },\n\n    /**\n     * @private\n     */\n    transition: function transition(easingValue) {\n      var me = this;\n\n      for (var i = 0, ilen = (me.data.datasets || []).length; i < ilen; ++i) {\n        if (me.isDatasetVisible(i)) {\n          me.getDatasetMeta(i).controller.transition(easingValue);\n        }\n      }\n\n      me.tooltip.transition(easingValue);\n    },\n\n    /**\n     * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n     * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n     * @private\n     */\n    drawDatasets: function drawDatasets(easingValue) {\n      var me = this;\n\n      if (core_plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {\n        return;\n      } // Draw datasets reversed to support proper line stacking\n\n\n      for (var i = (me.data.datasets || []).length - 1; i >= 0; --i) {\n        if (me.isDatasetVisible(i)) {\n          me.drawDataset(i, easingValue);\n        }\n      }\n\n      core_plugins.notify(me, 'afterDatasetsDraw', [easingValue]);\n    },\n\n    /**\n     * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n     * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n     * @private\n     */\n    drawDataset: function drawDataset(index, easingValue) {\n      var me = this;\n      var meta = me.getDatasetMeta(index);\n      var args = {\n        meta: meta,\n        index: index,\n        easingValue: easingValue\n      };\n\n      if (core_plugins.notify(me, 'beforeDatasetDraw', [args]) === false) {\n        return;\n      }\n\n      meta.controller.draw(easingValue);\n      core_plugins.notify(me, 'afterDatasetDraw', [args]);\n    },\n\n    /**\n     * Draws tooltip unless a plugin returns `false` to the `beforeTooltipDraw`\n     * hook, in which case, plugins will not be called on `afterTooltipDraw`.\n     * @private\n     */\n    _drawTooltip: function _drawTooltip(easingValue) {\n      var me = this;\n      var tooltip = me.tooltip;\n      var args = {\n        tooltip: tooltip,\n        easingValue: easingValue\n      };\n\n      if (core_plugins.notify(me, 'beforeTooltipDraw', [args]) === false) {\n        return;\n      }\n\n      tooltip.draw();\n      core_plugins.notify(me, 'afterTooltipDraw', [args]);\n    },\n\n    /**\n     * Get the single element that was clicked on\n     * @return An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw\n     */\n    getElementAtEvent: function getElementAtEvent(e) {\n      return core_interaction.modes.single(this, e);\n    },\n    getElementsAtEvent: function getElementsAtEvent(e) {\n      return core_interaction.modes.label(this, e, {\n        intersect: true\n      });\n    },\n    getElementsAtXAxis: function getElementsAtXAxis(e) {\n      return core_interaction.modes['x-axis'](this, e, {\n        intersect: true\n      });\n    },\n    getElementsAtEventForMode: function getElementsAtEventForMode(e, mode, options) {\n      var method = core_interaction.modes[mode];\n\n      if (typeof method === 'function') {\n        return method(this, e, options);\n      }\n\n      return [];\n    },\n    getDatasetAtEvent: function getDatasetAtEvent(e) {\n      return core_interaction.modes.dataset(this, e, {\n        intersect: true\n      });\n    },\n    getDatasetMeta: function getDatasetMeta(datasetIndex) {\n      var me = this;\n      var dataset = me.data.datasets[datasetIndex];\n\n      if (!dataset._meta) {\n        dataset._meta = {};\n      }\n\n      var meta = dataset._meta[me.id];\n\n      if (!meta) {\n        meta = dataset._meta[me.id] = {\n          type: null,\n          data: [],\n          dataset: null,\n          controller: null,\n          hidden: null,\n          // See isDatasetVisible() comment\n          xAxisID: null,\n          yAxisID: null\n        };\n      }\n\n      return meta;\n    },\n    getVisibleDatasetCount: function getVisibleDatasetCount() {\n      var count = 0;\n\n      for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n        if (this.isDatasetVisible(i)) {\n          count++;\n        }\n      }\n\n      return count;\n    },\n    isDatasetVisible: function isDatasetVisible(datasetIndex) {\n      var meta = this.getDatasetMeta(datasetIndex); // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n      // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n\n      return typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;\n    },\n    generateLegend: function generateLegend() {\n      return this.options.legendCallback(this);\n    },\n\n    /**\n     * @private\n     */\n    destroyDatasetMeta: function destroyDatasetMeta(datasetIndex) {\n      var id = this.id;\n      var dataset = this.data.datasets[datasetIndex];\n      var meta = dataset._meta && dataset._meta[id];\n\n      if (meta) {\n        meta.controller.destroy();\n        delete dataset._meta[id];\n      }\n    },\n    destroy: function destroy() {\n      var me = this;\n      var canvas = me.canvas;\n      var i, ilen;\n      me.stop(); // dataset controllers need to cleanup associated data\n\n      for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n        me.destroyDatasetMeta(i);\n      }\n\n      if (canvas) {\n        me.unbindEvents();\n        helpers$1.canvas.clear(me);\n        platform.releaseContext(me.ctx);\n        me.canvas = null;\n        me.ctx = null;\n      }\n\n      core_plugins.notify(me, 'destroy');\n      delete Chart.instances[me.id];\n    },\n    toBase64Image: function toBase64Image() {\n      return this.canvas.toDataURL.apply(this.canvas, arguments);\n    },\n    initToolTip: function initToolTip() {\n      var me = this;\n      me.tooltip = new core_tooltip({\n        _chart: me,\n        _chartInstance: me,\n        // deprecated, backward compatibility\n        _data: me.data,\n        _options: me.options.tooltips\n      }, me);\n    },\n\n    /**\n     * @private\n     */\n    bindEvents: function bindEvents() {\n      var me = this;\n      var listeners = me._listeners = {};\n\n      var listener = function listener() {\n        me.eventHandler.apply(me, arguments);\n      };\n\n      helpers$1.each(me.options.events, function (type) {\n        platform.addEventListener(me, type, listener);\n        listeners[type] = listener;\n      }); // Elements used to detect size change should not be injected for non responsive charts.\n      // See https://github.com/chartjs/Chart.js/issues/2210\n\n      if (me.options.responsive) {\n        listener = function listener() {\n          me.resize();\n        };\n\n        platform.addEventListener(me, 'resize', listener);\n        listeners.resize = listener;\n      }\n    },\n\n    /**\n     * @private\n     */\n    unbindEvents: function unbindEvents() {\n      var me = this;\n      var listeners = me._listeners;\n\n      if (!listeners) {\n        return;\n      }\n\n      delete me._listeners;\n      helpers$1.each(listeners, function (listener, type) {\n        platform.removeEventListener(me, type, listener);\n      });\n    },\n    updateHoverStyle: function updateHoverStyle(elements, mode, enabled) {\n      var method = enabled ? 'setHoverStyle' : 'removeHoverStyle';\n      var element, i, ilen;\n\n      for (i = 0, ilen = elements.length; i < ilen; ++i) {\n        element = elements[i];\n\n        if (element) {\n          this.getDatasetMeta(element._datasetIndex).controller[method](element);\n        }\n      }\n    },\n\n    /**\n     * @private\n     */\n    eventHandler: function eventHandler(e) {\n      var me = this;\n      var tooltip = me.tooltip;\n\n      if (core_plugins.notify(me, 'beforeEvent', [e]) === false) {\n        return;\n      } // Buffer any update calls so that renders do not occur\n\n\n      me._bufferedRender = true;\n      me._bufferedRequest = null;\n      var changed = me.handleEvent(e); // for smooth tooltip animations issue #4989\n      // the tooltip should be the source of change\n      // Animation check workaround:\n      // tooltip._start will be null when tooltip isn't animating\n\n      if (tooltip) {\n        changed = tooltip._start ? tooltip.handleEvent(e) : changed | tooltip.handleEvent(e);\n      }\n\n      core_plugins.notify(me, 'afterEvent', [e]);\n      var bufferedRequest = me._bufferedRequest;\n\n      if (bufferedRequest) {\n        // If we have an update that was triggered, we need to do a normal render\n        me.render(bufferedRequest);\n      } else if (changed && !me.animating) {\n        // If entering, leaving, or changing elements, animate the change via pivot\n        me.stop(); // We only need to render at this point. Updating will cause scales to be\n        // recomputed generating flicker & using more memory than necessary.\n\n        me.render({\n          duration: me.options.hover.animationDuration,\n          lazy: true\n        });\n      }\n\n      me._bufferedRender = false;\n      me._bufferedRequest = null;\n      return me;\n    },\n\n    /**\n     * Handle an event\n     * @private\n     * @param {IEvent} event the event to handle\n     * @return {boolean} true if the chart needs to re-render\n     */\n    handleEvent: function handleEvent(e) {\n      var me = this;\n      var options = me.options || {};\n      var hoverOptions = options.hover;\n      var changed = false;\n      me.lastActive = me.lastActive || []; // Find Active Elements for hover and tooltips\n\n      if (e.type === 'mouseout') {\n        me.active = [];\n      } else {\n        me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);\n      } // Invoke onHover hook\n      // Need to call with native event here to not break backwards compatibility\n\n\n      helpers$1.callback(options.onHover || options.hover.onHover, [e.native, me.active], me);\n\n      if (e.type === 'mouseup' || e.type === 'click') {\n        if (options.onClick) {\n          // Use e.native here for backwards compatibility\n          options.onClick.call(me, e.native, me.active);\n        }\n      } // Remove styling for last active (even if it may still be active)\n\n\n      if (me.lastActive.length) {\n        me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);\n      } // Built in hover styling\n\n\n      if (me.active.length && hoverOptions.mode) {\n        me.updateHoverStyle(me.active, hoverOptions.mode, true);\n      }\n\n      changed = !helpers$1.arrayEquals(me.active, me.lastActive); // Remember Last Actives\n\n      me.lastActive = me.active;\n      return changed;\n    }\n  });\n  /**\n   * NOTE(SB) We actually don't use this container anymore but we need to keep it\n   * for backward compatibility. Though, it can still be useful for plugins that\n   * would need to work on multiple charts?!\n   */\n\n  Chart.instances = {};\n  var core_controller = Chart; // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, use Chart instead.\n   * @class Chart.Controller\n   * @deprecated since version 2.6\n   * @todo remove at version 3\n   * @private\n   */\n\n  Chart.Controller = Chart;\n  /**\n   * Provided for backward compatibility, not available anymore.\n   * @namespace Chart\n   * @deprecated since version 2.8\n   * @todo remove at version 3\n   * @private\n   */\n\n  Chart.types = {};\n  /**\n   * Provided for backward compatibility, not available anymore.\n   * @namespace Chart.helpers.configMerge\n   * @deprecated since version 2.8.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers$1.configMerge = mergeConfig;\n  /**\n   * Provided for backward compatibility, not available anymore.\n   * @namespace Chart.helpers.scaleMerge\n   * @deprecated since version 2.8.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  helpers$1.scaleMerge = mergeScaleConfig;\n\n  var core_helpers = function core_helpers() {\n    // -- Basic js utility methods\n    helpers$1.where = function (collection, filterCallback) {\n      if (helpers$1.isArray(collection) && Array.prototype.filter) {\n        return collection.filter(filterCallback);\n      }\n\n      var filtered = [];\n      helpers$1.each(collection, function (item) {\n        if (filterCallback(item)) {\n          filtered.push(item);\n        }\n      });\n      return filtered;\n    };\n\n    helpers$1.findIndex = Array.prototype.findIndex ? function (array, callback, scope) {\n      return array.findIndex(callback, scope);\n    } : function (array, callback, scope) {\n      scope = scope === undefined ? array : scope;\n\n      for (var i = 0, ilen = array.length; i < ilen; ++i) {\n        if (callback.call(scope, array[i], i, array)) {\n          return i;\n        }\n      }\n\n      return -1;\n    };\n\n    helpers$1.findNextWhere = function (arrayToSearch, filterCallback, startIndex) {\n      // Default to start of the array\n      if (helpers$1.isNullOrUndef(startIndex)) {\n        startIndex = -1;\n      }\n\n      for (var i = startIndex + 1; i < arrayToSearch.length; i++) {\n        var currentItem = arrayToSearch[i];\n\n        if (filterCallback(currentItem)) {\n          return currentItem;\n        }\n      }\n    };\n\n    helpers$1.findPreviousWhere = function (arrayToSearch, filterCallback, startIndex) {\n      // Default to end of the array\n      if (helpers$1.isNullOrUndef(startIndex)) {\n        startIndex = arrayToSearch.length;\n      }\n\n      for (var i = startIndex - 1; i >= 0; i--) {\n        var currentItem = arrayToSearch[i];\n\n        if (filterCallback(currentItem)) {\n          return currentItem;\n        }\n      }\n    }; // -- Math methods\n\n\n    helpers$1.isNumber = function (n) {\n      return !isNaN(parseFloat(n)) && isFinite(n);\n    };\n\n    helpers$1.almostEquals = function (x, y, epsilon) {\n      return Math.abs(x - y) < epsilon;\n    };\n\n    helpers$1.almostWhole = function (x, epsilon) {\n      var rounded = Math.round(x);\n      return rounded - epsilon < x && rounded + epsilon > x;\n    };\n\n    helpers$1.max = function (array) {\n      return array.reduce(function (max, value) {\n        if (!isNaN(value)) {\n          return Math.max(max, value);\n        }\n\n        return max;\n      }, Number.NEGATIVE_INFINITY);\n    };\n\n    helpers$1.min = function (array) {\n      return array.reduce(function (min, value) {\n        if (!isNaN(value)) {\n          return Math.min(min, value);\n        }\n\n        return min;\n      }, Number.POSITIVE_INFINITY);\n    };\n\n    helpers$1.sign = Math.sign ? function (x) {\n      return Math.sign(x);\n    } : function (x) {\n      x = +x; // convert to a number\n\n      if (x === 0 || isNaN(x)) {\n        return x;\n      }\n\n      return x > 0 ? 1 : -1;\n    };\n    helpers$1.log10 = Math.log10 ? function (x) {\n      return Math.log10(x);\n    } : function (x) {\n      var exponent = Math.log(x) * Math.LOG10E; // Math.LOG10E = 1 / Math.LN10.\n      // Check for whole powers of 10,\n      // which due to floating point rounding error should be corrected.\n\n      var powerOf10 = Math.round(exponent);\n      var isPowerOf10 = x === Math.pow(10, powerOf10);\n      return isPowerOf10 ? powerOf10 : exponent;\n    };\n\n    helpers$1.toRadians = function (degrees) {\n      return degrees * (Math.PI / 180);\n    };\n\n    helpers$1.toDegrees = function (radians) {\n      return radians * (180 / Math.PI);\n    };\n    /**\n     * Returns the number of decimal places\n     * i.e. the number of digits after the decimal point, of the value of this Number.\n     * @param {number} x - A number.\n     * @returns {number} The number of decimal places.\n     * @private\n     */\n\n\n    helpers$1._decimalPlaces = function (x) {\n      if (!helpers$1.isFinite(x)) {\n        return;\n      }\n\n      var e = 1;\n      var p = 0;\n\n      while (Math.round(x * e) / e !== x) {\n        e *= 10;\n        p++;\n      }\n\n      return p;\n    }; // Gets the angle from vertical upright to the point about a centre.\n\n\n    helpers$1.getAngleFromPoint = function (centrePoint, anglePoint) {\n      var distanceFromXCenter = anglePoint.x - centrePoint.x;\n      var distanceFromYCenter = anglePoint.y - centrePoint.y;\n      var radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n      var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n\n      if (angle < -0.5 * Math.PI) {\n        angle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n      }\n\n      return {\n        angle: angle,\n        distance: radialDistanceFromCenter\n      };\n    };\n\n    helpers$1.distanceBetweenPoints = function (pt1, pt2) {\n      return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n    };\n    /**\n     * Provided for backward compatibility, not available anymore\n     * @function Chart.helpers.aliasPixel\n     * @deprecated since version 2.8.0\n     * @todo remove at version 3\n     */\n\n\n    helpers$1.aliasPixel = function (pixelWidth) {\n      return pixelWidth % 2 === 0 ? 0 : 0.5;\n    };\n    /**\n     * Returns the aligned pixel value to avoid anti-aliasing blur\n     * @param {Chart} chart - The chart instance.\n     * @param {number} pixel - A pixel value.\n     * @param {number} width - The width of the element.\n     * @returns {number} The aligned pixel value.\n     * @private\n     */\n\n\n    helpers$1._alignPixel = function (chart, pixel, width) {\n      var devicePixelRatio = chart.currentDevicePixelRatio;\n      var halfWidth = width / 2;\n      return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n    };\n\n    helpers$1.splineCurve = function (firstPoint, middlePoint, afterPoint, t) {\n      // Props to Rob Spencer at scaled innovation for his post on splining between points\n      // http://scaledinnovation.com/analytics/splines/aboutSplines.html\n      // This function must also respect \"skipped\" points\n      var previous = firstPoint.skip ? middlePoint : firstPoint;\n      var current = middlePoint;\n      var next = afterPoint.skip ? middlePoint : afterPoint;\n      var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));\n      var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));\n      var s01 = d01 / (d01 + d12);\n      var s12 = d12 / (d01 + d12); // If all points are the same, s01 & s02 will be inf\n\n      s01 = isNaN(s01) ? 0 : s01;\n      s12 = isNaN(s12) ? 0 : s12;\n      var fa = t * s01; // scaling factor for triangle Ta\n\n      var fb = t * s12;\n      return {\n        previous: {\n          x: current.x - fa * (next.x - previous.x),\n          y: current.y - fa * (next.y - previous.y)\n        },\n        next: {\n          x: current.x + fb * (next.x - previous.x),\n          y: current.y + fb * (next.y - previous.y)\n        }\n      };\n    };\n\n    helpers$1.EPSILON = Number.EPSILON || 1e-14;\n\n    helpers$1.splineCurveMonotone = function (points) {\n      // This function calculates Bézier control points in a similar way than |splineCurve|,\n      // but preserves monotonicity of the provided data and ensures no local extremums are added\n      // between the dataset discrete points due to the interpolation.\n      // See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n      var pointsWithTangents = (points || []).map(function (point) {\n        return {\n          model: point._model,\n          deltaK: 0,\n          mK: 0\n        };\n      }); // Calculate slopes (deltaK) and initialize tangents (mK)\n\n      var pointsLen = pointsWithTangents.length;\n      var i, pointBefore, pointCurrent, pointAfter;\n\n      for (i = 0; i < pointsLen; ++i) {\n        pointCurrent = pointsWithTangents[i];\n\n        if (pointCurrent.model.skip) {\n          continue;\n        }\n\n        pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;\n        pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;\n\n        if (pointAfter && !pointAfter.model.skip) {\n          var slopeDeltaX = pointAfter.model.x - pointCurrent.model.x; // In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n\n          pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;\n        }\n\n        if (!pointBefore || pointBefore.model.skip) {\n          pointCurrent.mK = pointCurrent.deltaK;\n        } else if (!pointAfter || pointAfter.model.skip) {\n          pointCurrent.mK = pointBefore.deltaK;\n        } else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {\n          pointCurrent.mK = 0;\n        } else {\n          pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;\n        }\n      } // Adjust tangents to ensure monotonic properties\n\n\n      var alphaK, betaK, tauK, squaredMagnitude;\n\n      for (i = 0; i < pointsLen - 1; ++i) {\n        pointCurrent = pointsWithTangents[i];\n        pointAfter = pointsWithTangents[i + 1];\n\n        if (pointCurrent.model.skip || pointAfter.model.skip) {\n          continue;\n        }\n\n        if (helpers$1.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {\n          pointCurrent.mK = pointAfter.mK = 0;\n          continue;\n        }\n\n        alphaK = pointCurrent.mK / pointCurrent.deltaK;\n        betaK = pointAfter.mK / pointCurrent.deltaK;\n        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n\n        if (squaredMagnitude <= 9) {\n          continue;\n        }\n\n        tauK = 3 / Math.sqrt(squaredMagnitude);\n        pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;\n        pointAfter.mK = betaK * tauK * pointCurrent.deltaK;\n      } // Compute control points\n\n\n      var deltaX;\n\n      for (i = 0; i < pointsLen; ++i) {\n        pointCurrent = pointsWithTangents[i];\n\n        if (pointCurrent.model.skip) {\n          continue;\n        }\n\n        pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;\n        pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;\n\n        if (pointBefore && !pointBefore.model.skip) {\n          deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;\n          pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;\n          pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;\n        }\n\n        if (pointAfter && !pointAfter.model.skip) {\n          deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;\n          pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;\n          pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;\n        }\n      }\n    };\n\n    helpers$1.nextItem = function (collection, index, loop) {\n      if (loop) {\n        return index >= collection.length - 1 ? collection[0] : collection[index + 1];\n      }\n\n      return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];\n    };\n\n    helpers$1.previousItem = function (collection, index, loop) {\n      if (loop) {\n        return index <= 0 ? collection[collection.length - 1] : collection[index - 1];\n      }\n\n      return index <= 0 ? collection[0] : collection[index - 1];\n    }; // Implementation of the nice number algorithm used in determining where axis labels will go\n\n\n    helpers$1.niceNum = function (range, round) {\n      var exponent = Math.floor(helpers$1.log10(range));\n      var fraction = range / Math.pow(10, exponent);\n      var niceFraction;\n\n      if (round) {\n        if (fraction < 1.5) {\n          niceFraction = 1;\n        } else if (fraction < 3) {\n          niceFraction = 2;\n        } else if (fraction < 7) {\n          niceFraction = 5;\n        } else {\n          niceFraction = 10;\n        }\n      } else if (fraction <= 1.0) {\n        niceFraction = 1;\n      } else if (fraction <= 2) {\n        niceFraction = 2;\n      } else if (fraction <= 5) {\n        niceFraction = 5;\n      } else {\n        niceFraction = 10;\n      }\n\n      return niceFraction * Math.pow(10, exponent);\n    }; // Request animation polyfill - https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/\n\n\n    helpers$1.requestAnimFrame = function () {\n      if (typeof window === 'undefined') {\n        return function (callback) {\n          callback();\n        };\n      }\n\n      return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n        return window.setTimeout(callback, 1000 / 60);\n      };\n    }(); // -- DOM methods\n\n\n    helpers$1.getRelativePosition = function (evt, chart) {\n      var mouseX, mouseY;\n      var e = evt.originalEvent || evt;\n      var canvas = evt.target || evt.srcElement;\n      var boundingRect = canvas.getBoundingClientRect();\n      var touches = e.touches;\n\n      if (touches && touches.length > 0) {\n        mouseX = touches[0].clientX;\n        mouseY = touches[0].clientY;\n      } else {\n        mouseX = e.clientX;\n        mouseY = e.clientY;\n      } // Scale mouse coordinates into canvas coordinates\n      // by following the pattern laid out by 'jerryj' in the comments of\n      // https://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/\n\n\n      var paddingLeft = parseFloat(helpers$1.getStyle(canvas, 'padding-left'));\n      var paddingTop = parseFloat(helpers$1.getStyle(canvas, 'padding-top'));\n      var paddingRight = parseFloat(helpers$1.getStyle(canvas, 'padding-right'));\n      var paddingBottom = parseFloat(helpers$1.getStyle(canvas, 'padding-bottom'));\n      var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;\n      var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom; // We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However\n      // the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here\n\n      mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / width * canvas.width / chart.currentDevicePixelRatio);\n      mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / height * canvas.height / chart.currentDevicePixelRatio);\n      return {\n        x: mouseX,\n        y: mouseY\n      };\n    }; // Private helper function to convert max-width/max-height values that may be percentages into a number\n\n\n    function parseMaxStyle(styleValue, node, parentProperty) {\n      var valueInPixels;\n\n      if (typeof styleValue === 'string') {\n        valueInPixels = parseInt(styleValue, 10);\n\n        if (styleValue.indexOf('%') !== -1) {\n          // percentage * size in dimension\n          valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n        }\n      } else {\n        valueInPixels = styleValue;\n      }\n\n      return valueInPixels;\n    }\n    /**\n     * Returns if the given value contains an effective constraint.\n     * @private\n     */\n\n\n    function isConstrainedValue(value) {\n      return value !== undefined && value !== null && value !== 'none';\n    }\n    /**\n     * Returns the max width or height of the given DOM node in a cross-browser compatible fashion\n     * @param {HTMLElement} domNode - the node to check the constraint on\n     * @param {string} maxStyle - the style that defines the maximum for the direction we are using ('max-width' / 'max-height')\n     * @param {string} percentageProperty - property of parent to use when calculating width as a percentage\n     * @see {@link https://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser}\n     */\n\n\n    function getConstraintDimension(domNode, maxStyle, percentageProperty) {\n      var view = document.defaultView;\n\n      var parentNode = helpers$1._getParentNode(domNode);\n\n      var constrainedNode = view.getComputedStyle(domNode)[maxStyle];\n      var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];\n      var hasCNode = isConstrainedValue(constrainedNode);\n      var hasCContainer = isConstrainedValue(constrainedContainer);\n      var infinity = Number.POSITIVE_INFINITY;\n\n      if (hasCNode || hasCContainer) {\n        return Math.min(hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity, hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);\n      }\n\n      return 'none';\n    } // returns Number or undefined if no constraint\n\n\n    helpers$1.getConstraintWidth = function (domNode) {\n      return getConstraintDimension(domNode, 'max-width', 'clientWidth');\n    }; // returns Number or undefined if no constraint\n\n\n    helpers$1.getConstraintHeight = function (domNode) {\n      return getConstraintDimension(domNode, 'max-height', 'clientHeight');\n    };\n    /**\n     * @private\n    \t */\n\n\n    helpers$1._calculatePadding = function (container, padding, parentDimension) {\n      padding = helpers$1.getStyle(container, padding);\n      return padding.indexOf('%') > -1 ? parentDimension * parseInt(padding, 10) / 100 : parseInt(padding, 10);\n    };\n    /**\n     * @private\n     */\n\n\n    helpers$1._getParentNode = function (domNode) {\n      var parent = domNode.parentNode;\n\n      if (parent && parent.toString() === '[object ShadowRoot]') {\n        parent = parent.host;\n      }\n\n      return parent;\n    };\n\n    helpers$1.getMaximumWidth = function (domNode) {\n      var container = helpers$1._getParentNode(domNode);\n\n      if (!container) {\n        return domNode.clientWidth;\n      }\n\n      var clientWidth = container.clientWidth;\n\n      var paddingLeft = helpers$1._calculatePadding(container, 'padding-left', clientWidth);\n\n      var paddingRight = helpers$1._calculatePadding(container, 'padding-right', clientWidth);\n\n      var w = clientWidth - paddingLeft - paddingRight;\n      var cw = helpers$1.getConstraintWidth(domNode);\n      return isNaN(cw) ? w : Math.min(w, cw);\n    };\n\n    helpers$1.getMaximumHeight = function (domNode) {\n      var container = helpers$1._getParentNode(domNode);\n\n      if (!container) {\n        return domNode.clientHeight;\n      }\n\n      var clientHeight = container.clientHeight;\n\n      var paddingTop = helpers$1._calculatePadding(container, 'padding-top', clientHeight);\n\n      var paddingBottom = helpers$1._calculatePadding(container, 'padding-bottom', clientHeight);\n\n      var h = clientHeight - paddingTop - paddingBottom;\n      var ch = helpers$1.getConstraintHeight(domNode);\n      return isNaN(ch) ? h : Math.min(h, ch);\n    };\n\n    helpers$1.getStyle = function (el, property) {\n      return el.currentStyle ? el.currentStyle[property] : document.defaultView.getComputedStyle(el, null).getPropertyValue(property);\n    };\n\n    helpers$1.retinaScale = function (chart, forceRatio) {\n      var pixelRatio = chart.currentDevicePixelRatio = forceRatio || typeof window !== 'undefined' && window.devicePixelRatio || 1;\n\n      if (pixelRatio === 1) {\n        return;\n      }\n\n      var canvas = chart.canvas;\n      var height = chart.height;\n      var width = chart.width;\n      canvas.height = height * pixelRatio;\n      canvas.width = width * pixelRatio;\n      chart.ctx.scale(pixelRatio, pixelRatio); // If no style has been set on the canvas, the render size is used as display size,\n      // making the chart visually bigger, so let's enforce it to the \"correct\" values.\n      // See https://github.com/chartjs/Chart.js/issues/3575\n\n      if (!canvas.style.height && !canvas.style.width) {\n        canvas.style.height = height + 'px';\n        canvas.style.width = width + 'px';\n      }\n    }; // -- Canvas methods\n\n\n    helpers$1.fontString = function (pixelSize, fontStyle, fontFamily) {\n      return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n    };\n\n    helpers$1.longestText = function (ctx, font, arrayOfThings, cache) {\n      cache = cache || {};\n      var data = cache.data = cache.data || {};\n      var gc = cache.garbageCollect = cache.garbageCollect || [];\n\n      if (cache.font !== font) {\n        data = cache.data = {};\n        gc = cache.garbageCollect = [];\n        cache.font = font;\n      }\n\n      ctx.font = font;\n      var longest = 0;\n      helpers$1.each(arrayOfThings, function (thing) {\n        // Undefined strings and arrays should not be measured\n        if (thing !== undefined && thing !== null && helpers$1.isArray(thing) !== true) {\n          longest = helpers$1.measureText(ctx, data, gc, longest, thing);\n        } else if (helpers$1.isArray(thing)) {\n          // if it is an array lets measure each element\n          // to do maybe simplify this function a bit so we can do this more recursively?\n          helpers$1.each(thing, function (nestedThing) {\n            // Undefined strings and arrays should not be measured\n            if (nestedThing !== undefined && nestedThing !== null && !helpers$1.isArray(nestedThing)) {\n              longest = helpers$1.measureText(ctx, data, gc, longest, nestedThing);\n            }\n          });\n        }\n      });\n      var gcLen = gc.length / 2;\n\n      if (gcLen > arrayOfThings.length) {\n        for (var i = 0; i < gcLen; i++) {\n          delete data[gc[i]];\n        }\n\n        gc.splice(0, gcLen);\n      }\n\n      return longest;\n    };\n\n    helpers$1.measureText = function (ctx, data, gc, longest, string) {\n      var textWidth = data[string];\n\n      if (!textWidth) {\n        textWidth = data[string] = ctx.measureText(string).width;\n        gc.push(string);\n      }\n\n      if (textWidth > longest) {\n        longest = textWidth;\n      }\n\n      return longest;\n    };\n\n    helpers$1.numberOfLabelLines = function (arrayOfThings) {\n      var numberOfLines = 1;\n      helpers$1.each(arrayOfThings, function (thing) {\n        if (helpers$1.isArray(thing)) {\n          if (thing.length > numberOfLines) {\n            numberOfLines = thing.length;\n          }\n        }\n      });\n      return numberOfLines;\n    };\n\n    helpers$1.color = !chartjsColor ? function (value) {\n      console.error('Color.js not found!');\n      return value;\n    } : function (value) {\n      /* global CanvasGradient */\n      if (value instanceof CanvasGradient) {\n        value = core_defaults.global.defaultColor;\n      }\n\n      return chartjsColor(value);\n    };\n\n    helpers$1.getHoverColor = function (colorValue) {\n      /* global CanvasPattern */\n      return colorValue instanceof CanvasPattern || colorValue instanceof CanvasGradient ? colorValue : helpers$1.color(colorValue).saturate(0.5).darken(0.1).rgbString();\n    };\n  };\n\n  function abstract() {\n    throw new Error('This method is not implemented: either no adapter can ' + 'be found or an incomplete integration was provided.');\n  }\n  /**\n   * Date adapter (current used by the time scale)\n   * @namespace Chart._adapters._date\n   * @memberof Chart._adapters\n   * @private\n   */\n\n  /**\n   * Currently supported unit string values.\n   * @typedef {('millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year')}\n   * @memberof Chart._adapters._date\n   * @name Unit\n   */\n\n  /**\n   * @class\n   */\n\n\n  function DateAdapter(options) {\n    this.options = options || {};\n  }\n\n  helpers$1.extend(DateAdapter.prototype,\n  /** @lends DateAdapter */\n  {\n    /**\n     * Returns a map of time formats for the supported formatting units defined\n     * in Unit as well as 'datetime' representing a detailed date/time string.\n     * @returns {{string: string}}\n     */\n    formats: abstract,\n\n    /**\n     * Parses the given `value` and return the associated timestamp.\n     * @param {any} value - the value to parse (usually comes from the data)\n     * @param {string} [format] - the expected data format\n     * @returns {(number|null)}\n     * @function\n     */\n    parse: abstract,\n\n    /**\n     * Returns the formatted date in the specified `format` for a given `timestamp`.\n     * @param {number} timestamp - the timestamp to format\n     * @param {string} format - the date/time token\n     * @return {string}\n     * @function\n     */\n    format: abstract,\n\n    /**\n     * Adds the specified `amount` of `unit` to the given `timestamp`.\n     * @param {number} timestamp - the input timestamp\n     * @param {number} amount - the amount to add\n     * @param {Unit} unit - the unit as string\n     * @return {number}\n     * @function\n     */\n    add: abstract,\n\n    /**\n     * Returns the number of `unit` between the given timestamps.\n     * @param {number} max - the input timestamp (reference)\n     * @param {number} min - the timestamp to substract\n     * @param {Unit} unit - the unit as string\n     * @return {number}\n     * @function\n     */\n    diff: abstract,\n\n    /**\n     * Returns start of `unit` for the given `timestamp`.\n     * @param {number} timestamp - the input timestamp\n     * @param {Unit} unit - the unit as string\n     * @param {number} [weekday] - the ISO day of the week with 1 being Monday\n     * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n     * @function\n     */\n    startOf: abstract,\n\n    /**\n     * Returns end of `unit` for the given `timestamp`.\n     * @param {number} timestamp - the input timestamp\n     * @param {Unit} unit - the unit as string\n     * @function\n     */\n    endOf: abstract,\n    // DEPRECATIONS\n\n    /**\n     * Provided for backward compatibility for scale.getValueForPixel(),\n     * this method should be overridden only by the moment adapter.\n     * @deprecated since version 2.8.0\n     * @todo remove at version 3\n     * @private\n     */\n    _create: function _create(value) {\n      return value;\n    }\n  });\n\n  DateAdapter.override = function (members) {\n    helpers$1.extend(DateAdapter.prototype, members);\n  };\n\n  var _date = DateAdapter;\n  var core_adapters = {\n    _date: _date\n  };\n  /**\n   * Namespace to hold static tick generation functions\n   * @namespace Chart.Ticks\n   */\n\n  var core_ticks = {\n    /**\n     * Namespace to hold formatters for different types of ticks\n     * @namespace Chart.Ticks.formatters\n     */\n    formatters: {\n      /**\n       * Formatter for value labels\n       * @method Chart.Ticks.formatters.values\n       * @param value the value to display\n       * @return {string|string[]} the label to display\n       */\n      values: function values(value) {\n        return helpers$1.isArray(value) ? value : '' + value;\n      },\n\n      /**\n       * Formatter for linear numeric ticks\n       * @method Chart.Ticks.formatters.linear\n       * @param tickValue {number} the value to be formatted\n       * @param index {number} the position of the tickValue parameter in the ticks array\n       * @param ticks {number[]} the list of ticks being converted\n       * @return {string} string representation of the tickValue parameter\n       */\n      linear: function linear(tickValue, index, ticks) {\n        // If we have lots of ticks, don't use the ones\n        var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0]; // If we have a number like 2.5 as the delta, figure out how many decimal places we need\n\n        if (Math.abs(delta) > 1) {\n          if (tickValue !== Math.floor(tickValue)) {\n            // not an integer\n            delta = tickValue - Math.floor(tickValue);\n          }\n        }\n\n        var logDelta = helpers$1.log10(Math.abs(delta));\n        var tickString = '';\n\n        if (tickValue !== 0) {\n          var maxTick = Math.max(Math.abs(ticks[0]), Math.abs(ticks[ticks.length - 1]));\n\n          if (maxTick < 1e-4) {\n            // all ticks are small numbers; use scientific notation\n            var logTick = helpers$1.log10(Math.abs(tickValue));\n            tickString = tickValue.toExponential(Math.floor(logTick) - Math.floor(logDelta));\n          } else {\n            var numDecimal = -1 * Math.floor(logDelta);\n            numDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places\n\n            tickString = tickValue.toFixed(numDecimal);\n          }\n        } else {\n          tickString = '0'; // never show decimal places for 0\n        }\n\n        return tickString;\n      },\n      logarithmic: function logarithmic(tickValue, index, ticks) {\n        var remain = tickValue / Math.pow(10, Math.floor(helpers$1.log10(tickValue)));\n\n        if (tickValue === 0) {\n          return '0';\n        } else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {\n          return tickValue.toExponential();\n        }\n\n        return '';\n      }\n    }\n  };\n  var valueOrDefault$9 = helpers$1.valueOrDefault;\n  var valueAtIndexOrDefault = helpers$1.valueAtIndexOrDefault;\n\n  core_defaults._set('scale', {\n    display: true,\n    position: 'left',\n    offset: false,\n    // grid line settings\n    gridLines: {\n      display: true,\n      color: 'rgba(0, 0, 0, 0.1)',\n      lineWidth: 1,\n      drawBorder: true,\n      drawOnChartArea: true,\n      drawTicks: true,\n      tickMarkLength: 10,\n      zeroLineWidth: 1,\n      zeroLineColor: 'rgba(0,0,0,0.25)',\n      zeroLineBorderDash: [],\n      zeroLineBorderDashOffset: 0.0,\n      offsetGridLines: false,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n    // scale label\n    scaleLabel: {\n      // display property\n      display: false,\n      // actual label\n      labelString: '',\n      // top/bottom padding\n      padding: {\n        top: 4,\n        bottom: 4\n      }\n    },\n    // label settings\n    ticks: {\n      beginAtZero: false,\n      minRotation: 0,\n      maxRotation: 50,\n      mirror: false,\n      padding: 0,\n      reverse: false,\n      display: true,\n      autoSkip: true,\n      autoSkipPadding: 0,\n      labelOffset: 0,\n      // We pass through arrays to be rendered as multiline labels, we convert Others to strings here.\n      callback: core_ticks.formatters.values,\n      minor: {},\n      major: {}\n    }\n  });\n\n  function labelsFromTicks(ticks) {\n    var labels = [];\n    var i, ilen;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      labels.push(ticks[i].label);\n    }\n\n    return labels;\n  }\n\n  function getPixelForGridLine(scale, index, offsetGridLines) {\n    var lineValue = scale.getPixelForTick(index);\n\n    if (offsetGridLines) {\n      if (scale.getTicks().length === 1) {\n        lineValue -= scale.isHorizontal() ? Math.max(lineValue - scale.left, scale.right - lineValue) : Math.max(lineValue - scale.top, scale.bottom - lineValue);\n      } else if (index === 0) {\n        lineValue -= (scale.getPixelForTick(1) - lineValue) / 2;\n      } else {\n        lineValue -= (lineValue - scale.getPixelForTick(index - 1)) / 2;\n      }\n    }\n\n    return lineValue;\n  }\n\n  function computeTextSize(context, tick, font) {\n    return helpers$1.isArray(tick) ? helpers$1.longestText(context, font, tick) : context.measureText(tick).width;\n  }\n\n  var core_scale = core_element.extend({\n    /**\n     * Get the padding needed for the scale\n     * @method getPadding\n     * @private\n     * @returns {Padding} the necessary padding\n     */\n    getPadding: function getPadding() {\n      var me = this;\n      return {\n        left: me.paddingLeft || 0,\n        top: me.paddingTop || 0,\n        right: me.paddingRight || 0,\n        bottom: me.paddingBottom || 0\n      };\n    },\n\n    /**\n     * Returns the scale tick objects ({label, major})\n     * @since 2.7\n     */\n    getTicks: function getTicks() {\n      return this._ticks;\n    },\n    // These methods are ordered by lifecyle. Utilities then follow.\n    // Any function defined here is inherited by all scale types.\n    // Any function can be extended by the scale type\n    mergeTicksOptions: function mergeTicksOptions() {\n      var ticks = this.options.ticks;\n\n      if (ticks.minor === false) {\n        ticks.minor = {\n          display: false\n        };\n      }\n\n      if (ticks.major === false) {\n        ticks.major = {\n          display: false\n        };\n      }\n\n      for (var key in ticks) {\n        if (key !== 'major' && key !== 'minor') {\n          if (typeof ticks.minor[key] === 'undefined') {\n            ticks.minor[key] = ticks[key];\n          }\n\n          if (typeof ticks.major[key] === 'undefined') {\n            ticks.major[key] = ticks[key];\n          }\n        }\n      }\n    },\n    beforeUpdate: function beforeUpdate() {\n      helpers$1.callback(this.options.beforeUpdate, [this]);\n    },\n    update: function update(maxWidth, maxHeight, margins) {\n      var me = this;\n      var i, ilen, labels, label, ticks, tick; // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\n      me.beforeUpdate(); // Absorb the master measurements\n\n      me.maxWidth = maxWidth;\n      me.maxHeight = maxHeight;\n      me.margins = helpers$1.extend({\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0\n      }, margins);\n      me._maxLabelLines = 0;\n      me.longestLabelWidth = 0;\n      me.longestTextCache = me.longestTextCache || {}; // Dimensions\n\n      me.beforeSetDimensions();\n      me.setDimensions();\n      me.afterSetDimensions(); // Data min/max\n\n      me.beforeDataLimits();\n      me.determineDataLimits();\n      me.afterDataLimits(); // Ticks - `this.ticks` is now DEPRECATED!\n      // Internal ticks are now stored as objects in the PRIVATE `this._ticks` member\n      // and must not be accessed directly from outside this class. `this.ticks` being\n      // around for long time and not marked as private, we can't change its structure\n      // without unexpected breaking changes. If you need to access the scale ticks,\n      // use scale.getTicks() instead.\n\n      me.beforeBuildTicks(); // New implementations should return an array of objects but for BACKWARD COMPAT,\n      // we still support no return (`this.ticks` internally set by calling this method).\n\n      ticks = me.buildTicks() || []; // Allow modification of ticks in callback.\n\n      ticks = me.afterBuildTicks(ticks) || ticks;\n      me.beforeTickToLabelConversion(); // New implementations should return the formatted tick labels but for BACKWARD\n      // COMPAT, we still support no return (`this.ticks` internally changed by calling\n      // this method and supposed to contain only string values).\n\n      labels = me.convertTicksToLabels(ticks) || me.ticks;\n      me.afterTickToLabelConversion();\n      me.ticks = labels; // BACKWARD COMPATIBILITY\n      // IMPORTANT: from this point, we consider that `this.ticks` will NEVER change!\n      // BACKWARD COMPAT: synchronize `_ticks` with labels (so potentially `this.ticks`)\n\n      for (i = 0, ilen = labels.length; i < ilen; ++i) {\n        label = labels[i];\n        tick = ticks[i];\n\n        if (!tick) {\n          ticks.push(tick = {\n            label: label,\n            major: false\n          });\n        } else {\n          tick.label = label;\n        }\n      }\n\n      me._ticks = ticks; // Tick Rotation\n\n      me.beforeCalculateTickRotation();\n      me.calculateTickRotation();\n      me.afterCalculateTickRotation(); // Fit\n\n      me.beforeFit();\n      me.fit();\n      me.afterFit(); //\n\n      me.afterUpdate();\n      return me.minSize;\n    },\n    afterUpdate: function afterUpdate() {\n      helpers$1.callback(this.options.afterUpdate, [this]);\n    },\n    //\n    beforeSetDimensions: function beforeSetDimensions() {\n      helpers$1.callback(this.options.beforeSetDimensions, [this]);\n    },\n    setDimensions: function setDimensions() {\n      var me = this; // Set the unconstrained dimension before label rotation\n\n      if (me.isHorizontal()) {\n        // Reset position before calculating rotation\n        me.width = me.maxWidth;\n        me.left = 0;\n        me.right = me.width;\n      } else {\n        me.height = me.maxHeight; // Reset position before calculating rotation\n\n        me.top = 0;\n        me.bottom = me.height;\n      } // Reset padding\n\n\n      me.paddingLeft = 0;\n      me.paddingTop = 0;\n      me.paddingRight = 0;\n      me.paddingBottom = 0;\n    },\n    afterSetDimensions: function afterSetDimensions() {\n      helpers$1.callback(this.options.afterSetDimensions, [this]);\n    },\n    // Data limits\n    beforeDataLimits: function beforeDataLimits() {\n      helpers$1.callback(this.options.beforeDataLimits, [this]);\n    },\n    determineDataLimits: helpers$1.noop,\n    afterDataLimits: function afterDataLimits() {\n      helpers$1.callback(this.options.afterDataLimits, [this]);\n    },\n    //\n    beforeBuildTicks: function beforeBuildTicks() {\n      helpers$1.callback(this.options.beforeBuildTicks, [this]);\n    },\n    buildTicks: helpers$1.noop,\n    afterBuildTicks: function afterBuildTicks(ticks) {\n      var me = this; // ticks is empty for old axis implementations here\n\n      if (helpers$1.isArray(ticks) && ticks.length) {\n        return helpers$1.callback(me.options.afterBuildTicks, [me, ticks]);\n      } // Support old implementations (that modified `this.ticks` directly in buildTicks)\n\n\n      me.ticks = helpers$1.callback(me.options.afterBuildTicks, [me, me.ticks]) || me.ticks;\n      return ticks;\n    },\n    beforeTickToLabelConversion: function beforeTickToLabelConversion() {\n      helpers$1.callback(this.options.beforeTickToLabelConversion, [this]);\n    },\n    convertTicksToLabels: function convertTicksToLabels() {\n      var me = this; // Convert ticks to strings\n\n      var tickOpts = me.options.ticks;\n      me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback, this);\n    },\n    afterTickToLabelConversion: function afterTickToLabelConversion() {\n      helpers$1.callback(this.options.afterTickToLabelConversion, [this]);\n    },\n    //\n    beforeCalculateTickRotation: function beforeCalculateTickRotation() {\n      helpers$1.callback(this.options.beforeCalculateTickRotation, [this]);\n    },\n    calculateTickRotation: function calculateTickRotation() {\n      var me = this;\n      var context = me.ctx;\n      var tickOpts = me.options.ticks;\n      var labels = labelsFromTicks(me._ticks); // Get the width of each grid by calculating the difference\n      // between x offsets between 0 and 1.\n\n      var tickFont = helpers$1.options._parseFont(tickOpts);\n\n      context.font = tickFont.string;\n      var labelRotation = tickOpts.minRotation || 0;\n\n      if (labels.length && me.options.display && me.isHorizontal()) {\n        var originalLabelWidth = helpers$1.longestText(context, tickFont.string, labels, me.longestTextCache);\n        var labelWidth = originalLabelWidth;\n        var cosRotation, sinRotation; // Allow 3 pixels x2 padding either side for label readability\n\n        var tickWidth = me.getPixelForTick(1) - me.getPixelForTick(0) - 6; // Max label rotation can be set or default to 90 - also act as a loop counter\n\n        while (labelWidth > tickWidth && labelRotation < tickOpts.maxRotation) {\n          var angleRadians = helpers$1.toRadians(labelRotation);\n          cosRotation = Math.cos(angleRadians);\n          sinRotation = Math.sin(angleRadians);\n\n          if (sinRotation * originalLabelWidth > me.maxHeight) {\n            // go back one step\n            labelRotation--;\n            break;\n          }\n\n          labelRotation++;\n          labelWidth = cosRotation * originalLabelWidth;\n        }\n      }\n\n      me.labelRotation = labelRotation;\n    },\n    afterCalculateTickRotation: function afterCalculateTickRotation() {\n      helpers$1.callback(this.options.afterCalculateTickRotation, [this]);\n    },\n    //\n    beforeFit: function beforeFit() {\n      helpers$1.callback(this.options.beforeFit, [this]);\n    },\n    fit: function fit() {\n      var me = this; // Reset\n\n      var minSize = me.minSize = {\n        width: 0,\n        height: 0\n      };\n      var labels = labelsFromTicks(me._ticks);\n      var opts = me.options;\n      var tickOpts = opts.ticks;\n      var scaleLabelOpts = opts.scaleLabel;\n      var gridLineOpts = opts.gridLines;\n\n      var display = me._isVisible();\n\n      var position = opts.position;\n      var isHorizontal = me.isHorizontal();\n      var parseFont = helpers$1.options._parseFont;\n      var tickFont = parseFont(tickOpts);\n      var tickMarkLength = opts.gridLines.tickMarkLength; // Width\n\n      if (isHorizontal) {\n        // subtract the margins to line up with the chartArea if we are a full width scale\n        minSize.width = me.isFullWidth() ? me.maxWidth - me.margins.left - me.margins.right : me.maxWidth;\n      } else {\n        minSize.width = display && gridLineOpts.drawTicks ? tickMarkLength : 0;\n      } // height\n\n\n      if (isHorizontal) {\n        minSize.height = display && gridLineOpts.drawTicks ? tickMarkLength : 0;\n      } else {\n        minSize.height = me.maxHeight; // fill all the height\n      } // Are we showing a title for the scale?\n\n\n      if (scaleLabelOpts.display && display) {\n        var scaleLabelFont = parseFont(scaleLabelOpts);\n        var scaleLabelPadding = helpers$1.options.toPadding(scaleLabelOpts.padding);\n        var deltaHeight = scaleLabelFont.lineHeight + scaleLabelPadding.height;\n\n        if (isHorizontal) {\n          minSize.height += deltaHeight;\n        } else {\n          minSize.width += deltaHeight;\n        }\n      } // Don't bother fitting the ticks if we are not showing the labels\n\n\n      if (tickOpts.display && display) {\n        var largestTextWidth = helpers$1.longestText(me.ctx, tickFont.string, labels, me.longestTextCache);\n        var tallestLabelHeightInLines = helpers$1.numberOfLabelLines(labels);\n        var lineSpace = tickFont.size * 0.5;\n        var tickPadding = me.options.ticks.padding; // Store max number of lines and widest label for _autoSkip\n\n        me._maxLabelLines = tallestLabelHeightInLines;\n        me.longestLabelWidth = largestTextWidth;\n\n        if (isHorizontal) {\n          var angleRadians = helpers$1.toRadians(me.labelRotation);\n          var cosRotation = Math.cos(angleRadians);\n          var sinRotation = Math.sin(angleRadians); // TODO - improve this calculation\n\n          var labelHeight = sinRotation * largestTextWidth + tickFont.lineHeight * tallestLabelHeightInLines + lineSpace; // padding\n\n          minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);\n          me.ctx.font = tickFont.string;\n          var firstLabelWidth = computeTextSize(me.ctx, labels[0], tickFont.string);\n          var lastLabelWidth = computeTextSize(me.ctx, labels[labels.length - 1], tickFont.string);\n          var offsetLeft = me.getPixelForTick(0) - me.left;\n          var offsetRight = me.right - me.getPixelForTick(labels.length - 1);\n          var paddingLeft, paddingRight; // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n          // which means that the right padding is dominated by the font height\n\n          if (me.labelRotation !== 0) {\n            paddingLeft = position === 'bottom' ? cosRotation * firstLabelWidth : cosRotation * lineSpace;\n            paddingRight = position === 'bottom' ? cosRotation * lineSpace : cosRotation * lastLabelWidth;\n          } else {\n            paddingLeft = firstLabelWidth / 2;\n            paddingRight = lastLabelWidth / 2;\n          }\n\n          me.paddingLeft = Math.max(paddingLeft - offsetLeft, 0) + 3; // add 3 px to move away from canvas edges\n\n          me.paddingRight = Math.max(paddingRight - offsetRight, 0) + 3;\n        } else {\n          // A vertical axis is more constrained by the width. Labels are the\n          // dominant factor here, so get that length first and account for padding\n          if (tickOpts.mirror) {\n            largestTextWidth = 0;\n          } else {\n            // use lineSpace for consistency with horizontal axis\n            // tickPadding is not implemented for horizontal\n            largestTextWidth += tickPadding + lineSpace;\n          }\n\n          minSize.width = Math.min(me.maxWidth, minSize.width + largestTextWidth);\n          me.paddingTop = tickFont.size / 2;\n          me.paddingBottom = tickFont.size / 2;\n        }\n      }\n\n      me.handleMargins();\n      me.width = minSize.width;\n      me.height = minSize.height;\n    },\n\n    /**\n     * Handle margins and padding interactions\n     * @private\n     */\n    handleMargins: function handleMargins() {\n      var me = this;\n\n      if (me.margins) {\n        me.paddingLeft = Math.max(me.paddingLeft - me.margins.left, 0);\n        me.paddingTop = Math.max(me.paddingTop - me.margins.top, 0);\n        me.paddingRight = Math.max(me.paddingRight - me.margins.right, 0);\n        me.paddingBottom = Math.max(me.paddingBottom - me.margins.bottom, 0);\n      }\n    },\n    afterFit: function afterFit() {\n      helpers$1.callback(this.options.afterFit, [this]);\n    },\n    // Shared Methods\n    isHorizontal: function isHorizontal() {\n      return this.options.position === 'top' || this.options.position === 'bottom';\n    },\n    isFullWidth: function isFullWidth() {\n      return this.options.fullWidth;\n    },\n    // Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not\n    getRightValue: function getRightValue(rawValue) {\n      // Null and undefined values first\n      if (helpers$1.isNullOrUndef(rawValue)) {\n        return NaN;\n      } // isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values\n\n\n      if ((typeof rawValue === 'number' || rawValue instanceof Number) && !isFinite(rawValue)) {\n        return NaN;\n      } // If it is in fact an object, dive in one more level\n\n\n      if (rawValue) {\n        if (this.isHorizontal()) {\n          if (rawValue.x !== undefined) {\n            return this.getRightValue(rawValue.x);\n          }\n        } else if (rawValue.y !== undefined) {\n          return this.getRightValue(rawValue.y);\n        }\n      } // Value is good, return it\n\n\n      return rawValue;\n    },\n\n    /**\n     * Used to get the value to display in the tooltip for the data at the given index\n     * @param index\n     * @param datasetIndex\n     */\n    getLabelForIndex: helpers$1.noop,\n\n    /**\n     * Returns the location of the given data point. Value can either be an index or a numerical value\n     * The coordinate (0, 0) is at the upper-left corner of the canvas\n     * @param value\n     * @param index\n     * @param datasetIndex\n     */\n    getPixelForValue: helpers$1.noop,\n\n    /**\n     * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n     * The coordinate (0, 0) is at the upper-left corner of the canvas\n     * @param pixel\n     */\n    getValueForPixel: helpers$1.noop,\n\n    /**\n     * Returns the location of the tick at the given index\n     * The coordinate (0, 0) is at the upper-left corner of the canvas\n     */\n    getPixelForTick: function getPixelForTick(index) {\n      var me = this;\n      var offset = me.options.offset;\n\n      if (me.isHorizontal()) {\n        var innerWidth = me.width - (me.paddingLeft + me.paddingRight);\n        var tickWidth = innerWidth / Math.max(me._ticks.length - (offset ? 0 : 1), 1);\n        var pixel = tickWidth * index + me.paddingLeft;\n\n        if (offset) {\n          pixel += tickWidth / 2;\n        }\n\n        var finalVal = me.left + pixel;\n        finalVal += me.isFullWidth() ? me.margins.left : 0;\n        return finalVal;\n      }\n\n      var innerHeight = me.height - (me.paddingTop + me.paddingBottom);\n      return me.top + index * (innerHeight / (me._ticks.length - 1));\n    },\n\n    /**\n     * Utility for getting the pixel location of a percentage of scale\n     * The coordinate (0, 0) is at the upper-left corner of the canvas\n     */\n    getPixelForDecimal: function getPixelForDecimal(decimal) {\n      var me = this;\n\n      if (me.isHorizontal()) {\n        var innerWidth = me.width - (me.paddingLeft + me.paddingRight);\n        var valueOffset = innerWidth * decimal + me.paddingLeft;\n        var finalVal = me.left + valueOffset;\n        finalVal += me.isFullWidth() ? me.margins.left : 0;\n        return finalVal;\n      }\n\n      return me.top + decimal * me.height;\n    },\n\n    /**\n     * Returns the pixel for the minimum chart value\n     * The coordinate (0, 0) is at the upper-left corner of the canvas\n     */\n    getBasePixel: function getBasePixel() {\n      return this.getPixelForValue(this.getBaseValue());\n    },\n    getBaseValue: function getBaseValue() {\n      var me = this;\n      var min = me.min;\n      var max = me.max;\n      return me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    },\n\n    /**\n     * Returns a subset of ticks to be plotted to avoid overlapping labels.\n     * @private\n     */\n    _autoSkip: function _autoSkip(ticks) {\n      var me = this;\n      var isHorizontal = me.isHorizontal();\n      var optionTicks = me.options.ticks.minor;\n      var tickCount = ticks.length;\n      var skipRatio = false;\n      var maxTicks = optionTicks.maxTicksLimit; // Total space needed to display all ticks. First and last ticks are\n      // drawn as their center at end of axis, so tickCount-1\n\n      var ticksLength = me._tickSize() * (tickCount - 1); // Axis length\n\n      var axisLength = isHorizontal ? me.width - (me.paddingLeft + me.paddingRight) : me.height - (me.paddingTop + me.PaddingBottom);\n      var result = [];\n      var i, tick;\n\n      if (ticksLength > axisLength) {\n        skipRatio = 1 + Math.floor(ticksLength / axisLength);\n      } // if they defined a max number of optionTicks,\n      // increase skipRatio until that number is met\n\n\n      if (tickCount > maxTicks) {\n        skipRatio = Math.max(skipRatio, 1 + Math.floor(tickCount / maxTicks));\n      }\n\n      for (i = 0; i < tickCount; i++) {\n        tick = ticks[i];\n\n        if (skipRatio > 1 && i % skipRatio > 0) {\n          // leave tick in place but make sure it's not displayed (#4635)\n          delete tick.label;\n        }\n\n        result.push(tick);\n      }\n\n      return result;\n    },\n\n    /**\n     * @private\n     */\n    _tickSize: function _tickSize() {\n      var me = this;\n      var isHorizontal = me.isHorizontal();\n      var optionTicks = me.options.ticks.minor; // Calculate space needed by label in axis direction.\n\n      var rot = helpers$1.toRadians(me.labelRotation);\n      var cos = Math.abs(Math.cos(rot));\n      var sin = Math.abs(Math.sin(rot));\n      var padding = optionTicks.autoSkipPadding || 0;\n      var w = me.longestLabelWidth + padding || 0;\n\n      var tickFont = helpers$1.options._parseFont(optionTicks);\n\n      var h = me._maxLabelLines * tickFont.lineHeight + padding || 0; // Calculate space needed for 1 tick in axis direction.\n\n      return isHorizontal ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    },\n\n    /**\n     * @private\n     */\n    _isVisible: function _isVisible() {\n      var me = this;\n      var chart = me.chart;\n      var display = me.options.display;\n      var i, ilen, meta;\n\n      if (display !== 'auto') {\n        return !!display;\n      } // When 'auto', the scale is visible if at least one associated dataset is visible.\n\n\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n\n          if (meta.xAxisID === me.id || meta.yAxisID === me.id) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Actually draw the scale on the canvas\n     * @param {object} chartArea - the area of the chart to draw full grid lines on\n     */\n    draw: function draw(chartArea) {\n      var me = this;\n      var options = me.options;\n\n      if (!me._isVisible()) {\n        return;\n      }\n\n      var chart = me.chart;\n      var context = me.ctx;\n      var globalDefaults = core_defaults.global;\n      var defaultFontColor = globalDefaults.defaultFontColor;\n      var optionTicks = options.ticks.minor;\n      var optionMajorTicks = options.ticks.major || optionTicks;\n      var gridLines = options.gridLines;\n      var scaleLabel = options.scaleLabel;\n      var position = options.position;\n      var isRotated = me.labelRotation !== 0;\n      var isMirrored = optionTicks.mirror;\n      var isHorizontal = me.isHorizontal();\n      var parseFont = helpers$1.options._parseFont;\n      var ticks = optionTicks.display && optionTicks.autoSkip ? me._autoSkip(me.getTicks()) : me.getTicks();\n      var tickFontColor = valueOrDefault$9(optionTicks.fontColor, defaultFontColor);\n      var tickFont = parseFont(optionTicks);\n      var lineHeight = tickFont.lineHeight;\n      var majorTickFontColor = valueOrDefault$9(optionMajorTicks.fontColor, defaultFontColor);\n      var majorTickFont = parseFont(optionMajorTicks);\n      var tickPadding = optionTicks.padding;\n      var labelOffset = optionTicks.labelOffset;\n      var tl = gridLines.drawTicks ? gridLines.tickMarkLength : 0;\n      var scaleLabelFontColor = valueOrDefault$9(scaleLabel.fontColor, defaultFontColor);\n      var scaleLabelFont = parseFont(scaleLabel);\n      var scaleLabelPadding = helpers$1.options.toPadding(scaleLabel.padding);\n      var labelRotationRadians = helpers$1.toRadians(me.labelRotation);\n      var itemsToDraw = [];\n      var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;\n      var alignPixel = helpers$1._alignPixel;\n      var borderValue, tickStart, tickEnd;\n\n      if (position === 'top') {\n        borderValue = alignPixel(chart, me.bottom, axisWidth);\n        tickStart = me.bottom - tl;\n        tickEnd = borderValue - axisWidth / 2;\n      } else if (position === 'bottom') {\n        borderValue = alignPixel(chart, me.top, axisWidth);\n        tickStart = borderValue + axisWidth / 2;\n        tickEnd = me.top + tl;\n      } else if (position === 'left') {\n        borderValue = alignPixel(chart, me.right, axisWidth);\n        tickStart = me.right - tl;\n        tickEnd = borderValue - axisWidth / 2;\n      } else {\n        borderValue = alignPixel(chart, me.left, axisWidth);\n        tickStart = borderValue + axisWidth / 2;\n        tickEnd = me.left + tl;\n      }\n\n      var epsilon = 0.0000001; // 0.0000001 is margin in pixels for Accumulated error.\n\n      helpers$1.each(ticks, function (tick, index) {\n        // autoskipper skipped this tick (#4635)\n        if (helpers$1.isNullOrUndef(tick.label)) {\n          return;\n        }\n\n        var label = tick.label;\n        var lineWidth, lineColor, borderDash, borderDashOffset;\n\n        if (index === me.zeroLineIndex && options.offset === gridLines.offsetGridLines) {\n          // Draw the first index specially\n          lineWidth = gridLines.zeroLineWidth;\n          lineColor = gridLines.zeroLineColor;\n          borderDash = gridLines.zeroLineBorderDash || [];\n          borderDashOffset = gridLines.zeroLineBorderDashOffset || 0.0;\n        } else {\n          lineWidth = valueAtIndexOrDefault(gridLines.lineWidth, index);\n          lineColor = valueAtIndexOrDefault(gridLines.color, index);\n          borderDash = gridLines.borderDash || [];\n          borderDashOffset = gridLines.borderDashOffset || 0.0;\n        } // Common properties\n\n\n        var tx1, ty1, tx2, ty2, x1, y1, x2, y2, labelX, labelY, textOffset, textAlign;\n        var labelCount = helpers$1.isArray(label) ? label.length : 1;\n        var lineValue = getPixelForGridLine(me, index, gridLines.offsetGridLines);\n\n        if (isHorizontal) {\n          var labelYOffset = tl + tickPadding;\n\n          if (lineValue < me.left - epsilon) {\n            lineColor = 'rgba(0,0,0,0)';\n          }\n\n          tx1 = tx2 = x1 = x2 = alignPixel(chart, lineValue, lineWidth);\n          ty1 = tickStart;\n          ty2 = tickEnd;\n          labelX = me.getPixelForTick(index) + labelOffset; // x values for optionTicks (need to consider offsetLabel option)\n\n          if (position === 'top') {\n            y1 = alignPixel(chart, chartArea.top, axisWidth) + axisWidth / 2;\n            y2 = chartArea.bottom;\n            textOffset = ((!isRotated ? 0.5 : 1) - labelCount) * lineHeight;\n            textAlign = !isRotated ? 'center' : 'left';\n            labelY = me.bottom - labelYOffset;\n          } else {\n            y1 = chartArea.top;\n            y2 = alignPixel(chart, chartArea.bottom, axisWidth) - axisWidth / 2;\n            textOffset = (!isRotated ? 0.5 : 0) * lineHeight;\n            textAlign = !isRotated ? 'center' : 'right';\n            labelY = me.top + labelYOffset;\n          }\n        } else {\n          var labelXOffset = (isMirrored ? 0 : tl) + tickPadding;\n\n          if (lineValue < me.top - epsilon) {\n            lineColor = 'rgba(0,0,0,0)';\n          }\n\n          tx1 = tickStart;\n          tx2 = tickEnd;\n          ty1 = ty2 = y1 = y2 = alignPixel(chart, lineValue, lineWidth);\n          labelY = me.getPixelForTick(index) + labelOffset;\n          textOffset = (1 - labelCount) * lineHeight / 2;\n\n          if (position === 'left') {\n            x1 = alignPixel(chart, chartArea.left, axisWidth) + axisWidth / 2;\n            x2 = chartArea.right;\n            textAlign = isMirrored ? 'left' : 'right';\n            labelX = me.right - labelXOffset;\n          } else {\n            x1 = chartArea.left;\n            x2 = alignPixel(chart, chartArea.right, axisWidth) - axisWidth / 2;\n            textAlign = isMirrored ? 'right' : 'left';\n            labelX = me.left + labelXOffset;\n          }\n        }\n\n        itemsToDraw.push({\n          tx1: tx1,\n          ty1: ty1,\n          tx2: tx2,\n          ty2: ty2,\n          x1: x1,\n          y1: y1,\n          x2: x2,\n          y2: y2,\n          labelX: labelX,\n          labelY: labelY,\n          glWidth: lineWidth,\n          glColor: lineColor,\n          glBorderDash: borderDash,\n          glBorderDashOffset: borderDashOffset,\n          rotation: -1 * labelRotationRadians,\n          label: label,\n          major: tick.major,\n          textOffset: textOffset,\n          textAlign: textAlign\n        });\n      }); // Draw all of the tick labels, tick marks, and grid lines at the correct places\n\n      helpers$1.each(itemsToDraw, function (itemToDraw) {\n        var glWidth = itemToDraw.glWidth;\n        var glColor = itemToDraw.glColor;\n\n        if (gridLines.display && glWidth && glColor) {\n          context.save();\n          context.lineWidth = glWidth;\n          context.strokeStyle = glColor;\n\n          if (context.setLineDash) {\n            context.setLineDash(itemToDraw.glBorderDash);\n            context.lineDashOffset = itemToDraw.glBorderDashOffset;\n          }\n\n          context.beginPath();\n\n          if (gridLines.drawTicks) {\n            context.moveTo(itemToDraw.tx1, itemToDraw.ty1);\n            context.lineTo(itemToDraw.tx2, itemToDraw.ty2);\n          }\n\n          if (gridLines.drawOnChartArea) {\n            context.moveTo(itemToDraw.x1, itemToDraw.y1);\n            context.lineTo(itemToDraw.x2, itemToDraw.y2);\n          }\n\n          context.stroke();\n          context.restore();\n        }\n\n        if (optionTicks.display) {\n          // Make sure we draw text in the correct color and font\n          context.save();\n          context.translate(itemToDraw.labelX, itemToDraw.labelY);\n          context.rotate(itemToDraw.rotation);\n          context.font = itemToDraw.major ? majorTickFont.string : tickFont.string;\n          context.fillStyle = itemToDraw.major ? majorTickFontColor : tickFontColor;\n          context.textBaseline = 'middle';\n          context.textAlign = itemToDraw.textAlign;\n          var label = itemToDraw.label;\n          var y = itemToDraw.textOffset;\n\n          if (helpers$1.isArray(label)) {\n            for (var i = 0; i < label.length; ++i) {\n              // We just make sure the multiline element is a string here..\n              context.fillText('' + label[i], 0, y);\n              y += lineHeight;\n            }\n          } else {\n            context.fillText(label, 0, y);\n          }\n\n          context.restore();\n        }\n      });\n\n      if (scaleLabel.display) {\n        // Draw the scale label\n        var scaleLabelX;\n        var scaleLabelY;\n        var rotation = 0;\n        var halfLineHeight = scaleLabelFont.lineHeight / 2;\n\n        if (isHorizontal) {\n          scaleLabelX = me.left + (me.right - me.left) / 2; // midpoint of the width\n\n          scaleLabelY = position === 'bottom' ? me.bottom - halfLineHeight - scaleLabelPadding.bottom : me.top + halfLineHeight + scaleLabelPadding.top;\n        } else {\n          var isLeft = position === 'left';\n          scaleLabelX = isLeft ? me.left + halfLineHeight + scaleLabelPadding.top : me.right - halfLineHeight - scaleLabelPadding.top;\n          scaleLabelY = me.top + (me.bottom - me.top) / 2;\n          rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;\n        }\n\n        context.save();\n        context.translate(scaleLabelX, scaleLabelY);\n        context.rotate(rotation);\n        context.textAlign = 'center';\n        context.textBaseline = 'middle';\n        context.fillStyle = scaleLabelFontColor; // render in correct colour\n\n        context.font = scaleLabelFont.string;\n        context.fillText(scaleLabel.labelString, 0, 0);\n        context.restore();\n      }\n\n      if (axisWidth) {\n        // Draw the line at the edge of the axis\n        var firstLineWidth = axisWidth;\n        var lastLineWidth = valueAtIndexOrDefault(gridLines.lineWidth, ticks.length - 1, 0);\n        var x1, x2, y1, y2;\n\n        if (isHorizontal) {\n          x1 = alignPixel(chart, me.left, firstLineWidth) - firstLineWidth / 2;\n          x2 = alignPixel(chart, me.right, lastLineWidth) + lastLineWidth / 2;\n          y1 = y2 = borderValue;\n        } else {\n          y1 = alignPixel(chart, me.top, firstLineWidth) - firstLineWidth / 2;\n          y2 = alignPixel(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;\n          x1 = x2 = borderValue;\n        }\n\n        context.lineWidth = axisWidth;\n        context.strokeStyle = valueAtIndexOrDefault(gridLines.color, 0);\n        context.beginPath();\n        context.moveTo(x1, y1);\n        context.lineTo(x2, y2);\n        context.stroke();\n      }\n    }\n  });\n  var defaultConfig = {\n    position: 'bottom'\n  };\n  var scale_category = core_scale.extend({\n    /**\n    * Internal function to get the correct labels. If data.xLabels or data.yLabels are defined, use those\n    * else fall back to data.labels\n    * @private\n    */\n    getLabels: function getLabels() {\n      var data = this.chart.data;\n      return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels;\n    },\n    determineDataLimits: function determineDataLimits() {\n      var me = this;\n      var labels = me.getLabels();\n      me.minIndex = 0;\n      me.maxIndex = labels.length - 1;\n      var findIndex;\n\n      if (me.options.ticks.min !== undefined) {\n        // user specified min value\n        findIndex = labels.indexOf(me.options.ticks.min);\n        me.minIndex = findIndex !== -1 ? findIndex : me.minIndex;\n      }\n\n      if (me.options.ticks.max !== undefined) {\n        // user specified max value\n        findIndex = labels.indexOf(me.options.ticks.max);\n        me.maxIndex = findIndex !== -1 ? findIndex : me.maxIndex;\n      }\n\n      me.min = labels[me.minIndex];\n      me.max = labels[me.maxIndex];\n    },\n    buildTicks: function buildTicks() {\n      var me = this;\n      var labels = me.getLabels(); // If we are viewing some subset of labels, slice the original array\n\n      me.ticks = me.minIndex === 0 && me.maxIndex === labels.length - 1 ? labels : labels.slice(me.minIndex, me.maxIndex + 1);\n    },\n    getLabelForIndex: function getLabelForIndex(index, datasetIndex) {\n      var me = this;\n      var chart = me.chart;\n\n      if (chart.getDatasetMeta(datasetIndex).controller._getValueScaleId() === me.id) {\n        return me.getRightValue(chart.data.datasets[datasetIndex].data[index]);\n      }\n\n      return me.ticks[index - me.minIndex];\n    },\n    // Used to get data value locations.  Value can either be an index or a numerical value\n    getPixelForValue: function getPixelForValue(value, index) {\n      var me = this;\n      var offset = me.options.offset; // 1 is added because we need the length but we have the indexes\n\n      var offsetAmt = Math.max(me.maxIndex + 1 - me.minIndex - (offset ? 0 : 1), 1); // If value is a data object, then index is the index in the data array,\n      // not the index of the scale. We need to change that.\n\n      var valueCategory;\n\n      if (value !== undefined && value !== null) {\n        valueCategory = me.isHorizontal() ? value.x : value.y;\n      }\n\n      if (valueCategory !== undefined || value !== undefined && isNaN(index)) {\n        var labels = me.getLabels();\n        value = valueCategory || value;\n        var idx = labels.indexOf(value);\n        index = idx !== -1 ? idx : index;\n      }\n\n      if (me.isHorizontal()) {\n        var valueWidth = me.width / offsetAmt;\n        var widthOffset = valueWidth * (index - me.minIndex);\n\n        if (offset) {\n          widthOffset += valueWidth / 2;\n        }\n\n        return me.left + widthOffset;\n      }\n\n      var valueHeight = me.height / offsetAmt;\n      var heightOffset = valueHeight * (index - me.minIndex);\n\n      if (offset) {\n        heightOffset += valueHeight / 2;\n      }\n\n      return me.top + heightOffset;\n    },\n    getPixelForTick: function getPixelForTick(index) {\n      return this.getPixelForValue(this.ticks[index], index + this.minIndex, null);\n    },\n    getValueForPixel: function getValueForPixel(pixel) {\n      var me = this;\n      var offset = me.options.offset;\n      var value;\n      var offsetAmt = Math.max(me._ticks.length - (offset ? 0 : 1), 1);\n      var horz = me.isHorizontal();\n      var valueDimension = (horz ? me.width : me.height) / offsetAmt;\n      pixel -= horz ? me.left : me.top;\n\n      if (offset) {\n        pixel -= valueDimension / 2;\n      }\n\n      if (pixel <= 0) {\n        value = 0;\n      } else {\n        value = Math.round(pixel / valueDimension);\n      }\n\n      return value + me.minIndex;\n    },\n    getBasePixel: function getBasePixel() {\n      return this.bottom;\n    }\n  }); // INTERNAL: static default options, registered in src/index.js\n\n  var _defaults = defaultConfig;\n  scale_category._defaults = _defaults;\n  var noop = helpers$1.noop;\n  var isNullOrUndef = helpers$1.isNullOrUndef;\n  /**\n   * Generate a set of linear ticks\n   * @param generationOptions the options used to generate the ticks\n   * @param dataRange the range of the data\n   * @returns {number[]} array of tick values\n   */\n\n  function generateTicks(generationOptions, dataRange) {\n    var ticks = []; // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n    // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n    // for details.\n\n    var MIN_SPACING = 1e-14;\n    var stepSize = generationOptions.stepSize;\n    var unit = stepSize || 1;\n    var maxNumSpaces = generationOptions.maxTicks - 1;\n    var min = generationOptions.min;\n    var max = generationOptions.max;\n    var precision = generationOptions.precision;\n    var rmin = dataRange.min;\n    var rmax = dataRange.max;\n    var spacing = helpers$1.niceNum((rmax - rmin) / maxNumSpaces / unit) * unit;\n    var factor, niceMin, niceMax, numSpaces; // Beyond MIN_SPACING floating point numbers being to lose precision\n    // such that we can't do the math necessary to generate ticks\n\n    if (spacing < MIN_SPACING && isNullOrUndef(min) && isNullOrUndef(max)) {\n      return [rmin, rmax];\n    }\n\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n\n    if (numSpaces > maxNumSpaces) {\n      // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n      spacing = helpers$1.niceNum(numSpaces * spacing / maxNumSpaces / unit) * unit;\n    }\n\n    if (stepSize || isNullOrUndef(precision)) {\n      // If a precision is not specified, calculate factor based on spacing\n      factor = Math.pow(10, helpers$1._decimalPlaces(spacing));\n    } else {\n      // If the user specified a precision, round to that number of decimal places\n      factor = Math.pow(10, precision);\n      spacing = Math.ceil(spacing * factor) / factor;\n    }\n\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing; // If min, max and stepSize is set and they make an evenly spaced scale use it.\n\n    if (stepSize) {\n      // If very close to our whole number, use it.\n      if (!isNullOrUndef(min) && helpers$1.almostWhole(min / spacing, spacing / 1000)) {\n        niceMin = min;\n      }\n\n      if (!isNullOrUndef(max) && helpers$1.almostWhole(max / spacing, spacing / 1000)) {\n        niceMax = max;\n      }\n    }\n\n    numSpaces = (niceMax - niceMin) / spacing; // If very close to our rounded value, use it.\n\n    if (helpers$1.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    ticks.push(isNullOrUndef(min) ? niceMin : min);\n\n    for (var j = 1; j < numSpaces; ++j) {\n      ticks.push(Math.round((niceMin + j * spacing) * factor) / factor);\n    }\n\n    ticks.push(isNullOrUndef(max) ? niceMax : max);\n    return ticks;\n  }\n\n  var scale_linearbase = core_scale.extend({\n    getRightValue: function getRightValue(value) {\n      if (typeof value === 'string') {\n        return +value;\n      }\n\n      return core_scale.prototype.getRightValue.call(this, value);\n    },\n    handleTickRangeOptions: function handleTickRangeOptions() {\n      var me = this;\n      var opts = me.options;\n      var tickOpts = opts.ticks; // If we are forcing it to begin at 0, but 0 will already be rendered on the chart,\n      // do nothing since that would make the chart weird. If the user really wants a weird chart\n      // axis, they can manually override it\n\n      if (tickOpts.beginAtZero) {\n        var minSign = helpers$1.sign(me.min);\n        var maxSign = helpers$1.sign(me.max);\n\n        if (minSign < 0 && maxSign < 0) {\n          // move the top up to 0\n          me.max = 0;\n        } else if (minSign > 0 && maxSign > 0) {\n          // move the bottom down to 0\n          me.min = 0;\n        }\n      }\n\n      var setMin = tickOpts.min !== undefined || tickOpts.suggestedMin !== undefined;\n      var setMax = tickOpts.max !== undefined || tickOpts.suggestedMax !== undefined;\n\n      if (tickOpts.min !== undefined) {\n        me.min = tickOpts.min;\n      } else if (tickOpts.suggestedMin !== undefined) {\n        if (me.min === null) {\n          me.min = tickOpts.suggestedMin;\n        } else {\n          me.min = Math.min(me.min, tickOpts.suggestedMin);\n        }\n      }\n\n      if (tickOpts.max !== undefined) {\n        me.max = tickOpts.max;\n      } else if (tickOpts.suggestedMax !== undefined) {\n        if (me.max === null) {\n          me.max = tickOpts.suggestedMax;\n        } else {\n          me.max = Math.max(me.max, tickOpts.suggestedMax);\n        }\n      }\n\n      if (setMin !== setMax) {\n        // We set the min or the max but not both.\n        // So ensure that our range is good\n        // Inverted or 0 length range can happen when\n        // ticks.min is set, and no datasets are visible\n        if (me.min >= me.max) {\n          if (setMin) {\n            me.max = me.min + 1;\n          } else {\n            me.min = me.max - 1;\n          }\n        }\n      }\n\n      if (me.min === me.max) {\n        me.max++;\n\n        if (!tickOpts.beginAtZero) {\n          me.min--;\n        }\n      }\n    },\n    getTickLimit: function getTickLimit() {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var stepSize = tickOpts.stepSize;\n      var maxTicksLimit = tickOpts.maxTicksLimit;\n      var maxTicks;\n\n      if (stepSize) {\n        maxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;\n      } else {\n        maxTicks = me._computeTickLimit();\n        maxTicksLimit = maxTicksLimit || 11;\n      }\n\n      if (maxTicksLimit) {\n        maxTicks = Math.min(maxTicksLimit, maxTicks);\n      }\n\n      return maxTicks;\n    },\n    _computeTickLimit: function _computeTickLimit() {\n      return Number.POSITIVE_INFINITY;\n    },\n    handleDirectionalChanges: noop,\n    buildTicks: function buildTicks() {\n      var me = this;\n      var opts = me.options;\n      var tickOpts = opts.ticks; // Figure out what the max number of ticks we can support it is based on the size of\n      // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n      // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n      // the graph. Make sure we always have at least 2 ticks\n\n      var maxTicks = me.getTickLimit();\n      maxTicks = Math.max(2, maxTicks);\n      var numericGeneratorOptions = {\n        maxTicks: maxTicks,\n        min: tickOpts.min,\n        max: tickOpts.max,\n        precision: tickOpts.precision,\n        stepSize: helpers$1.valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)\n      };\n      var ticks = me.ticks = generateTicks(numericGeneratorOptions, me);\n      me.handleDirectionalChanges(); // At this point, we need to update our max and min given the tick values since we have expanded the\n      // range of the scale\n\n      me.max = helpers$1.max(ticks);\n      me.min = helpers$1.min(ticks);\n\n      if (tickOpts.reverse) {\n        ticks.reverse();\n        me.start = me.max;\n        me.end = me.min;\n      } else {\n        me.start = me.min;\n        me.end = me.max;\n      }\n    },\n    convertTicksToLabels: function convertTicksToLabels() {\n      var me = this;\n      me.ticksAsNumbers = me.ticks.slice();\n      me.zeroLineIndex = me.ticks.indexOf(0);\n      core_scale.prototype.convertTicksToLabels.call(me);\n    }\n  });\n  var defaultConfig$1 = {\n    position: 'left',\n    ticks: {\n      callback: core_ticks.formatters.linear\n    }\n  };\n  var scale_linear = scale_linearbase.extend({\n    determineDataLimits: function determineDataLimits() {\n      var me = this;\n      var opts = me.options;\n      var chart = me.chart;\n      var data = chart.data;\n      var datasets = data.datasets;\n      var isHorizontal = me.isHorizontal();\n      var DEFAULT_MIN = 0;\n      var DEFAULT_MAX = 1;\n\n      function IDMatches(meta) {\n        return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;\n      } // First Calculate the range\n\n\n      me.min = null;\n      me.max = null;\n      var hasStacks = opts.stacked;\n\n      if (hasStacks === undefined) {\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          if (hasStacks) {\n            return;\n          }\n\n          var meta = chart.getDatasetMeta(datasetIndex);\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== undefined) {\n            hasStacks = true;\n          }\n        });\n      }\n\n      if (opts.stacked || hasStacks) {\n        var valuesPerStack = {};\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          var meta = chart.getDatasetMeta(datasetIndex);\n          var key = [meta.type, // we have a separate stack for stack=undefined datasets when the opts.stacked is undefined\n          opts.stacked === undefined && meta.stack === undefined ? datasetIndex : '', meta.stack].join('.');\n\n          if (valuesPerStack[key] === undefined) {\n            valuesPerStack[key] = {\n              positiveValues: [],\n              negativeValues: []\n            };\n          } // Store these per type\n\n\n          var positiveValues = valuesPerStack[key].positiveValues;\n          var negativeValues = valuesPerStack[key].negativeValues;\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n            helpers$1.each(dataset.data, function (rawValue, index) {\n              var value = +me.getRightValue(rawValue);\n\n              if (isNaN(value) || meta.data[index].hidden) {\n                return;\n              }\n\n              positiveValues[index] = positiveValues[index] || 0;\n              negativeValues[index] = negativeValues[index] || 0;\n\n              if (opts.relativePoints) {\n                positiveValues[index] = 100;\n              } else if (value < 0) {\n                negativeValues[index] += value;\n              } else {\n                positiveValues[index] += value;\n              }\n            });\n          }\n        });\n        helpers$1.each(valuesPerStack, function (valuesForType) {\n          var values = valuesForType.positiveValues.concat(valuesForType.negativeValues);\n          var minVal = helpers$1.min(values);\n          var maxVal = helpers$1.max(values);\n          me.min = me.min === null ? minVal : Math.min(me.min, minVal);\n          me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);\n        });\n      } else {\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          var meta = chart.getDatasetMeta(datasetIndex);\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n            helpers$1.each(dataset.data, function (rawValue, index) {\n              var value = +me.getRightValue(rawValue);\n\n              if (isNaN(value) || meta.data[index].hidden) {\n                return;\n              }\n\n              if (me.min === null) {\n                me.min = value;\n              } else if (value < me.min) {\n                me.min = value;\n              }\n\n              if (me.max === null) {\n                me.max = value;\n              } else if (value > me.max) {\n                me.max = value;\n              }\n            });\n          }\n        });\n      }\n\n      me.min = isFinite(me.min) && !isNaN(me.min) ? me.min : DEFAULT_MIN;\n      me.max = isFinite(me.max) && !isNaN(me.max) ? me.max : DEFAULT_MAX; // Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero\n\n      this.handleTickRangeOptions();\n    },\n    // Returns the maximum number of ticks based on the scale dimension\n    _computeTickLimit: function _computeTickLimit() {\n      var me = this;\n      var tickFont;\n\n      if (me.isHorizontal()) {\n        return Math.ceil(me.width / 40);\n      }\n\n      tickFont = helpers$1.options._parseFont(me.options.ticks);\n      return Math.ceil(me.height / tickFont.lineHeight);\n    },\n    // Called after the ticks are built. We need\n    handleDirectionalChanges: function handleDirectionalChanges() {\n      if (!this.isHorizontal()) {\n        // We are in a vertical orientation. The top value is the highest. So reverse the array\n        this.ticks.reverse();\n      }\n    },\n    getLabelForIndex: function getLabelForIndex(index, datasetIndex) {\n      return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n    },\n    // Utils\n    getPixelForValue: function getPixelForValue(value) {\n      // This must be called after fit has been run so that\n      // this.left, this.top, this.right, and this.bottom have been defined\n      var me = this;\n      var start = me.start;\n      var rightValue = +me.getRightValue(value);\n      var pixel;\n      var range = me.end - start;\n\n      if (me.isHorizontal()) {\n        pixel = me.left + me.width / range * (rightValue - start);\n      } else {\n        pixel = me.bottom - me.height / range * (rightValue - start);\n      }\n\n      return pixel;\n    },\n    getValueForPixel: function getValueForPixel(pixel) {\n      var me = this;\n      var isHorizontal = me.isHorizontal();\n      var innerDimension = isHorizontal ? me.width : me.height;\n      var offset = (isHorizontal ? pixel - me.left : me.bottom - pixel) / innerDimension;\n      return me.start + (me.end - me.start) * offset;\n    },\n    getPixelForTick: function getPixelForTick(index) {\n      return this.getPixelForValue(this.ticksAsNumbers[index]);\n    }\n  }); // INTERNAL: static default options, registered in src/index.js\n\n  var _defaults$1 = defaultConfig$1;\n  scale_linear._defaults = _defaults$1;\n  var valueOrDefault$a = helpers$1.valueOrDefault;\n  /**\n   * Generate a set of logarithmic ticks\n   * @param generationOptions the options used to generate the ticks\n   * @param dataRange the range of the data\n   * @returns {number[]} array of tick values\n   */\n\n  function generateTicks$1(generationOptions, dataRange) {\n    var ticks = [];\n    var tickVal = valueOrDefault$a(generationOptions.min, Math.pow(10, Math.floor(helpers$1.log10(dataRange.min))));\n    var endExp = Math.floor(helpers$1.log10(dataRange.max));\n    var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));\n    var exp, significand;\n\n    if (tickVal === 0) {\n      exp = Math.floor(helpers$1.log10(dataRange.minNotZero));\n      significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));\n      ticks.push(tickVal);\n      tickVal = significand * Math.pow(10, exp);\n    } else {\n      exp = Math.floor(helpers$1.log10(tickVal));\n      significand = Math.floor(tickVal / Math.pow(10, exp));\n    }\n\n    var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n\n    do {\n      ticks.push(tickVal);\n      ++significand;\n\n      if (significand === 10) {\n        significand = 1;\n        ++exp;\n        precision = exp >= 0 ? 1 : precision;\n      }\n\n      tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;\n    } while (exp < endExp || exp === endExp && significand < endSignificand);\n\n    var lastTick = valueOrDefault$a(generationOptions.max, tickVal);\n    ticks.push(lastTick);\n    return ticks;\n  }\n\n  var defaultConfig$2 = {\n    position: 'left',\n    // label settings\n    ticks: {\n      callback: core_ticks.formatters.logarithmic\n    }\n  }; // TODO(v3): change this to positiveOrDefault\n\n  function nonNegativeOrDefault(value, defaultValue) {\n    return helpers$1.isFinite(value) && value >= 0 ? value : defaultValue;\n  }\n\n  var scale_logarithmic = core_scale.extend({\n    determineDataLimits: function determineDataLimits() {\n      var me = this;\n      var opts = me.options;\n      var chart = me.chart;\n      var data = chart.data;\n      var datasets = data.datasets;\n      var isHorizontal = me.isHorizontal();\n\n      function IDMatches(meta) {\n        return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;\n      } // Calculate Range\n\n\n      me.min = null;\n      me.max = null;\n      me.minNotZero = null;\n      var hasStacks = opts.stacked;\n\n      if (hasStacks === undefined) {\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          if (hasStacks) {\n            return;\n          }\n\n          var meta = chart.getDatasetMeta(datasetIndex);\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== undefined) {\n            hasStacks = true;\n          }\n        });\n      }\n\n      if (opts.stacked || hasStacks) {\n        var valuesPerStack = {};\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          var meta = chart.getDatasetMeta(datasetIndex);\n          var key = [meta.type, // we have a separate stack for stack=undefined datasets when the opts.stacked is undefined\n          opts.stacked === undefined && meta.stack === undefined ? datasetIndex : '', meta.stack].join('.');\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n            if (valuesPerStack[key] === undefined) {\n              valuesPerStack[key] = [];\n            }\n\n            helpers$1.each(dataset.data, function (rawValue, index) {\n              var values = valuesPerStack[key];\n              var value = +me.getRightValue(rawValue); // invalid, hidden and negative values are ignored\n\n              if (isNaN(value) || meta.data[index].hidden || value < 0) {\n                return;\n              }\n\n              values[index] = values[index] || 0;\n              values[index] += value;\n            });\n          }\n        });\n        helpers$1.each(valuesPerStack, function (valuesForType) {\n          if (valuesForType.length > 0) {\n            var minVal = helpers$1.min(valuesForType);\n            var maxVal = helpers$1.max(valuesForType);\n            me.min = me.min === null ? minVal : Math.min(me.min, minVal);\n            me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);\n          }\n        });\n      } else {\n        helpers$1.each(datasets, function (dataset, datasetIndex) {\n          var meta = chart.getDatasetMeta(datasetIndex);\n\n          if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n            helpers$1.each(dataset.data, function (rawValue, index) {\n              var value = +me.getRightValue(rawValue); // invalid, hidden and negative values are ignored\n\n              if (isNaN(value) || meta.data[index].hidden || value < 0) {\n                return;\n              }\n\n              if (me.min === null) {\n                me.min = value;\n              } else if (value < me.min) {\n                me.min = value;\n              }\n\n              if (me.max === null) {\n                me.max = value;\n              } else if (value > me.max) {\n                me.max = value;\n              }\n\n              if (value !== 0 && (me.minNotZero === null || value < me.minNotZero)) {\n                me.minNotZero = value;\n              }\n            });\n          }\n        });\n      } // Common base implementation to handle ticks.min, ticks.max\n\n\n      this.handleTickRangeOptions();\n    },\n    handleTickRangeOptions: function handleTickRangeOptions() {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var DEFAULT_MIN = 1;\n      var DEFAULT_MAX = 10;\n      me.min = nonNegativeOrDefault(tickOpts.min, me.min);\n      me.max = nonNegativeOrDefault(tickOpts.max, me.max);\n\n      if (me.min === me.max) {\n        if (me.min !== 0 && me.min !== null) {\n          me.min = Math.pow(10, Math.floor(helpers$1.log10(me.min)) - 1);\n          me.max = Math.pow(10, Math.floor(helpers$1.log10(me.max)) + 1);\n        } else {\n          me.min = DEFAULT_MIN;\n          me.max = DEFAULT_MAX;\n        }\n      }\n\n      if (me.min === null) {\n        me.min = Math.pow(10, Math.floor(helpers$1.log10(me.max)) - 1);\n      }\n\n      if (me.max === null) {\n        me.max = me.min !== 0 ? Math.pow(10, Math.floor(helpers$1.log10(me.min)) + 1) : DEFAULT_MAX;\n      }\n\n      if (me.minNotZero === null) {\n        if (me.min > 0) {\n          me.minNotZero = me.min;\n        } else if (me.max < 1) {\n          me.minNotZero = Math.pow(10, Math.floor(helpers$1.log10(me.max)));\n        } else {\n          me.minNotZero = DEFAULT_MIN;\n        }\n      }\n    },\n    buildTicks: function buildTicks() {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var reverse = !me.isHorizontal();\n      var generationOptions = {\n        min: nonNegativeOrDefault(tickOpts.min),\n        max: nonNegativeOrDefault(tickOpts.max)\n      };\n      var ticks = me.ticks = generateTicks$1(generationOptions, me); // At this point, we need to update our max and min given the tick values since we have expanded the\n      // range of the scale\n\n      me.max = helpers$1.max(ticks);\n      me.min = helpers$1.min(ticks);\n\n      if (tickOpts.reverse) {\n        reverse = !reverse;\n        me.start = me.max;\n        me.end = me.min;\n      } else {\n        me.start = me.min;\n        me.end = me.max;\n      }\n\n      if (reverse) {\n        ticks.reverse();\n      }\n    },\n    convertTicksToLabels: function convertTicksToLabels() {\n      this.tickValues = this.ticks.slice();\n      core_scale.prototype.convertTicksToLabels.call(this);\n    },\n    // Get the correct tooltip label\n    getLabelForIndex: function getLabelForIndex(index, datasetIndex) {\n      return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n    },\n    getPixelForTick: function getPixelForTick(index) {\n      return this.getPixelForValue(this.tickValues[index]);\n    },\n\n    /**\n     * Returns the value of the first tick.\n     * @param {number} value - The minimum not zero value.\n     * @return {number} The first tick value.\n     * @private\n     */\n    _getFirstTickValue: function _getFirstTickValue(value) {\n      var exp = Math.floor(helpers$1.log10(value));\n      var significand = Math.floor(value / Math.pow(10, exp));\n      return significand * Math.pow(10, exp);\n    },\n    getPixelForValue: function getPixelForValue(value) {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var reverse = tickOpts.reverse;\n      var log10 = helpers$1.log10;\n\n      var firstTickValue = me._getFirstTickValue(me.minNotZero);\n\n      var offset = 0;\n      var innerDimension, pixel, start, end, sign;\n      value = +me.getRightValue(value);\n\n      if (reverse) {\n        start = me.end;\n        end = me.start;\n        sign = -1;\n      } else {\n        start = me.start;\n        end = me.end;\n        sign = 1;\n      }\n\n      if (me.isHorizontal()) {\n        innerDimension = me.width;\n        pixel = reverse ? me.right : me.left;\n      } else {\n        innerDimension = me.height;\n        sign *= -1; // invert, since the upper-left corner of the canvas is at pixel (0, 0)\n\n        pixel = reverse ? me.top : me.bottom;\n      }\n\n      if (value !== start) {\n        if (start === 0) {\n          // include zero tick\n          offset = valueOrDefault$a(tickOpts.fontSize, core_defaults.global.defaultFontSize);\n          innerDimension -= offset;\n          start = firstTickValue;\n        }\n\n        if (value !== 0) {\n          offset += innerDimension / (log10(end) - log10(start)) * (log10(value) - log10(start));\n        }\n\n        pixel += sign * offset;\n      }\n\n      return pixel;\n    },\n    getValueForPixel: function getValueForPixel(pixel) {\n      var me = this;\n      var tickOpts = me.options.ticks;\n      var reverse = tickOpts.reverse;\n      var log10 = helpers$1.log10;\n\n      var firstTickValue = me._getFirstTickValue(me.minNotZero);\n\n      var innerDimension, start, end, value;\n\n      if (reverse) {\n        start = me.end;\n        end = me.start;\n      } else {\n        start = me.start;\n        end = me.end;\n      }\n\n      if (me.isHorizontal()) {\n        innerDimension = me.width;\n        value = reverse ? me.right - pixel : pixel - me.left;\n      } else {\n        innerDimension = me.height;\n        value = reverse ? pixel - me.top : me.bottom - pixel;\n      }\n\n      if (value !== start) {\n        if (start === 0) {\n          // include zero tick\n          var offset = valueOrDefault$a(tickOpts.fontSize, core_defaults.global.defaultFontSize);\n          value -= offset;\n          innerDimension -= offset;\n          start = firstTickValue;\n        }\n\n        value *= log10(end) - log10(start);\n        value /= innerDimension;\n        value = Math.pow(10, log10(start) + value);\n      }\n\n      return value;\n    }\n  }); // INTERNAL: static default options, registered in src/index.js\n\n  var _defaults$2 = defaultConfig$2;\n  scale_logarithmic._defaults = _defaults$2;\n  var valueOrDefault$b = helpers$1.valueOrDefault;\n  var valueAtIndexOrDefault$1 = helpers$1.valueAtIndexOrDefault;\n  var resolve$7 = helpers$1.options.resolve;\n  var defaultConfig$3 = {\n    display: true,\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n    angleLines: {\n      display: true,\n      color: 'rgba(0, 0, 0, 0.1)',\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n    gridLines: {\n      circular: false\n    },\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n      // String - The colour of the label backdrop\n      backdropColor: 'rgba(255,255,255,0.75)',\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPaddingY: 2,\n      // Number - The backdrop padding to the side of the label in pixels\n      backdropPaddingX: 2,\n      callback: core_ticks.formatters.linear\n    },\n    pointLabels: {\n      // Boolean - if true, show point labels\n      display: true,\n      // Number - Point label font size in pixels\n      fontSize: 10,\n      // Function - Used to convert point labels\n      callback: function callback(label) {\n        return label;\n      }\n    }\n  };\n\n  function getValueCount(scale) {\n    var opts = scale.options;\n    return opts.angleLines.display || opts.pointLabels.display ? scale.chart.data.labels.length : 0;\n  }\n\n  function getTickBackdropHeight(opts) {\n    var tickOpts = opts.ticks;\n\n    if (tickOpts.display && opts.display) {\n      return valueOrDefault$b(tickOpts.fontSize, core_defaults.global.defaultFontSize) + tickOpts.backdropPaddingY * 2;\n    }\n\n    return 0;\n  }\n\n  function measureLabelSize(ctx, lineHeight, label) {\n    if (helpers$1.isArray(label)) {\n      return {\n        w: helpers$1.longestText(ctx, ctx.font, label),\n        h: label.length * lineHeight\n      };\n    }\n\n    return {\n      w: ctx.measureText(label).width,\n      h: lineHeight\n    };\n  }\n\n  function determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n      return {\n        start: pos - size / 2,\n        end: pos + size / 2\n      };\n    } else if (angle < min || angle > max) {\n      return {\n        start: pos - size,\n        end: pos\n      };\n    }\n\n    return {\n      start: pos,\n      end: pos + size\n    };\n  }\n  /**\n   * Helper function to fit a radial linear scale with point labels\n   */\n\n\n  function fitWithPointLabels(scale) {\n    // Right, this is really confusing and there is a lot of maths going on here\n    // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n    //\n    // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n    //\n    // Solution:\n    //\n    // We assume the radius of the polygon is half the size of the canvas at first\n    // at each index we check if the text overlaps.\n    //\n    // Where it does, we store that angle and that index.\n    //\n    // After finding the largest index and angle we calculate how much we need to remove\n    // from the shape radius to move the point inwards by that x.\n    //\n    // We average the left and right distances to get the maximum shape radius that can fit in the box\n    // along with labels.\n    //\n    // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n    // on each side, removing that from the size, halving it and adding the left x protrusion width.\n    //\n    // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n    // and position it in the most space efficient manner\n    //\n    // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n    var plFont = helpers$1.options._parseFont(scale.options.pointLabels); // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n    // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n\n\n    var furthestLimits = {\n      l: 0,\n      r: scale.width,\n      t: 0,\n      b: scale.height - scale.paddingTop\n    };\n    var furthestAngles = {};\n    var i, textSize, pointPosition;\n    scale.ctx.font = plFont.string;\n    scale._pointLabelSizes = [];\n    var valueCount = getValueCount(scale);\n\n    for (i = 0; i < valueCount; i++) {\n      pointPosition = scale.getPointPosition(i, scale.drawingArea + 5);\n      textSize = measureLabelSize(scale.ctx, plFont.lineHeight, scale.pointLabels[i] || '');\n      scale._pointLabelSizes[i] = textSize; // Add quarter circle to make degree 0 mean top of circle\n\n      var angleRadians = scale.getIndexAngle(i);\n      var angle = helpers$1.toDegrees(angleRadians) % 360;\n      var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n      var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n\n      if (hLimits.start < furthestLimits.l) {\n        furthestLimits.l = hLimits.start;\n        furthestAngles.l = angleRadians;\n      }\n\n      if (hLimits.end > furthestLimits.r) {\n        furthestLimits.r = hLimits.end;\n        furthestAngles.r = angleRadians;\n      }\n\n      if (vLimits.start < furthestLimits.t) {\n        furthestLimits.t = vLimits.start;\n        furthestAngles.t = angleRadians;\n      }\n\n      if (vLimits.end > furthestLimits.b) {\n        furthestLimits.b = vLimits.end;\n        furthestAngles.b = angleRadians;\n      }\n    }\n\n    scale.setReductions(scale.drawingArea, furthestLimits, furthestAngles);\n  }\n\n  function getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n      return 'center';\n    } else if (angle < 180) {\n      return 'left';\n    }\n\n    return 'right';\n  }\n\n  function fillText(ctx, text, position, lineHeight) {\n    var y = position.y + lineHeight / 2;\n    var i, ilen;\n\n    if (helpers$1.isArray(text)) {\n      for (i = 0, ilen = text.length; i < ilen; ++i) {\n        ctx.fillText(text[i], position.x, y);\n        y += lineHeight;\n      }\n    } else {\n      ctx.fillText(text, position.x, y);\n    }\n  }\n\n  function adjustPointPositionForLabelHeight(angle, textSize, position) {\n    if (angle === 90 || angle === 270) {\n      position.y -= textSize.h / 2;\n    } else if (angle > 270 || angle < 90) {\n      position.y -= textSize.h;\n    }\n  }\n\n  function drawPointLabels(scale) {\n    var ctx = scale.ctx;\n    var opts = scale.options;\n    var angleLineOpts = opts.angleLines;\n    var gridLineOpts = opts.gridLines;\n    var pointLabelOpts = opts.pointLabels;\n    var lineWidth = valueOrDefault$b(angleLineOpts.lineWidth, gridLineOpts.lineWidth);\n    var lineColor = valueOrDefault$b(angleLineOpts.color, gridLineOpts.color);\n    var tickBackdropHeight = getTickBackdropHeight(opts);\n    ctx.save();\n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = lineColor;\n\n    if (ctx.setLineDash) {\n      ctx.setLineDash(resolve$7([angleLineOpts.borderDash, gridLineOpts.borderDash, []]));\n      ctx.lineDashOffset = resolve$7([angleLineOpts.borderDashOffset, gridLineOpts.borderDashOffset, 0.0]);\n    }\n\n    var outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max); // Point Label Font\n\n    var plFont = helpers$1.options._parseFont(pointLabelOpts);\n\n    ctx.font = plFont.string;\n    ctx.textBaseline = 'middle';\n\n    for (var i = getValueCount(scale) - 1; i >= 0; i--) {\n      if (angleLineOpts.display && lineWidth && lineColor) {\n        var outerPosition = scale.getPointPosition(i, outerDistance);\n        ctx.beginPath();\n        ctx.moveTo(scale.xCenter, scale.yCenter);\n        ctx.lineTo(outerPosition.x, outerPosition.y);\n        ctx.stroke();\n      }\n\n      if (pointLabelOpts.display) {\n        // Extra pixels out for some label spacing\n        var extra = i === 0 ? tickBackdropHeight / 2 : 0;\n        var pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + 5); // Keep this in loop since we may support array properties here\n\n        var pointLabelFontColor = valueAtIndexOrDefault$1(pointLabelOpts.fontColor, i, core_defaults.global.defaultFontColor);\n        ctx.fillStyle = pointLabelFontColor;\n        var angleRadians = scale.getIndexAngle(i);\n        var angle = helpers$1.toDegrees(angleRadians);\n        ctx.textAlign = getTextAlignForAngle(angle);\n        adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);\n        fillText(ctx, scale.pointLabels[i] || '', pointLabelPosition, plFont.lineHeight);\n      }\n    }\n\n    ctx.restore();\n  }\n\n  function drawRadiusLine(scale, gridLineOpts, radius, index) {\n    var ctx = scale.ctx;\n    var circular = gridLineOpts.circular;\n    var valueCount = getValueCount(scale);\n    var lineColor = valueAtIndexOrDefault$1(gridLineOpts.color, index - 1);\n    var lineWidth = valueAtIndexOrDefault$1(gridLineOpts.lineWidth, index - 1);\n    var pointPosition;\n\n    if (!circular && !valueCount || !lineColor || !lineWidth) {\n      return;\n    }\n\n    ctx.save();\n    ctx.strokeStyle = lineColor;\n    ctx.lineWidth = lineWidth;\n\n    if (ctx.setLineDash) {\n      ctx.setLineDash(gridLineOpts.borderDash || []);\n      ctx.lineDashOffset = gridLineOpts.borderDashOffset || 0.0;\n    }\n\n    ctx.beginPath();\n\n    if (circular) {\n      // Draw circular arcs between the points\n      ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);\n    } else {\n      // Draw straight lines connecting each index\n      pointPosition = scale.getPointPosition(0, radius);\n      ctx.moveTo(pointPosition.x, pointPosition.y);\n\n      for (var i = 1; i < valueCount; i++) {\n        pointPosition = scale.getPointPosition(i, radius);\n        ctx.lineTo(pointPosition.x, pointPosition.y);\n      }\n    }\n\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  function numberOrZero(param) {\n    return helpers$1.isNumber(param) ? param : 0;\n  }\n\n  var scale_radialLinear = scale_linearbase.extend({\n    setDimensions: function setDimensions() {\n      var me = this; // Set the unconstrained dimension before label rotation\n\n      me.width = me.maxWidth;\n      me.height = me.maxHeight;\n      me.paddingTop = getTickBackdropHeight(me.options) / 2;\n      me.xCenter = Math.floor(me.width / 2);\n      me.yCenter = Math.floor((me.height - me.paddingTop) / 2);\n      me.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;\n    },\n    determineDataLimits: function determineDataLimits() {\n      var me = this;\n      var chart = me.chart;\n      var min = Number.POSITIVE_INFINITY;\n      var max = Number.NEGATIVE_INFINITY;\n      helpers$1.each(chart.data.datasets, function (dataset, datasetIndex) {\n        if (chart.isDatasetVisible(datasetIndex)) {\n          var meta = chart.getDatasetMeta(datasetIndex);\n          helpers$1.each(dataset.data, function (rawValue, index) {\n            var value = +me.getRightValue(rawValue);\n\n            if (isNaN(value) || meta.data[index].hidden) {\n              return;\n            }\n\n            min = Math.min(value, min);\n            max = Math.max(value, max);\n          });\n        }\n      });\n      me.min = min === Number.POSITIVE_INFINITY ? 0 : min;\n      me.max = max === Number.NEGATIVE_INFINITY ? 0 : max; // Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero\n\n      me.handleTickRangeOptions();\n    },\n    // Returns the maximum number of ticks based on the scale dimension\n    _computeTickLimit: function _computeTickLimit() {\n      return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    },\n    convertTicksToLabels: function convertTicksToLabels() {\n      var me = this;\n      scale_linearbase.prototype.convertTicksToLabels.call(me); // Point labels\n\n      me.pointLabels = me.chart.data.labels.map(me.options.pointLabels.callback, me);\n    },\n    getLabelForIndex: function getLabelForIndex(index, datasetIndex) {\n      return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n    },\n    fit: function fit() {\n      var me = this;\n      var opts = me.options;\n\n      if (opts.display && opts.pointLabels.display) {\n        fitWithPointLabels(me);\n      } else {\n        me.setCenterPoint(0, 0, 0, 0);\n      }\n    },\n\n    /**\n     * Set radius reductions and determine new radius and center point\n     * @private\n     */\n    setReductions: function setReductions(largestPossibleRadius, furthestLimits, furthestAngles) {\n      var me = this;\n      var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);\n      var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);\n      var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);\n      var radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);\n      radiusReductionLeft = numberOrZero(radiusReductionLeft);\n      radiusReductionRight = numberOrZero(radiusReductionRight);\n      radiusReductionTop = numberOrZero(radiusReductionTop);\n      radiusReductionBottom = numberOrZero(radiusReductionBottom);\n      me.drawingArea = Math.min(Math.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2), Math.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));\n      me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);\n    },\n    setCenterPoint: function setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n      var me = this;\n      var maxRight = me.width - rightMovement - me.drawingArea;\n      var maxLeft = leftMovement + me.drawingArea;\n      var maxTop = topMovement + me.drawingArea;\n      var maxBottom = me.height - me.paddingTop - bottomMovement - me.drawingArea;\n      me.xCenter = Math.floor((maxLeft + maxRight) / 2 + me.left);\n      me.yCenter = Math.floor((maxTop + maxBottom) / 2 + me.top + me.paddingTop);\n    },\n    getIndexAngle: function getIndexAngle(index) {\n      var angleMultiplier = Math.PI * 2 / getValueCount(this);\n      var startAngle = this.chart.options && this.chart.options.startAngle ? this.chart.options.startAngle : 0;\n      var startAngleRadians = startAngle * Math.PI * 2 / 360; // Start from the top instead of right, so remove a quarter of the circle\n\n      return index * angleMultiplier + startAngleRadians;\n    },\n    getDistanceFromCenterForValue: function getDistanceFromCenterForValue(value) {\n      var me = this;\n\n      if (value === null) {\n        return 0; // null always in center\n      } // Take into account half font size + the yPadding of the top value\n\n\n      var scalingFactor = me.drawingArea / (me.max - me.min);\n\n      if (me.options.ticks.reverse) {\n        return (me.max - value) * scalingFactor;\n      }\n\n      return (value - me.min) * scalingFactor;\n    },\n    getPointPosition: function getPointPosition(index, distanceFromCenter) {\n      var me = this;\n      var thisAngle = me.getIndexAngle(index) - Math.PI / 2;\n      return {\n        x: Math.cos(thisAngle) * distanceFromCenter + me.xCenter,\n        y: Math.sin(thisAngle) * distanceFromCenter + me.yCenter\n      };\n    },\n    getPointPositionForValue: function getPointPositionForValue(index, value) {\n      return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    },\n    getBasePosition: function getBasePosition() {\n      var me = this;\n      var min = me.min;\n      var max = me.max;\n      return me.getPointPositionForValue(0, me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0);\n    },\n    draw: function draw() {\n      var me = this;\n      var opts = me.options;\n      var gridLineOpts = opts.gridLines;\n      var tickOpts = opts.ticks;\n\n      if (opts.display) {\n        var ctx = me.ctx;\n        var startAngle = this.getIndexAngle(0);\n\n        var tickFont = helpers$1.options._parseFont(tickOpts);\n\n        if (opts.angleLines.display || opts.pointLabels.display) {\n          drawPointLabels(me);\n        }\n\n        helpers$1.each(me.ticks, function (label, index) {\n          // Don't draw a centre value (if it is minimum)\n          if (index > 0 || tickOpts.reverse) {\n            var yCenterOffset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]); // Draw circular lines around the scale\n\n            if (gridLineOpts.display && index !== 0) {\n              drawRadiusLine(me, gridLineOpts, yCenterOffset, index);\n            }\n\n            if (tickOpts.display) {\n              var tickFontColor = valueOrDefault$b(tickOpts.fontColor, core_defaults.global.defaultFontColor);\n              ctx.font = tickFont.string;\n              ctx.save();\n              ctx.translate(me.xCenter, me.yCenter);\n              ctx.rotate(startAngle);\n\n              if (tickOpts.showLabelBackdrop) {\n                var labelWidth = ctx.measureText(label).width;\n                ctx.fillStyle = tickOpts.backdropColor;\n                ctx.fillRect(-labelWidth / 2 - tickOpts.backdropPaddingX, -yCenterOffset - tickFont.size / 2 - tickOpts.backdropPaddingY, labelWidth + tickOpts.backdropPaddingX * 2, tickFont.size + tickOpts.backdropPaddingY * 2);\n              }\n\n              ctx.textAlign = 'center';\n              ctx.textBaseline = 'middle';\n              ctx.fillStyle = tickFontColor;\n              ctx.fillText(label, 0, -yCenterOffset);\n              ctx.restore();\n            }\n          }\n        });\n      }\n    }\n  }); // INTERNAL: static default options, registered in src/index.js\n\n  var _defaults$3 = defaultConfig$3;\n  scale_radialLinear._defaults = _defaults$3;\n  var valueOrDefault$c = helpers$1.valueOrDefault; // Integer constants are from the ES6 spec.\n\n  var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;\n  var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\n  var INTERVALS = {\n    millisecond: {\n      common: true,\n      size: 1,\n      steps: [1, 2, 5, 10, 20, 50, 100, 250, 500]\n    },\n    second: {\n      common: true,\n      size: 1000,\n      steps: [1, 2, 5, 10, 15, 30]\n    },\n    minute: {\n      common: true,\n      size: 60000,\n      steps: [1, 2, 5, 10, 15, 30]\n    },\n    hour: {\n      common: true,\n      size: 3600000,\n      steps: [1, 2, 3, 6, 12]\n    },\n    day: {\n      common: true,\n      size: 86400000,\n      steps: [1, 2, 5]\n    },\n    week: {\n      common: false,\n      size: 604800000,\n      steps: [1, 2, 3, 4]\n    },\n    month: {\n      common: true,\n      size: 2.628e9,\n      steps: [1, 2, 3]\n    },\n    quarter: {\n      common: false,\n      size: 7.884e9,\n      steps: [1, 2, 3, 4]\n    },\n    year: {\n      common: true,\n      size: 3.154e10\n    }\n  };\n  var UNITS = Object.keys(INTERVALS);\n\n  function sorter(a, b) {\n    return a - b;\n  }\n\n  function arrayUnique(items) {\n    var hash = {};\n    var out = [];\n    var i, ilen, item;\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n\n      if (!hash[item]) {\n        hash[item] = true;\n        out.push(item);\n      }\n    }\n\n    return out;\n  }\n  /**\n   * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n   * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n   * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n   * extremity (left + width or top + height). Note that it would be more optimized to directly\n   * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n   * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n   *\n   * @param {number[]} timestamps - timestamps sorted from lowest to highest.\n   * @param {string} distribution - If 'linear', timestamps will be spread linearly along the min\n   * and max range, so basically, the table will contains only two items: {min, 0} and {max, 1}.\n   * If 'series', timestamps will be positioned at the same distance from each other. In this\n   * case, only timestamps that break the time linearity are registered, meaning that in the\n   * best case, all timestamps are linear, the table contains only min and max.\n   */\n\n\n  function buildLookupTable(timestamps, min, max, distribution) {\n    if (distribution === 'linear' || !timestamps.length) {\n      return [{\n        time: min,\n        pos: 0\n      }, {\n        time: max,\n        pos: 1\n      }];\n    }\n\n    var table = [];\n    var items = [min];\n    var i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n\n      if (curr > min && curr < max) {\n        items.push(curr);\n      }\n    }\n\n    items.push(max);\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i]; // only add points that breaks the scale linearity\n\n      if (prev === undefined || next === undefined || Math.round((next + prev) / 2) !== curr) {\n        table.push({\n          time: curr,\n          pos: i / (ilen - 1)\n        });\n      }\n    }\n\n    return table;\n  } // @see adapted from https://www.anujgakhar.com/2014/03/01/binary-search-in-javascript/\n\n\n  function lookup(table, key, value) {\n    var lo = 0;\n    var hi = table.length - 1;\n    var mid, i0, i1;\n\n    while (lo >= 0 && lo <= hi) {\n      mid = lo + hi >> 1;\n      i0 = table[mid - 1] || null;\n      i1 = table[mid];\n\n      if (!i0) {\n        // given value is outside table (before first item)\n        return {\n          lo: null,\n          hi: i1\n        };\n      } else if (i1[key] < value) {\n        lo = mid + 1;\n      } else if (i0[key] > value) {\n        hi = mid - 1;\n      } else {\n        return {\n          lo: i0,\n          hi: i1\n        };\n      }\n    } // given value is outside table (after last item)\n\n\n    return {\n      lo: i1,\n      hi: null\n    };\n  }\n  /**\n   * Linearly interpolates the given source `value` using the table items `skey` values and\n   * returns the associated `tkey` value. For example, interpolate(table, 'time', 42, 'pos')\n   * returns the position for a timestamp equal to 42. If value is out of bounds, values at\n   * index [0, 1] or [n - 1, n] are used for the interpolation.\n   */\n\n\n  function interpolate$1(table, skey, sval, tkey) {\n    var range = lookup(table, skey, sval); // Note: the lookup table ALWAYS contains at least 2 items (min and max)\n\n    var prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;\n    var next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;\n    var span = next[skey] - prev[skey];\n    var ratio = span ? (sval - prev[skey]) / span : 0;\n    var offset = (next[tkey] - prev[tkey]) * ratio;\n    return prev[tkey] + offset;\n  }\n\n  function toTimestamp(scale, input) {\n    var adapter = scale._adapter;\n    var options = scale.options.time;\n    var parser = options.parser;\n    var format = parser || options.format;\n    var value = input;\n\n    if (typeof parser === 'function') {\n      value = parser(value);\n    } // Only parse if its not a timestamp already\n\n\n    if (!helpers$1.isFinite(value)) {\n      value = typeof format === 'string' ? adapter.parse(value, format) : adapter.parse(value);\n    }\n\n    if (value !== null) {\n      return +value;\n    } // Labels are in an incompatible format and no `parser` has been provided.\n    // The user might still use the deprecated `format` option for parsing.\n\n\n    if (!parser && typeof format === 'function') {\n      value = format(input); // `format` could return something else than a timestamp, if so, parse it\n\n      if (!helpers$1.isFinite(value)) {\n        value = adapter.parse(value);\n      }\n    }\n\n    return value;\n  }\n\n  function parse(scale, input) {\n    if (helpers$1.isNullOrUndef(input)) {\n      return null;\n    }\n\n    var options = scale.options.time;\n    var value = toTimestamp(scale, scale.getRightValue(input));\n\n    if (value === null) {\n      return value;\n    }\n\n    if (options.round) {\n      value = +scale._adapter.startOf(value, options.round);\n    }\n\n    return value;\n  }\n  /**\n   * Returns the number of unit to skip to be able to display up to `capacity` number of ticks\n   * in `unit` for the given `min` / `max` range and respecting the interval steps constraints.\n   */\n\n\n  function determineStepSize(min, max, unit, capacity) {\n    var range = max - min;\n    var interval = INTERVALS[unit];\n    var milliseconds = interval.size;\n    var steps = interval.steps;\n    var i, ilen, factor;\n\n    if (!steps) {\n      return Math.ceil(range / (capacity * milliseconds));\n    }\n\n    for (i = 0, ilen = steps.length; i < ilen; ++i) {\n      factor = steps[i];\n\n      if (Math.ceil(range / (milliseconds * factor)) <= capacity) {\n        break;\n      }\n    }\n\n    return factor;\n  }\n  /**\n   * Figures out what unit results in an appropriate number of auto-generated ticks\n   */\n\n\n  function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    var ilen = UNITS.length;\n    var i, interval, factor;\n\n    for (i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n      interval = INTERVALS[UNITS[i]];\n      factor = interval.steps ? interval.steps[interval.steps.length - 1] : MAX_INTEGER;\n\n      if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n        return UNITS[i];\n      }\n    }\n\n    return UNITS[ilen - 1];\n  }\n  /**\n   * Figures out what unit to format a set of ticks with\n   */\n\n\n  function determineUnitForFormatting(scale, ticks, minUnit, min, max) {\n    var ilen = UNITS.length;\n    var i, unit;\n\n    for (i = ilen - 1; i >= UNITS.indexOf(minUnit); i--) {\n      unit = UNITS[i];\n\n      if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= ticks.length) {\n        return unit;\n      }\n    }\n\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n  }\n\n  function determineMajorUnit(unit) {\n    for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n      if (INTERVALS[UNITS[i]].common) {\n        return UNITS[i];\n      }\n    }\n  }\n  /**\n   * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n   * `minor` unit, aligned on the `major` unit and using the given scale time `options`.\n   * Important: this method can return ticks outside the min and max range, it's the\n   * responsibility of the calling code to clamp values if needed.\n   */\n\n\n  function generate(scale, min, max, capacity) {\n    var adapter = scale._adapter;\n    var options = scale.options;\n    var timeOpts = options.time;\n    var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, capacity);\n    var major = determineMajorUnit(minor);\n    var stepSize = valueOrDefault$c(timeOpts.stepSize, timeOpts.unitStepSize);\n    var weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    var majorTicksEnabled = options.ticks.major.enabled;\n    var interval = INTERVALS[minor];\n    var first = min;\n    var last = max;\n    var ticks = [];\n    var time;\n\n    if (!stepSize) {\n      stepSize = determineStepSize(min, max, minor, capacity);\n    } // For 'week' unit, handle the first day of week option\n\n\n    if (weekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n      last = +adapter.startOf(last, 'isoWeek', weekday);\n    } // Align first/last ticks on unit\n\n\n    first = +adapter.startOf(first, weekday ? 'day' : minor);\n    last = +adapter.startOf(last, weekday ? 'day' : minor); // Make sure that the last tick include max\n\n    if (last < max) {\n      last = +adapter.add(last, 1, minor);\n    }\n\n    time = first;\n\n    if (majorTicksEnabled && major && !weekday && !timeOpts.round) {\n      // Align the first tick on the previous `minor` unit aligned on the `major` unit:\n      // we first aligned time on the previous `major` unit then add the number of full\n      // stepSize there is between first and the previous major time.\n      time = +adapter.startOf(time, major);\n      time = +adapter.add(time, ~~((first - time) / (interval.size * stepSize)) * stepSize, minor);\n    }\n\n    for (; time < last; time = +adapter.add(time, stepSize, minor)) {\n      ticks.push(+time);\n    }\n\n    ticks.push(+time);\n    return ticks;\n  }\n  /**\n   * Returns the start and end offsets from edges in the form of {start, end}\n   * where each value is a relative width to the scale and ranges between 0 and 1.\n   * They add extra margins on the both sides by scaling down the original scale.\n   * Offsets are added when the `offset` option is true.\n   */\n\n\n  function computeOffsets(table, ticks, min, max, options) {\n    var start = 0;\n    var end = 0;\n    var first, last;\n\n    if (options.offset && ticks.length) {\n      if (!options.time.min) {\n        first = interpolate$1(table, 'time', ticks[0], 'pos');\n\n        if (ticks.length === 1) {\n          start = 1 - first;\n        } else {\n          start = (interpolate$1(table, 'time', ticks[1], 'pos') - first) / 2;\n        }\n      }\n\n      if (!options.time.max) {\n        last = interpolate$1(table, 'time', ticks[ticks.length - 1], 'pos');\n\n        if (ticks.length === 1) {\n          end = last;\n        } else {\n          end = (last - interpolate$1(table, 'time', ticks[ticks.length - 2], 'pos')) / 2;\n        }\n      }\n    }\n\n    return {\n      start: start,\n      end: end\n    };\n  }\n\n  function ticksFromTimestamps(scale, values, majorUnit) {\n    var ticks = [];\n    var i, ilen, value, major;\n\n    for (i = 0, ilen = values.length; i < ilen; ++i) {\n      value = values[i];\n      major = majorUnit ? value === +scale._adapter.startOf(value, majorUnit) : false;\n      ticks.push({\n        value: value,\n        major: major\n      });\n    }\n\n    return ticks;\n  }\n\n  var defaultConfig$4 = {\n    position: 'bottom',\n\n    /**\n     * Data distribution along the scale:\n     * - 'linear': data are spread according to their time (distances can vary),\n     * - 'series': data are spread at the same distance from each other.\n     * @see https://github.com/chartjs/Chart.js/pull/4507\n     * @since 2.7.0\n     */\n    distribution: 'linear',\n\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n    adapters: {},\n    time: {\n      parser: false,\n      // false == a pattern string from https://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment\n      format: false,\n      // DEPRECATED false == date objects, moment object, callback or a pattern string from https://momentjs.com/docs/#/parsing/string-format/\n      unit: false,\n      // false == automatic or override with week, month, year, etc.\n      round: false,\n      // none, or override with week, month, year, etc.\n      displayFormat: false,\n      // DEPRECATED\n      isoWeekday: false,\n      // override week start day - see https://momentjs.com/docs/#/get-set/iso-weekday/\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      autoSkip: false,\n\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n      major: {\n        enabled: false\n      }\n    }\n  };\n  var scale_time = core_scale.extend({\n    initialize: function initialize() {\n      this.mergeTicksOptions();\n      core_scale.prototype.initialize.call(this);\n    },\n    update: function update() {\n      var me = this;\n      var options = me.options;\n      var time = options.time || (options.time = {});\n      var adapter = me._adapter = new core_adapters._date(options.adapters.date); // DEPRECATIONS: output a message only one time per update\n\n      if (time.format) {\n        console.warn('options.time.format is deprecated and replaced by options.time.parser.');\n      } // Backward compatibility: before introducing adapter, `displayFormats` was\n      // supposed to contain *all* unit/string pairs but this can't be resolved\n      // when loading the scale (adapters are loaded afterward), so let's populate\n      // missing formats on update\n\n\n      helpers$1.mergeIf(time.displayFormats, adapter.formats());\n      return core_scale.prototype.update.apply(me, arguments);\n    },\n\n    /**\n     * Allows data to be referenced via 't' attribute\n     */\n    getRightValue: function getRightValue(rawValue) {\n      if (rawValue && rawValue.t !== undefined) {\n        rawValue = rawValue.t;\n      }\n\n      return core_scale.prototype.getRightValue.call(this, rawValue);\n    },\n    determineDataLimits: function determineDataLimits() {\n      var me = this;\n      var chart = me.chart;\n      var adapter = me._adapter;\n      var timeOpts = me.options.time;\n      var unit = timeOpts.unit || 'day';\n      var min = MAX_INTEGER;\n      var max = MIN_INTEGER;\n      var timestamps = [];\n      var datasets = [];\n      var labels = [];\n      var i, j, ilen, jlen, data, timestamp;\n      var dataLabels = chart.data.labels || []; // Convert labels to timestamps\n\n      for (i = 0, ilen = dataLabels.length; i < ilen; ++i) {\n        labels.push(parse(me, dataLabels[i]));\n      } // Convert data to timestamps\n\n\n      for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          data = chart.data.datasets[i].data; // Let's consider that all data have the same format.\n\n          if (helpers$1.isObject(data[0])) {\n            datasets[i] = [];\n\n            for (j = 0, jlen = data.length; j < jlen; ++j) {\n              timestamp = parse(me, data[j]);\n              timestamps.push(timestamp);\n              datasets[i][j] = timestamp;\n            }\n          } else {\n            for (j = 0, jlen = labels.length; j < jlen; ++j) {\n              timestamps.push(labels[j]);\n            }\n\n            datasets[i] = labels.slice(0);\n          }\n        } else {\n          datasets[i] = [];\n        }\n      }\n\n      if (labels.length) {\n        // Sort labels **after** data have been converted\n        labels = arrayUnique(labels).sort(sorter);\n        min = Math.min(min, labels[0]);\n        max = Math.max(max, labels[labels.length - 1]);\n      }\n\n      if (timestamps.length) {\n        timestamps = arrayUnique(timestamps).sort(sorter);\n        min = Math.min(min, timestamps[0]);\n        max = Math.max(max, timestamps[timestamps.length - 1]);\n      }\n\n      min = parse(me, timeOpts.min) || min;\n      max = parse(me, timeOpts.max) || max; // In case there is no valid min/max, set limits based on unit time option\n\n      min = min === MAX_INTEGER ? +adapter.startOf(Date.now(), unit) : min;\n      max = max === MIN_INTEGER ? +adapter.endOf(Date.now(), unit) + 1 : max; // Make sure that max is strictly higher than min (required by the lookup table)\n\n      me.min = Math.min(min, max);\n      me.max = Math.max(min + 1, max); // PRIVATE\n\n      me._horizontal = me.isHorizontal();\n      me._table = [];\n      me._timestamps = {\n        data: timestamps,\n        datasets: datasets,\n        labels: labels\n      };\n    },\n    buildTicks: function buildTicks() {\n      var me = this;\n      var min = me.min;\n      var max = me.max;\n      var options = me.options;\n      var timeOpts = options.time;\n      var timestamps = [];\n      var ticks = [];\n      var i, ilen, timestamp;\n\n      switch (options.ticks.source) {\n        case 'data':\n          timestamps = me._timestamps.data;\n          break;\n\n        case 'labels':\n          timestamps = me._timestamps.labels;\n          break;\n\n        case 'auto':\n        default:\n          timestamps = generate(me, min, max, me.getLabelCapacity(min), options);\n      }\n\n      if (options.bounds === 'ticks' && timestamps.length) {\n        min = timestamps[0];\n        max = timestamps[timestamps.length - 1];\n      } // Enforce limits with user min/max options\n\n\n      min = parse(me, timeOpts.min) || min;\n      max = parse(me, timeOpts.max) || max; // Remove ticks outside the min/max range\n\n      for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n        timestamp = timestamps[i];\n\n        if (timestamp >= min && timestamp <= max) {\n          ticks.push(timestamp);\n        }\n      }\n\n      me.min = min;\n      me.max = max; // PRIVATE\n\n      me._unit = timeOpts.unit || determineUnitForFormatting(me, ticks, timeOpts.minUnit, me.min, me.max);\n      me._majorUnit = determineMajorUnit(me._unit);\n      me._table = buildLookupTable(me._timestamps.data, min, max, options.distribution);\n      me._offsets = computeOffsets(me._table, ticks, min, max, options);\n\n      if (options.ticks.reverse) {\n        ticks.reverse();\n      }\n\n      return ticksFromTimestamps(me, ticks, me._majorUnit);\n    },\n    getLabelForIndex: function getLabelForIndex(index, datasetIndex) {\n      var me = this;\n      var adapter = me._adapter;\n      var data = me.chart.data;\n      var timeOpts = me.options.time;\n      var label = data.labels && index < data.labels.length ? data.labels[index] : '';\n      var value = data.datasets[datasetIndex].data[index];\n\n      if (helpers$1.isObject(value)) {\n        label = me.getRightValue(value);\n      }\n\n      if (timeOpts.tooltipFormat) {\n        return adapter.format(toTimestamp(me, label), timeOpts.tooltipFormat);\n      }\n\n      if (typeof label === 'string') {\n        return label;\n      }\n\n      return adapter.format(toTimestamp(me, label), timeOpts.displayFormats.datetime);\n    },\n\n    /**\n     * Function to format an individual tick mark\n     * @private\n     */\n    tickFormatFunction: function tickFormatFunction(time, index, ticks, format) {\n      var me = this;\n      var adapter = me._adapter;\n      var options = me.options;\n      var formats = options.time.displayFormats;\n      var minorFormat = formats[me._unit];\n      var majorUnit = me._majorUnit;\n      var majorFormat = formats[majorUnit];\n      var majorTime = +adapter.startOf(time, majorUnit);\n      var majorTickOpts = options.ticks.major;\n      var major = majorTickOpts.enabled && majorUnit && majorFormat && time === majorTime;\n      var label = adapter.format(time, format ? format : major ? majorFormat : minorFormat);\n      var tickOpts = major ? majorTickOpts : options.ticks.minor;\n      var formatter = valueOrDefault$c(tickOpts.callback, tickOpts.userCallback);\n      return formatter ? formatter(label, index, ticks) : label;\n    },\n    convertTicksToLabels: function convertTicksToLabels(ticks) {\n      var labels = [];\n      var i, ilen;\n\n      for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n        labels.push(this.tickFormatFunction(ticks[i].value, i, ticks));\n      }\n\n      return labels;\n    },\n\n    /**\n     * @private\n     */\n    getPixelForOffset: function getPixelForOffset(time) {\n      var me = this;\n      var isReverse = me.options.ticks.reverse;\n      var size = me._horizontal ? me.width : me.height;\n      var start = me._horizontal ? isReverse ? me.right : me.left : isReverse ? me.bottom : me.top;\n      var pos = interpolate$1(me._table, 'time', time, 'pos');\n      var offset = size * (me._offsets.start + pos) / (me._offsets.start + 1 + me._offsets.end);\n      return isReverse ? start - offset : start + offset;\n    },\n    getPixelForValue: function getPixelForValue(value, index, datasetIndex) {\n      var me = this;\n      var time = null;\n\n      if (index !== undefined && datasetIndex !== undefined) {\n        time = me._timestamps.datasets[datasetIndex][index];\n      }\n\n      if (time === null) {\n        time = parse(me, value);\n      }\n\n      if (time !== null) {\n        return me.getPixelForOffset(time);\n      }\n    },\n    getPixelForTick: function getPixelForTick(index) {\n      var ticks = this.getTicks();\n      return index >= 0 && index < ticks.length ? this.getPixelForOffset(ticks[index].value) : null;\n    },\n    getValueForPixel: function getValueForPixel(pixel) {\n      var me = this;\n      var size = me._horizontal ? me.width : me.height;\n      var start = me._horizontal ? me.left : me.top;\n      var pos = (size ? (pixel - start) / size : 0) * (me._offsets.start + 1 + me._offsets.start) - me._offsets.end;\n      var time = interpolate$1(me._table, 'pos', pos, 'time'); // DEPRECATION, we should return time directly\n\n      return me._adapter._create(time);\n    },\n\n    /**\n     * Crude approximation of what the label width might be\n     * @private\n     */\n    getLabelWidth: function getLabelWidth(label) {\n      var me = this;\n      var ticksOpts = me.options.ticks;\n      var tickLabelWidth = me.ctx.measureText(label).width;\n      var angle = helpers$1.toRadians(ticksOpts.maxRotation);\n      var cosRotation = Math.cos(angle);\n      var sinRotation = Math.sin(angle);\n      var tickFontSize = valueOrDefault$c(ticksOpts.fontSize, core_defaults.global.defaultFontSize);\n      return tickLabelWidth * cosRotation + tickFontSize * sinRotation;\n    },\n\n    /**\n     * @private\n     */\n    getLabelCapacity: function getLabelCapacity(exampleTime) {\n      var me = this; // pick the longest format (milliseconds) for guestimation\n\n      var format = me.options.time.displayFormats.millisecond;\n      var exampleLabel = me.tickFormatFunction(exampleTime, 0, [], format);\n      var tickLabelWidth = me.getLabelWidth(exampleLabel);\n      var innerWidth = me.isHorizontal() ? me.width : me.height;\n      var capacity = Math.floor(innerWidth / tickLabelWidth);\n      return capacity > 0 ? capacity : 1;\n    }\n  }); // INTERNAL: static default options, registered in src/index.js\n\n  var _defaults$4 = defaultConfig$4;\n  scale_time._defaults = _defaults$4;\n  var scales = {\n    category: scale_category,\n    linear: scale_linear,\n    logarithmic: scale_logarithmic,\n    radialLinear: scale_radialLinear,\n    time: scale_time\n  };\n  var FORMATS = {\n    datetime: 'MMM D, YYYY, h:mm:ss a',\n    millisecond: 'h:mm:ss.SSS a',\n    second: 'h:mm:ss a',\n    minute: 'h:mm a',\n    hour: 'hA',\n    day: 'MMM D',\n    week: 'll',\n    month: 'MMM YYYY',\n    quarter: '[Q]Q - YYYY',\n    year: 'YYYY'\n  };\n\n  core_adapters._date.override(typeof moment === 'function' ? {\n    _id: 'moment',\n    // DEBUG ONLY\n    formats: function formats() {\n      return FORMATS;\n    },\n    parse: function parse(value, format) {\n      if (typeof value === 'string' && typeof format === 'string') {\n        value = moment(value, format);\n      } else if (!(value instanceof moment)) {\n        value = moment(value);\n      }\n\n      return value.isValid() ? value.valueOf() : null;\n    },\n    format: function format(time, _format) {\n      return moment(time).format(_format);\n    },\n    add: function add(time, amount, unit) {\n      return moment(time).add(amount, unit).valueOf();\n    },\n    diff: function diff(max, min, unit) {\n      return moment.duration(moment(max).diff(moment(min))).as(unit);\n    },\n    startOf: function startOf(time, unit, weekday) {\n      time = moment(time);\n\n      if (unit === 'isoWeek') {\n        return time.isoWeekday(weekday).valueOf();\n      }\n\n      return time.startOf(unit).valueOf();\n    },\n    endOf: function endOf(time, unit) {\n      return moment(time).endOf(unit).valueOf();\n    },\n    // DEPRECATIONS\n\n    /**\n     * Provided for backward compatibility with scale.getValueForPixel().\n     * @deprecated since version 2.8.0\n     * @todo remove at version 3\n     * @private\n     */\n    _create: function _create(time) {\n      return moment(time);\n    }\n  } : {});\n\n  core_defaults._set('global', {\n    plugins: {\n      filler: {\n        propagate: true\n      }\n    }\n  });\n\n  var mappers = {\n    dataset: function dataset(source) {\n      var index = source.fill;\n      var chart = source.chart;\n      var meta = chart.getDatasetMeta(index);\n      var visible = meta && chart.isDatasetVisible(index);\n      var points = visible && meta.dataset._children || [];\n      var length = points.length || 0;\n      return !length ? null : function (point, i) {\n        return i < length && points[i]._view || null;\n      };\n    },\n    boundary: function boundary(source) {\n      var boundary = source.boundary;\n      var x = boundary ? boundary.x : null;\n      var y = boundary ? boundary.y : null;\n      return function (point) {\n        return {\n          x: x === null ? point.x : x,\n          y: y === null ? point.y : y\n        };\n      };\n    }\n  }; // @todo if (fill[0] === '#')\n\n  function decodeFill(el, index, count) {\n    var model = el._model || {};\n    var fill = model.fill;\n    var target;\n\n    if (fill === undefined) {\n      fill = !!model.backgroundColor;\n    }\n\n    if (fill === false || fill === null) {\n      return false;\n    }\n\n    if (fill === true) {\n      return 'origin';\n    }\n\n    target = parseFloat(fill, 10);\n\n    if (isFinite(target) && Math.floor(target) === target) {\n      if (fill[0] === '-' || fill[0] === '+') {\n        target = index + target;\n      }\n\n      if (target === index || target < 0 || target >= count) {\n        return false;\n      }\n\n      return target;\n    }\n\n    switch (fill) {\n      // compatibility\n      case 'bottom':\n        return 'start';\n\n      case 'top':\n        return 'end';\n\n      case 'zero':\n        return 'origin';\n      // supported boundaries\n\n      case 'origin':\n      case 'start':\n      case 'end':\n        return fill;\n      // invalid fill values\n\n      default:\n        return false;\n    }\n  }\n\n  function computeBoundary(source) {\n    var model = source.el._model || {};\n    var scale = source.el._scale || {};\n    var fill = source.fill;\n    var target = null;\n    var horizontal;\n\n    if (isFinite(fill)) {\n      return null;\n    } // Backward compatibility: until v3, we still need to support boundary values set on\n    // the model (scaleTop, scaleBottom and scaleZero) because some external plugins and\n    // controllers might still use it (e.g. the Smith chart).\n\n\n    if (fill === 'start') {\n      target = model.scaleBottom === undefined ? scale.bottom : model.scaleBottom;\n    } else if (fill === 'end') {\n      target = model.scaleTop === undefined ? scale.top : model.scaleTop;\n    } else if (model.scaleZero !== undefined) {\n      target = model.scaleZero;\n    } else if (scale.getBasePosition) {\n      target = scale.getBasePosition();\n    } else if (scale.getBasePixel) {\n      target = scale.getBasePixel();\n    }\n\n    if (target !== undefined && target !== null) {\n      if (target.x !== undefined && target.y !== undefined) {\n        return target;\n      }\n\n      if (helpers$1.isFinite(target)) {\n        horizontal = scale.isHorizontal();\n        return {\n          x: horizontal ? target : null,\n          y: horizontal ? null : target\n        };\n      }\n    }\n\n    return null;\n  }\n\n  function resolveTarget(sources, index, propagate) {\n    var source = sources[index];\n    var fill = source.fill;\n    var visited = [index];\n    var target;\n\n    if (!propagate) {\n      return fill;\n    }\n\n    while (fill !== false && visited.indexOf(fill) === -1) {\n      if (!isFinite(fill)) {\n        return fill;\n      }\n\n      target = sources[fill];\n\n      if (!target) {\n        return false;\n      }\n\n      if (target.visible) {\n        return fill;\n      }\n\n      visited.push(fill);\n      fill = target.fill;\n    }\n\n    return false;\n  }\n\n  function createMapper(source) {\n    var fill = source.fill;\n    var type = 'dataset';\n\n    if (fill === false) {\n      return null;\n    }\n\n    if (!isFinite(fill)) {\n      type = 'boundary';\n    }\n\n    return mappers[type](source);\n  }\n\n  function isDrawable(point) {\n    return point && !point.skip;\n  }\n\n  function drawArea(ctx, curve0, curve1, len0, len1) {\n    var i;\n\n    if (!len0 || !len1) {\n      return;\n    } // building first area curve (normal)\n\n\n    ctx.moveTo(curve0[0].x, curve0[0].y);\n\n    for (i = 1; i < len0; ++i) {\n      helpers$1.canvas.lineTo(ctx, curve0[i - 1], curve0[i]);\n    } // joining the two area curves\n\n\n    ctx.lineTo(curve1[len1 - 1].x, curve1[len1 - 1].y); // building opposite area curve (reverse)\n\n    for (i = len1 - 1; i > 0; --i) {\n      helpers$1.canvas.lineTo(ctx, curve1[i], curve1[i - 1], true);\n    }\n  }\n\n  function doFill(ctx, points, mapper, view, color, loop) {\n    var count = points.length;\n    var span = view.spanGaps;\n    var curve0 = [];\n    var curve1 = [];\n    var len0 = 0;\n    var len1 = 0;\n    var i, ilen, index, p0, p1, d0, d1;\n    ctx.beginPath();\n\n    for (i = 0, ilen = count + !!loop; i < ilen; ++i) {\n      index = i % count;\n      p0 = points[index]._view;\n      p1 = mapper(p0, index, view);\n      d0 = isDrawable(p0);\n      d1 = isDrawable(p1);\n\n      if (d0 && d1) {\n        len0 = curve0.push(p0);\n        len1 = curve1.push(p1);\n      } else if (len0 && len1) {\n        if (!span) {\n          drawArea(ctx, curve0, curve1, len0, len1);\n          len0 = len1 = 0;\n          curve0 = [];\n          curve1 = [];\n        } else {\n          if (d0) {\n            curve0.push(p0);\n          }\n\n          if (d1) {\n            curve1.push(p1);\n          }\n        }\n      }\n    }\n\n    drawArea(ctx, curve0, curve1, len0, len1);\n    ctx.closePath();\n    ctx.fillStyle = color;\n    ctx.fill();\n  }\n\n  var plugin_filler = {\n    id: 'filler',\n    afterDatasetsUpdate: function afterDatasetsUpdate(chart, options) {\n      var count = (chart.data.datasets || []).length;\n      var propagate = options.propagate;\n      var sources = [];\n      var meta, i, el, source;\n\n      for (i = 0; i < count; ++i) {\n        meta = chart.getDatasetMeta(i);\n        el = meta.dataset;\n        source = null;\n\n        if (el && el._model && el instanceof elements.Line) {\n          source = {\n            visible: chart.isDatasetVisible(i),\n            fill: decodeFill(el, i, count),\n            chart: chart,\n            el: el\n          };\n        }\n\n        meta.$filler = source;\n        sources.push(source);\n      }\n\n      for (i = 0; i < count; ++i) {\n        source = sources[i];\n\n        if (!source) {\n          continue;\n        }\n\n        source.fill = resolveTarget(sources, i, propagate);\n        source.boundary = computeBoundary(source);\n        source.mapper = createMapper(source);\n      }\n    },\n    beforeDatasetDraw: function beforeDatasetDraw(chart, args) {\n      var meta = args.meta.$filler;\n\n      if (!meta) {\n        return;\n      }\n\n      var ctx = chart.ctx;\n      var el = meta.el;\n      var view = el._view;\n      var points = el._children || [];\n      var mapper = meta.mapper;\n      var color = view.backgroundColor || core_defaults.global.defaultColor;\n\n      if (mapper && color && points.length) {\n        helpers$1.canvas.clipArea(ctx, chart.chartArea);\n        doFill(ctx, points, mapper, view, color, el._loop);\n        helpers$1.canvas.unclipArea(ctx);\n      }\n    }\n  };\n  var noop$1 = helpers$1.noop;\n  var valueOrDefault$d = helpers$1.valueOrDefault;\n\n  core_defaults._set('global', {\n    legend: {\n      display: true,\n      position: 'top',\n      fullWidth: true,\n      reverse: false,\n      weight: 1000,\n      // a callback that will handle\n      onClick: function onClick(e, legendItem) {\n        var index = legendItem.datasetIndex;\n        var ci = this.chart;\n        var meta = ci.getDatasetMeta(index); // See controller.isDatasetVisible comment\n\n        meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null; // We hid a dataset ... rerender the chart\n\n        ci.update();\n      },\n      onHover: null,\n      onLeave: null,\n      labels: {\n        boxWidth: 40,\n        padding: 10,\n        // Generates labels shown in the legend\n        // Valid properties to return:\n        // text : text to display\n        // fillStyle : fill of coloured box\n        // strokeStyle: stroke of coloured box\n        // hidden : if this legend item refers to a hidden item\n        // lineCap : cap style for line\n        // lineDash\n        // lineDashOffset :\n        // lineJoin :\n        // lineWidth :\n        generateLabels: function generateLabels(chart) {\n          var data = chart.data;\n          return helpers$1.isArray(data.datasets) ? data.datasets.map(function (dataset, i) {\n            return {\n              text: dataset.label,\n              fillStyle: !helpers$1.isArray(dataset.backgroundColor) ? dataset.backgroundColor : dataset.backgroundColor[0],\n              hidden: !chart.isDatasetVisible(i),\n              lineCap: dataset.borderCapStyle,\n              lineDash: dataset.borderDash,\n              lineDashOffset: dataset.borderDashOffset,\n              lineJoin: dataset.borderJoinStyle,\n              lineWidth: dataset.borderWidth,\n              strokeStyle: dataset.borderColor,\n              pointStyle: dataset.pointStyle,\n              // Below is extra data used for toggling the datasets\n              datasetIndex: i\n            };\n          }, this) : [];\n        }\n      }\n    },\n    legendCallback: function legendCallback(chart) {\n      var text = [];\n      text.push('<ul class=\"' + chart.id + '-legend\">');\n\n      for (var i = 0; i < chart.data.datasets.length; i++) {\n        text.push('<li><span style=\"background-color:' + chart.data.datasets[i].backgroundColor + '\"></span>');\n\n        if (chart.data.datasets[i].label) {\n          text.push(chart.data.datasets[i].label);\n        }\n\n        text.push('</li>');\n      }\n\n      text.push('</ul>');\n      return text.join('');\n    }\n  });\n  /**\n   * Helper function to get the box width based on the usePointStyle option\n   * @param {object} labelopts - the label options on the legend\n   * @param {number} fontSize - the label font size\n   * @return {number} width of the color box area\n   */\n\n\n  function getBoxWidth(labelOpts, fontSize) {\n    return labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ? fontSize : labelOpts.boxWidth;\n  }\n  /**\n   * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!\n   */\n\n\n  var Legend = core_element.extend({\n    initialize: function initialize(config) {\n      helpers$1.extend(this, config); // Contains hit boxes for each dataset (in dataset order)\n\n      this.legendHitBoxes = [];\n      /**\n      \t * @private\n      \t */\n\n      this._hoveredItem = null; // Are we in doughnut mode which has a different data type\n\n      this.doughnutMode = false;\n    },\n    // These methods are ordered by lifecycle. Utilities then follow.\n    // Any function defined here is inherited by all legend types.\n    // Any function can be extended by the legend type\n    beforeUpdate: noop$1,\n    update: function update(maxWidth, maxHeight, margins) {\n      var me = this; // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\n      me.beforeUpdate(); // Absorb the master measurements\n\n      me.maxWidth = maxWidth;\n      me.maxHeight = maxHeight;\n      me.margins = margins; // Dimensions\n\n      me.beforeSetDimensions();\n      me.setDimensions();\n      me.afterSetDimensions(); // Labels\n\n      me.beforeBuildLabels();\n      me.buildLabels();\n      me.afterBuildLabels(); // Fit\n\n      me.beforeFit();\n      me.fit();\n      me.afterFit(); //\n\n      me.afterUpdate();\n      return me.minSize;\n    },\n    afterUpdate: noop$1,\n    //\n    beforeSetDimensions: noop$1,\n    setDimensions: function setDimensions() {\n      var me = this; // Set the unconstrained dimension before label rotation\n\n      if (me.isHorizontal()) {\n        // Reset position before calculating rotation\n        me.width = me.maxWidth;\n        me.left = 0;\n        me.right = me.width;\n      } else {\n        me.height = me.maxHeight; // Reset position before calculating rotation\n\n        me.top = 0;\n        me.bottom = me.height;\n      } // Reset padding\n\n\n      me.paddingLeft = 0;\n      me.paddingTop = 0;\n      me.paddingRight = 0;\n      me.paddingBottom = 0; // Reset minSize\n\n      me.minSize = {\n        width: 0,\n        height: 0\n      };\n    },\n    afterSetDimensions: noop$1,\n    //\n    beforeBuildLabels: noop$1,\n    buildLabels: function buildLabels() {\n      var me = this;\n      var labelOpts = me.options.labels || {};\n      var legendItems = helpers$1.callback(labelOpts.generateLabels, [me.chart], me) || [];\n\n      if (labelOpts.filter) {\n        legendItems = legendItems.filter(function (item) {\n          return labelOpts.filter(item, me.chart.data);\n        });\n      }\n\n      if (me.options.reverse) {\n        legendItems.reverse();\n      }\n\n      me.legendItems = legendItems;\n    },\n    afterBuildLabels: noop$1,\n    //\n    beforeFit: noop$1,\n    fit: function fit() {\n      var me = this;\n      var opts = me.options;\n      var labelOpts = opts.labels;\n      var display = opts.display;\n      var ctx = me.ctx;\n\n      var labelFont = helpers$1.options._parseFont(labelOpts);\n\n      var fontSize = labelFont.size; // Reset hit boxes\n\n      var hitboxes = me.legendHitBoxes = [];\n      var minSize = me.minSize;\n      var isHorizontal = me.isHorizontal();\n\n      if (isHorizontal) {\n        minSize.width = me.maxWidth; // fill all the width\n\n        minSize.height = display ? 10 : 0;\n      } else {\n        minSize.width = display ? 10 : 0;\n        minSize.height = me.maxHeight; // fill all the height\n      } // Increase sizes here\n\n\n      if (display) {\n        ctx.font = labelFont.string;\n\n        if (isHorizontal) {\n          // Labels\n          // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n          var lineWidths = me.lineWidths = [0];\n          var totalHeight = 0;\n          ctx.textAlign = 'left';\n          ctx.textBaseline = 'top';\n          helpers$1.each(me.legendItems, function (legendItem, i) {\n            var boxWidth = getBoxWidth(labelOpts, fontSize);\n            var width = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n\n            if (i === 0 || lineWidths[lineWidths.length - 1] + width + labelOpts.padding > minSize.width) {\n              totalHeight += fontSize + labelOpts.padding;\n              lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = labelOpts.padding;\n            } // Store the hitbox width and height here. Final position will be updated in `draw`\n\n\n            hitboxes[i] = {\n              left: 0,\n              top: 0,\n              width: width,\n              height: fontSize\n            };\n            lineWidths[lineWidths.length - 1] += width + labelOpts.padding;\n          });\n          minSize.height += totalHeight;\n        } else {\n          var vPadding = labelOpts.padding;\n          var columnWidths = me.columnWidths = [];\n          var totalWidth = labelOpts.padding;\n          var currentColWidth = 0;\n          var currentColHeight = 0;\n          var itemHeight = fontSize + vPadding;\n          helpers$1.each(me.legendItems, function (legendItem, i) {\n            var boxWidth = getBoxWidth(labelOpts, fontSize);\n            var itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width; // If too tall, go to new column\n\n            if (i > 0 && currentColHeight + itemHeight > minSize.height - vPadding) {\n              totalWidth += currentColWidth + labelOpts.padding;\n              columnWidths.push(currentColWidth); // previous column width\n\n              currentColWidth = 0;\n              currentColHeight = 0;\n            } // Get max width\n\n\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight; // Store the hitbox width and height here. Final position will be updated in `draw`\n\n            hitboxes[i] = {\n              left: 0,\n              top: 0,\n              width: itemWidth,\n              height: fontSize\n            };\n          });\n          totalWidth += currentColWidth;\n          columnWidths.push(currentColWidth);\n          minSize.width += totalWidth;\n        }\n      }\n\n      me.width = minSize.width;\n      me.height = minSize.height;\n    },\n    afterFit: noop$1,\n    // Shared Methods\n    isHorizontal: function isHorizontal() {\n      return this.options.position === 'top' || this.options.position === 'bottom';\n    },\n    // Actually draw the legend on the canvas\n    draw: function draw() {\n      var me = this;\n      var opts = me.options;\n      var labelOpts = opts.labels;\n      var globalDefaults = core_defaults.global;\n      var defaultColor = globalDefaults.defaultColor;\n      var lineDefault = globalDefaults.elements.line;\n      var legendWidth = me.width;\n      var lineWidths = me.lineWidths;\n\n      if (opts.display) {\n        var ctx = me.ctx;\n        var fontColor = valueOrDefault$d(labelOpts.fontColor, globalDefaults.defaultFontColor);\n\n        var labelFont = helpers$1.options._parseFont(labelOpts);\n\n        var fontSize = labelFont.size;\n        var cursor; // Canvas setup\n\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.strokeStyle = fontColor; // for strikethrough effect\n\n        ctx.fillStyle = fontColor; // render in correct colour\n\n        ctx.font = labelFont.string;\n        var boxWidth = getBoxWidth(labelOpts, fontSize);\n        var hitboxes = me.legendHitBoxes; // current position\n\n        var drawLegendBox = function drawLegendBox(x, y, legendItem) {\n          if (isNaN(boxWidth) || boxWidth <= 0) {\n            return;\n          } // Set the ctx for the box\n\n\n          ctx.save();\n          var lineWidth = valueOrDefault$d(legendItem.lineWidth, lineDefault.borderWidth);\n          ctx.fillStyle = valueOrDefault$d(legendItem.fillStyle, defaultColor);\n          ctx.lineCap = valueOrDefault$d(legendItem.lineCap, lineDefault.borderCapStyle);\n          ctx.lineDashOffset = valueOrDefault$d(legendItem.lineDashOffset, lineDefault.borderDashOffset);\n          ctx.lineJoin = valueOrDefault$d(legendItem.lineJoin, lineDefault.borderJoinStyle);\n          ctx.lineWidth = lineWidth;\n          ctx.strokeStyle = valueOrDefault$d(legendItem.strokeStyle, defaultColor);\n\n          if (ctx.setLineDash) {\n            // IE 9 and 10 do not support line dash\n            ctx.setLineDash(valueOrDefault$d(legendItem.lineDash, lineDefault.borderDash));\n          }\n\n          if (opts.labels && opts.labels.usePointStyle) {\n            // Recalculate x and y for drawPoint() because its expecting\n            // x and y to be center of figure (instead of top left)\n            var radius = boxWidth * Math.SQRT2 / 2;\n            var centerX = x + boxWidth / 2;\n            var centerY = y + fontSize / 2; // Draw pointStyle as legend symbol\n\n            helpers$1.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY);\n          } else {\n            // Draw box as legend symbol\n            if (lineWidth !== 0) {\n              ctx.strokeRect(x, y, boxWidth, fontSize);\n            }\n\n            ctx.fillRect(x, y, boxWidth, fontSize);\n          }\n\n          ctx.restore();\n        };\n\n        var fillText = function fillText(x, y, legendItem, textWidth) {\n          var halfFontSize = fontSize / 2;\n          var xLeft = boxWidth + halfFontSize + x;\n          var yMiddle = y + halfFontSize;\n          ctx.fillText(legendItem.text, xLeft, yMiddle);\n\n          if (legendItem.hidden) {\n            // Strikethrough the text if hidden\n            ctx.beginPath();\n            ctx.lineWidth = 2;\n            ctx.moveTo(xLeft, yMiddle);\n            ctx.lineTo(xLeft + textWidth, yMiddle);\n            ctx.stroke();\n          }\n        }; // Horizontal\n\n\n        var isHorizontal = me.isHorizontal();\n\n        if (isHorizontal) {\n          cursor = {\n            x: me.left + (legendWidth - lineWidths[0]) / 2 + labelOpts.padding,\n            y: me.top + labelOpts.padding,\n            line: 0\n          };\n        } else {\n          cursor = {\n            x: me.left + labelOpts.padding,\n            y: me.top + labelOpts.padding,\n            line: 0\n          };\n        }\n\n        var itemHeight = fontSize + labelOpts.padding;\n        helpers$1.each(me.legendItems, function (legendItem, i) {\n          var textWidth = ctx.measureText(legendItem.text).width;\n          var width = boxWidth + fontSize / 2 + textWidth;\n          var x = cursor.x;\n          var y = cursor.y; // Use (me.left + me.minSize.width) and (me.top + me.minSize.height)\n          // instead of me.right and me.bottom because me.width and me.height\n          // may have been changed since me.minSize was calculated\n\n          if (isHorizontal) {\n            if (i > 0 && x + width + labelOpts.padding > me.left + me.minSize.width) {\n              y = cursor.y += itemHeight;\n              cursor.line++;\n              x = cursor.x = me.left + (legendWidth - lineWidths[cursor.line]) / 2 + labelOpts.padding;\n            }\n          } else if (i > 0 && y + itemHeight > me.top + me.minSize.height) {\n            x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;\n            y = cursor.y = me.top + labelOpts.padding;\n            cursor.line++;\n          }\n\n          drawLegendBox(x, y, legendItem);\n          hitboxes[i].left = x;\n          hitboxes[i].top = y; // Fill the actual label\n\n          fillText(x, y, legendItem, textWidth);\n\n          if (isHorizontal) {\n            cursor.x += width + labelOpts.padding;\n          } else {\n            cursor.y += itemHeight;\n          }\n        });\n      }\n    },\n\n    /**\n     * @private\n     */\n    _getLegendItemAt: function _getLegendItemAt(x, y) {\n      var me = this;\n      var i, hitBox, lh;\n\n      if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {\n        // See if we are touching one of the dataset boxes\n        lh = me.legendHitBoxes;\n\n        for (i = 0; i < lh.length; ++i) {\n          hitBox = lh[i];\n\n          if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {\n            // Touching an element\n            return me.legendItems[i];\n          }\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Handle an event\n     * @private\n     * @param {IEvent} event - The event to handle\n     */\n    handleEvent: function handleEvent(e) {\n      var me = this;\n      var opts = me.options;\n      var type = e.type === 'mouseup' ? 'click' : e.type;\n      var hoveredItem;\n\n      if (type === 'mousemove') {\n        if (!opts.onHover && !opts.onLeave) {\n          return;\n        }\n      } else if (type === 'click') {\n        if (!opts.onClick) {\n          return;\n        }\n      } else {\n        return;\n      } // Chart event already has relative position in it\n\n\n      hoveredItem = me._getLegendItemAt(e.x, e.y);\n\n      if (type === 'click') {\n        if (hoveredItem && opts.onClick) {\n          // use e.native for backwards compatibility\n          opts.onClick.call(me, e.native, hoveredItem);\n        }\n      } else {\n        if (opts.onLeave && hoveredItem !== me._hoveredItem) {\n          if (me._hoveredItem) {\n            opts.onLeave.call(me, e.native, me._hoveredItem);\n          }\n\n          me._hoveredItem = hoveredItem;\n        }\n\n        if (opts.onHover && hoveredItem) {\n          // use e.native for backwards compatibility\n          opts.onHover.call(me, e.native, hoveredItem);\n        }\n      }\n    }\n  });\n\n  function createNewLegendAndAttach(chart, legendOpts) {\n    var legend = new Legend({\n      ctx: chart.ctx,\n      options: legendOpts,\n      chart: chart\n    });\n    core_layouts.configure(chart, legend, legendOpts);\n    core_layouts.addBox(chart, legend);\n    chart.legend = legend;\n  }\n\n  var plugin_legend = {\n    id: 'legend',\n\n    /**\n     * Backward compatibility: since 2.1.5, the legend is registered as a plugin, making\n     * Chart.Legend obsolete. To avoid a breaking change, we export the Legend as part of\n     * the plugin, which one will be re-exposed in the chart.js file.\n     * https://github.com/chartjs/Chart.js/pull/2640\n     * @private\n     */\n    _element: Legend,\n    beforeInit: function beforeInit(chart) {\n      var legendOpts = chart.options.legend;\n\n      if (legendOpts) {\n        createNewLegendAndAttach(chart, legendOpts);\n      }\n    },\n    beforeUpdate: function beforeUpdate(chart) {\n      var legendOpts = chart.options.legend;\n      var legend = chart.legend;\n\n      if (legendOpts) {\n        helpers$1.mergeIf(legendOpts, core_defaults.global.legend);\n\n        if (legend) {\n          core_layouts.configure(chart, legend, legendOpts);\n          legend.options = legendOpts;\n        } else {\n          createNewLegendAndAttach(chart, legendOpts);\n        }\n      } else if (legend) {\n        core_layouts.removeBox(chart, legend);\n        delete chart.legend;\n      }\n    },\n    afterEvent: function afterEvent(chart, e) {\n      var legend = chart.legend;\n\n      if (legend) {\n        legend.handleEvent(e);\n      }\n    }\n  };\n  var noop$2 = helpers$1.noop;\n\n  core_defaults._set('global', {\n    title: {\n      display: false,\n      fontStyle: 'bold',\n      fullWidth: true,\n      padding: 10,\n      position: 'top',\n      text: '',\n      weight: 2000 // by default greater than legend (1000) to be above\n\n    }\n  });\n  /**\n   * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!\n   */\n\n\n  var Title = core_element.extend({\n    initialize: function initialize(config) {\n      var me = this;\n      helpers$1.extend(me, config); // Contains hit boxes for each dataset (in dataset order)\n\n      me.legendHitBoxes = [];\n    },\n    // These methods are ordered by lifecycle. Utilities then follow.\n    beforeUpdate: noop$2,\n    update: function update(maxWidth, maxHeight, margins) {\n      var me = this; // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\n      me.beforeUpdate(); // Absorb the master measurements\n\n      me.maxWidth = maxWidth;\n      me.maxHeight = maxHeight;\n      me.margins = margins; // Dimensions\n\n      me.beforeSetDimensions();\n      me.setDimensions();\n      me.afterSetDimensions(); // Labels\n\n      me.beforeBuildLabels();\n      me.buildLabels();\n      me.afterBuildLabels(); // Fit\n\n      me.beforeFit();\n      me.fit();\n      me.afterFit(); //\n\n      me.afterUpdate();\n      return me.minSize;\n    },\n    afterUpdate: noop$2,\n    //\n    beforeSetDimensions: noop$2,\n    setDimensions: function setDimensions() {\n      var me = this; // Set the unconstrained dimension before label rotation\n\n      if (me.isHorizontal()) {\n        // Reset position before calculating rotation\n        me.width = me.maxWidth;\n        me.left = 0;\n        me.right = me.width;\n      } else {\n        me.height = me.maxHeight; // Reset position before calculating rotation\n\n        me.top = 0;\n        me.bottom = me.height;\n      } // Reset padding\n\n\n      me.paddingLeft = 0;\n      me.paddingTop = 0;\n      me.paddingRight = 0;\n      me.paddingBottom = 0; // Reset minSize\n\n      me.minSize = {\n        width: 0,\n        height: 0\n      };\n    },\n    afterSetDimensions: noop$2,\n    //\n    beforeBuildLabels: noop$2,\n    buildLabels: noop$2,\n    afterBuildLabels: noop$2,\n    //\n    beforeFit: noop$2,\n    fit: function fit() {\n      var me = this;\n      var opts = me.options;\n      var display = opts.display;\n      var minSize = me.minSize;\n      var lineCount = helpers$1.isArray(opts.text) ? opts.text.length : 1;\n\n      var fontOpts = helpers$1.options._parseFont(opts);\n\n      var textSize = display ? lineCount * fontOpts.lineHeight + opts.padding * 2 : 0;\n\n      if (me.isHorizontal()) {\n        minSize.width = me.maxWidth; // fill all the width\n\n        minSize.height = textSize;\n      } else {\n        minSize.width = textSize;\n        minSize.height = me.maxHeight; // fill all the height\n      }\n\n      me.width = minSize.width;\n      me.height = minSize.height;\n    },\n    afterFit: noop$2,\n    // Shared Methods\n    isHorizontal: function isHorizontal() {\n      var pos = this.options.position;\n      return pos === 'top' || pos === 'bottom';\n    },\n    // Actually draw the title block on the canvas\n    draw: function draw() {\n      var me = this;\n      var ctx = me.ctx;\n      var opts = me.options;\n\n      if (opts.display) {\n        var fontOpts = helpers$1.options._parseFont(opts);\n\n        var lineHeight = fontOpts.lineHeight;\n        var offset = lineHeight / 2 + opts.padding;\n        var rotation = 0;\n        var top = me.top;\n        var left = me.left;\n        var bottom = me.bottom;\n        var right = me.right;\n        var maxWidth, titleX, titleY;\n        ctx.fillStyle = helpers$1.valueOrDefault(opts.fontColor, core_defaults.global.defaultFontColor); // render in correct colour\n\n        ctx.font = fontOpts.string; // Horizontal\n\n        if (me.isHorizontal()) {\n          titleX = left + (right - left) / 2; // midpoint of the width\n\n          titleY = top + offset;\n          maxWidth = right - left;\n        } else {\n          titleX = opts.position === 'left' ? left + offset : right - offset;\n          titleY = top + (bottom - top) / 2;\n          maxWidth = bottom - top;\n          rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);\n        }\n\n        ctx.save();\n        ctx.translate(titleX, titleY);\n        ctx.rotate(rotation);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        var text = opts.text;\n\n        if (helpers$1.isArray(text)) {\n          var y = 0;\n\n          for (var i = 0; i < text.length; ++i) {\n            ctx.fillText(text[i], 0, y, maxWidth);\n            y += lineHeight;\n          }\n        } else {\n          ctx.fillText(text, 0, 0, maxWidth);\n        }\n\n        ctx.restore();\n      }\n    }\n  });\n\n  function createNewTitleBlockAndAttach(chart, titleOpts) {\n    var title = new Title({\n      ctx: chart.ctx,\n      options: titleOpts,\n      chart: chart\n    });\n    core_layouts.configure(chart, title, titleOpts);\n    core_layouts.addBox(chart, title);\n    chart.titleBlock = title;\n  }\n\n  var plugin_title = {\n    id: 'title',\n\n    /**\n     * Backward compatibility: since 2.1.5, the title is registered as a plugin, making\n     * Chart.Title obsolete. To avoid a breaking change, we export the Title as part of\n     * the plugin, which one will be re-exposed in the chart.js file.\n     * https://github.com/chartjs/Chart.js/pull/2640\n     * @private\n     */\n    _element: Title,\n    beforeInit: function beforeInit(chart) {\n      var titleOpts = chart.options.title;\n\n      if (titleOpts) {\n        createNewTitleBlockAndAttach(chart, titleOpts);\n      }\n    },\n    beforeUpdate: function beforeUpdate(chart) {\n      var titleOpts = chart.options.title;\n      var titleBlock = chart.titleBlock;\n\n      if (titleOpts) {\n        helpers$1.mergeIf(titleOpts, core_defaults.global.title);\n\n        if (titleBlock) {\n          core_layouts.configure(chart, titleBlock, titleOpts);\n          titleBlock.options = titleOpts;\n        } else {\n          createNewTitleBlockAndAttach(chart, titleOpts);\n        }\n      } else if (titleBlock) {\n        core_layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n      }\n    }\n  };\n  var plugins = {};\n  var filler = plugin_filler;\n  var legend = plugin_legend;\n  var title = plugin_title;\n  plugins.filler = filler;\n  plugins.legend = legend;\n  plugins.title = title;\n  /**\n   * @namespace Chart\n   */\n\n  core_controller.helpers = helpers$1; // @todo dispatch these helpers into appropriated helpers/helpers.* file and write unit tests!\n\n  core_helpers(core_controller);\n  core_controller._adapters = core_adapters;\n  core_controller.Animation = core_animation;\n  core_controller.animationService = core_animations;\n  core_controller.controllers = controllers;\n  core_controller.DatasetController = core_datasetController;\n  core_controller.defaults = core_defaults;\n  core_controller.Element = core_element;\n  core_controller.elements = elements;\n  core_controller.Interaction = core_interaction;\n  core_controller.layouts = core_layouts;\n  core_controller.platform = platform;\n  core_controller.plugins = core_plugins;\n  core_controller.Scale = core_scale;\n  core_controller.scaleService = core_scaleService;\n  core_controller.Ticks = core_ticks;\n  core_controller.Tooltip = core_tooltip; // Register built-in scales\n\n  core_controller.helpers.each(scales, function (scale, type) {\n    core_controller.scaleService.registerScaleType(type, scale, scale._defaults);\n  }); // Load to register built-in adapters (as side effects)\n  // Loading built-in plugins\n\n  for (var k in plugins) {\n    if (plugins.hasOwnProperty(k)) {\n      core_controller.plugins.register(plugins[k]);\n    }\n  }\n\n  core_controller.platform.initialize();\n  var src = core_controller;\n\n  if (typeof window !== 'undefined') {\n    window.Chart = core_controller;\n  } // DEPRECATIONS\n\n  /**\n   * Provided for backward compatibility, not available anymore\n   * @namespace Chart.Chart\n   * @deprecated since version 2.8.0\n   * @todo remove at version 3\n   * @private\n   */\n\n\n  core_controller.Chart = core_controller;\n  /**\n   * Provided for backward compatibility, not available anymore\n   * @namespace Chart.Legend\n   * @deprecated since version 2.1.5\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.Legend = plugins.legend._element;\n  /**\n   * Provided for backward compatibility, not available anymore\n   * @namespace Chart.Title\n   * @deprecated since version 2.1.5\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.Title = plugins.title._element;\n  /**\n   * Provided for backward compatibility, use Chart.plugins instead\n   * @namespace Chart.pluginService\n   * @deprecated since version 2.1.5\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.pluginService = core_controller.plugins;\n  /**\n   * Provided for backward compatibility, inheriting from Chart.PlugingBase has no\n   * effect, instead simply create/register plugins via plain JavaScript objects.\n   * @interface Chart.PluginBase\n   * @deprecated since version 2.5.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.PluginBase = core_controller.Element.extend({});\n  /**\n   * Provided for backward compatibility, use Chart.helpers.canvas instead.\n   * @namespace Chart.canvasHelpers\n   * @deprecated since version 2.6.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.canvasHelpers = core_controller.helpers.canvas;\n  /**\n   * Provided for backward compatibility, use Chart.layouts instead.\n   * @namespace Chart.layoutService\n   * @deprecated since version 2.7.3\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.layoutService = core_controller.layouts;\n  /**\n   * Provided for backward compatibility, not available anymore.\n   * @namespace Chart.LinearScaleBase\n   * @deprecated since version 2.8\n   * @todo remove at version 3\n   * @private\n   */\n\n  core_controller.LinearScaleBase = scale_linearbase;\n  /**\n   * Provided for backward compatibility, instead we should create a new Chart\n   * by setting the type in the config (`new Chart(id, {type: '{chart-type}'}`).\n   * @deprecated since version 2.8.0\n   * @todo remove at version 3\n   */\n\n  core_controller.helpers.each(['Bar', 'Bubble', 'Doughnut', 'Line', 'PolarArea', 'Radar', 'Scatter'], function (klass) {\n    core_controller[klass] = function (ctx, cfg) {\n      return new core_controller(ctx, core_controller.helpers.merge(cfg || {}, {\n        type: klass.charAt(0).toLowerCase() + klass.slice(1)\n      }));\n    };\n  });\n  return src;\n});"],"sourceRoot":""}