{"version":3,"sources":["views/Forms/ValidationForms/ValidationForms.js"],"names":["validationSchema","values","Yup","shape","firstName","min","required","lastName","userName","email","password","concat","matches","confirmPassword","oneOf","accept","test","value","getErrorsFromValidationError","validationError","inner","reduce","errors","error","Object","_Users_pecherkiy_Documents_goFriends_front_v2_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_7__","_Users_pecherkiy_Documents_goFriends_front_v2_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__","path","initialValues","onSubmit","_ref","setSubmitting","setErrors","setTimeout","alert","JSON","stringify","ValidationForms","props","_this","_Users_pecherkiy_Documents_goFriends_front_v2_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_pecherkiy_Documents_goFriends_front_v2_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_pecherkiy_Documents_goFriends_front_v2_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","touchAll","bind","_Users_pecherkiy_Documents_goFriends_front_v2_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","formName","hasError","form","document","forms","i","length","name","focus","findFirstError","fieldName","Boolean","setTouched","validateForm","getValidationSchema","_this2","react__WEBPACK_IMPORTED_MODULE_8___default","a","createElement","className","reactstrap__WEBPACK_IMPORTED_MODULE_9__","reactstrap__WEBPACK_IMPORTED_MODULE_10__","href","target","rel","reactstrap__WEBPACK_IMPORTED_MODULE_11__","formik__WEBPACK_IMPORTED_MODULE_21__","validate","validateSync","abortEarly","render","_ref2","touched","handleChange","status","dirty","handleBlur","handleSubmit","isSubmitting","isValid","handleReset","reactstrap__WEBPACK_IMPORTED_MODULE_12__","reactstrap__WEBPACK_IMPORTED_MODULE_13__","lg","reactstrap__WEBPACK_IMPORTED_MODULE_14__","noValidate","reactstrap__WEBPACK_IMPORTED_MODULE_15__","reactstrap__WEBPACK_IMPORTED_MODULE_16__","for","reactstrap__WEBPACK_IMPORTED_MODULE_17__","type","id","placeholder","autoComplete","valid","invalid","autoFocus","onChange","onBlur","reactstrap__WEBPACK_IMPORTED_MODULE_18__","md","reactstrap__WEBPACK_IMPORTED_MODULE_19__","label","reactstrap__WEBPACK_IMPORTED_MODULE_20__","color","disabled","onClick","React","Component"],"mappings":"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","file":"static/js/91.a5740093.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Card, CardHeader, CardBody, Col, CustomInput, Form, FormFeedback, FormGroup, Label, Input,  Row} from 'reactstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup'\nimport './ValidationForms.css'\n\nconst validationSchema = function (values) {\n  return Yup.object().shape({\n    firstName: Yup.string()\n    .min(2, `First name has to be at least 2 characters`)\n    .required('First name is required'),\n    lastName: Yup.string()\n    .min(1, `Last name has to be at least 1 character`)\n    .required('Last name is required'),\n    userName: Yup.string()\n    .min(5, `Username has to be at least 5 characters`)\n    .required('Username is required'),\n    email: Yup.string()\n    .email('Invalid email address')\n    .required('Email is required!'),\n    password: Yup.string()\n    .min(6, `Password has to be at least ${6} characters!`)\n    .matches(/(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}/, 'Password must contain: numbers, uppercase and lowercase letters\\n')\n    .required('Password is required'),\n    confirmPassword: Yup.string()\n    .oneOf([values.password], 'Passwords must match')\n    .required('Password confirmation is required'),\n    accept: Yup.bool()\n    .required('* required')\n    .test('accept', 'You have to accept our Terms and Conditions!', value => value === true),\n  })\n}\n\nconst validate = (getValidationSchema) => {\n  return (values) => {\n    const validationSchema = getValidationSchema(values)\n    try {\n      validationSchema.validateSync(values, { abortEarly: false })\n      return {}\n    } catch (error) {\n      return getErrorsFromValidationError(error)\n    }\n  }\n}\n\nconst getErrorsFromValidationError = (validationError) => {\n  const FIRST_ERROR = 0\n  return validationError.inner.reduce((errors, error) => {\n    return {\n      ...errors,\n      [error.path]: error.errors[FIRST_ERROR],\n    }\n  }, {})\n}\n\nconst initialValues = {\n  firstName: \"\",\n  lastName: \"\",\n  userName: \"\",\n  email: \"\",\n  password: \"\",\n  confirmPassword: \"\",\n  accept: false\n}\n\nconst onSubmit = (values, { setSubmitting, setErrors }) => {\n  setTimeout(() => {\n    alert(JSON.stringify(values, null, 2))\n    // console.log('User has been successfully saved!', values)\n    setSubmitting(false)\n  }, 2000)\n}\n\nclass ValidationForms extends React.Component {\n  constructor(props){\n    super(props)\n    this.touchAll = this.touchAll.bind(this)\n\n  }\n\n  findFirstError (formName, hasError) {\n    const form = document.forms[formName]\n    for (let i = 0; i < form.length; i++) {\n      if (hasError(form[i].name)) {\n        form[i].focus()\n        break\n      }\n    }\n  }\n\n  validateForm (errors) {\n    this.findFirstError('simpleForm', (fieldName) => {\n      return Boolean(errors[fieldName])\n    })\n  }\n\n  touchAll(setTouched, errors) {\n    setTouched({\n        firstName: true,\n        lastName: true,\n        userName: true,\n        email: true,\n        password: true,\n        confirmPassword: true,\n        accept: true\n      }\n    )\n    this.validateForm(errors)\n  }\n\n  render() {\n    return (\n      <div className=\"animated fadeIn\">\n        <Card>\n          <CardHeader>\n            <i className=\"icon-note\"></i><strong>Form Validation</strong>\n            <a href=\"https://coreui.io/pro/react/\" className=\"badge badge-danger ml-1\">CoreUI Pro</a>\n            <div className=\"card-header-actions\">\n              <a className=\"card-header-action\" href=\"https://github.com/jaredpalmer/formik\" target=\"_blank\" rel=\"noreferrer noopener\">\n                <small className=\"text-muted\">docs</small>\n              </a>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <a href=\"https://github.com/jaredpalmer/formik\" target=\"_blank\" rel=\"noreferrer noopener\">Formik</a> <cite>Build forms in React, without the tears</cite> with <a href=\"https://github.com/jquense/yup\" target=\"_blank\" rel=\"noreferrer noopener\">Yup</a> <cite>Dead simple Object schema\n            validation</cite>\n            <hr />\n            <Formik\n              initialValues={initialValues}\n              validate={validate(validationSchema)}\n              onSubmit={onSubmit}\n              render={\n                ({\n                  values,\n                  errors,\n                  touched,\n                  status,\n                  dirty,\n                  handleChange,\n                  handleBlur,\n                  handleSubmit,\n                  isSubmitting,\n                  isValid,\n                  handleReset,\n                  setTouched\n                }) => (\n                  <Row>\n                    <Col lg=\"6\">\n                      <Form onSubmit={handleSubmit} noValidate name='simpleForm'>\n                        <FormGroup>\n                          <Label for=\"firstName\">First Name</Label>\n                          <Input type=\"text\"\n                                 name=\"firstName\"\n                                 id=\"firstName\"\n                                 placeholder=\"First Name\"\n                                 autoComplete=\"given-name\"\n                                 valid={!errors.firstName}\n                                 invalid={touched.firstName && !!errors.firstName}\n                                 autoFocus={true}\n                                 required\n                                 onChange={handleChange}\n                                 onBlur={handleBlur}\n                                 value={values.firstName} />\n                          <FormFeedback>{errors.firstName}</FormFeedback>\n                        </FormGroup>\n                        <FormGroup>\n                          <Label for=\"lastName\">Last Name</Label>\n                          <Input type=\"text\"\n                                 name=\"lastName\"\n                                 id=\"lastName\"\n                                 placeholder=\"Last Name\"\n                                 autoComplete=\"family-name\"\n                                 valid={!errors.lastName}\n                                 invalid={touched.lastName && !!errors.lastName}\n                                 required\n                                 onChange={handleChange}\n                                 onBlur={handleBlur}\n                                 value={values.lastName} />\n                          <FormFeedback>{errors.lastName}</FormFeedback>\n                        </FormGroup>\n                        <FormGroup>\n                          <Label for=\"userName\">User Name</Label>\n                          <Input type=\"text\"\n                                 name=\"userName\"\n                                 id=\"userName\"\n                                 placeholder=\"User Name\"\n                                 autoComplete=\"username\"\n                                 valid={!errors.userName}\n                                 invalid={touched.userName && !!errors.userName}\n                                 required\n                                 onChange={handleChange}\n                                 onBlur={handleBlur}\n                                 value={values.userName} />\n                          <FormFeedback>{errors.userName}</FormFeedback>\n                        </FormGroup>\n                        <FormGroup>\n                          <Label for=\"email\">Email</Label>\n                          <Input type=\"email\"\n                                 name=\"email\"\n                                 id=\"email\"\n                                 placeholder=\"Email\"\n                                 autoComplete=\"email\"\n                                 valid={!errors.email}\n                                 invalid={touched.email && !!errors.email}\n                                 required\n                                 onChange={handleChange}\n                                 onBlur={handleBlur}\n                                 value={values.email} />\n                          <FormFeedback>{errors.email}</FormFeedback>\n                        </FormGroup>\n                        <Row>\n                          <Col md={6}>\n                            <FormGroup>\n                              <Label for=\"password\">Password</Label>\n                              <Input type=\"password\"\n                                     name=\"password\"\n                                     id=\"password\"\n                                     placeholder=\"Password\"\n                                     autoComplete=\"new-password\"\n                                     valid={!errors.password}\n                                     invalid={touched.password && !!errors.password}\n                                     required\n                                     onChange={handleChange}\n                                     onBlur={handleBlur}\n                                     value={values.password} />\n                              {/*<FormFeedback>Required password containing at least: number, uppercase and lowercase letter, 8 characters</FormFeedback>*/}\n                              <FormFeedback>{errors.password}</FormFeedback>\n                            </FormGroup>\n                          </Col>\n                          <Col md={6}>\n                            <FormGroup>\n                              <Label for=\"confirmPassword\">Password</Label>\n                              <Input type=\"password\"\n                                     name=\"confirmPassword\"\n                                     id=\"confirmPassword\"\n                                     placeholder=\"Confirm password\"\n                                     autoComplete=\"new-password\"\n                                     valid={!errors.confirmPassword}\n                                     invalid={touched.confirmPassword && !!errors.confirmPassword}\n                                     required\n                                     onChange={handleChange}\n                                     onBlur={handleBlur}\n                                     value={values.confirmPassword} />\n                              <FormFeedback>{errors.confirmPassword}</FormFeedback>\n                            </FormGroup>\n                          </Col>\n                        </Row>\n                        <FormGroup>\n                          <CustomInput\n                            type=\"checkbox\"\n                            id=\"accept\"\n                            label=\"I accept the terms of use\"\n                            required\n                            valid={!errors.accept}\n                            invalid={touched.accept && !!errors.accept}\n                            onChange={handleChange}\n                            onBlur={handleBlur} >\n                            <FormFeedback>{errors.accept}</FormFeedback>\n                          </CustomInput>\n                        </FormGroup>\n                        <FormGroup>\n                          <Button type=\"submit\" color=\"primary\" className=\"mr-1\" disabled={isSubmitting || !isValid}>{isSubmitting ? 'Wait...' : 'Submit'}</Button>\n                          <Button type=\"button\" color=\"success\" className=\"mr-1\" onClick={() => this.touchAll(setTouched, errors)}  disabled={isValid}>Validate</Button>\n                          <Button type=\"reset\" color=\"danger\" className=\"mr-1\" onClick={handleReset}>Reset</Button>\n                        </FormGroup>\n                      </Form>\n                    </Col>\n                    <Col lg=\"6\">\n                      <Card className={isValid ? 'bg-info' : 'bg-secondary'}>\n                        <CardBody>\n                          <pre>values: {JSON.stringify(values, null, 2)}</pre>\n                          <pre>errors: {JSON.stringify(errors, null, 2)}</pre>\n                          <pre>touched: {JSON.stringify(touched, null, 2)}</pre>\n                        </CardBody>\n                      </Card>\n                    </Col>\n                  </Row>\n                )} />\n          </CardBody>\n        </Card>\n      </div>\n    )\n  }\n}\n\nexport default ValidationForms;\n"],"sourceRoot":""}