{"version":3,"sources":["components/pages/CalendarPage/CalendarPage.js","components/shared/Calendar.js"],"names":["CalendarPage","state","events","_this2","this","getEventsForCalendar","then","setState","console","log","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","_shared_Calendar__WEBPACK_IMPORTED_MODULE_6__","Component","localizer","BigCalendar","momentLocalizer","moment","currDate","Date","currYear","getFullYear","currMonth","getMonth","Calendar","handleSelect","_ref","start","end","title","window","prompt","_this","concat","Object","_Users_pecherkiy_Documents_goFriends_front_v2_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_6___default","className","reactstrap__WEBPACK_IMPORTED_MODULE_7__","reactstrap__WEBPACK_IMPORTED_MODULE_8__","reactstrap__WEBPACK_IMPORTED_MODULE_9__","style","height","react_big_calendar__WEBPACK_IMPORTED_MODULE_10__","selectable","popup","views","step","defaultDate","defaultView","toolbar","onSelectEvent","event","alert","format","onSelectSlot","startAccessor","endAccessor","nextProps","undefined","length","map","toDate","addHour","add"],"mappings":"uNAIqBA,6MACnBC,MAAQ,CACNC,OAAQ,uFAGU,IAAAC,EAAAC,KAClBC,cAAuBC,KAAK,SAAAJ,GAAM,OAChCC,EAAKI,SAAS,CACZL,8CAKG,IACCA,EAAWE,KAAKH,MAAhBC,OAER,OADAM,QAAQC,IAAIP,GACLQ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUX,OAAQA,WAhBaY,0MCGpCC,UAAYC,IAAYC,gBAAgBC,MAExCC,EAAW,IAAIC,KACfC,EAAWF,EAASG,cACpBC,EAAYJ,EAASK,WAENC,6MACnBxB,MAAQ,CACNC,OAAQ,MA6BVwB,aAAe,SAAAC,GAAoB,IAAjBC,EAAiBD,EAAjBC,MAAOC,EAAUF,EAAVE,IACjBC,EAAQC,OAAOC,OAAO,kBACxBF,GACFG,EAAK1B,SAAS,CACZL,OAAM,GAAAgC,OAAAC,OAAAC,EAAA,EAAAD,CACDF,EAAKhC,MAAMC,QADV,CAEJ,CACE0B,QACAC,MACAC,sFAMD,IACC5B,EAAWE,KAAKH,MAAhBC,OAER,OACEmC,EAAA1B,EAAAC,cAAA,OAAK0B,UAAU,YACbD,EAAA1B,EAAAC,cAAC2B,EAAA,EAAD,KACEF,EAAA1B,EAAAC,cAAC4B,EAAA,EAAD,KACEH,EAAA1B,EAAAC,cAAA,KAAG0B,UAAU,kBADf,YAIAD,EAAA1B,EAAAC,cAAC6B,EAAA,EAAD,CAAUC,MAAO,CAAEC,OAAQ,SACzBN,EAAA1B,EAAAC,cAACgC,EAAA,EAAD,CACEC,YAAU,EACVC,OAAK,EACL/B,UAAWA,EAEXb,OAAQA,EACR6C,MAAO,CAAC,QAAS,OAAQ,OACzBC,KAAM,GACNC,YAAa,IAAI7B,KAAKC,EAAUE,EAAW,GAC3C2B,YAAY,QACZC,SAAS,EACTC,cAAe,SAAAC,GAAK,OAClBC,MAAK,cAAApB,OACWmB,EAAMvB,MADjB,YAAAI,OACiChB,IAClCmC,EAAMzB,OACN2B,OAAO,WAGbC,aAAcpD,KAAKsB,aACnB+B,cAAc,QACdC,YAAY,8DAxEQC,GAE9B,OADAnD,QAAQC,IAAIkD,QACaC,IAArBD,EAAUzD,QAAwByD,EAAUzD,OAAO2D,OAAS,EAcvD,CACL3D,OAdqByD,EAAUzD,OAAO4D,IAAI,SAAAT,GAC1C,IAAMvB,EAAQuB,EAAMvB,MACdF,EAAQV,IAAOmC,EAAMzB,OAAOmC,SAC5BC,EAAU9C,IAAOmC,EAAMzB,OAAOqC,IAAI,EAAG,QAG3C,MAAO,CACLnC,QACAF,QACAC,IALUX,IAAO8C,GAASD,aAczB,CACL7D,OAAQ,WA3BwBY","file":"static/js/18.f58a8af9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Calendar from \"../../shared/Calendar\";\nimport { getEventsForCalendar } from \"../../../utils/api\";\n\nexport default class CalendarPage extends Component {\n  state = {\n    events: []\n  };\n\n  componentDidMount() {\n    getEventsForCalendar().then(events =>\n      this.setState({\n        events\n      })\n    );\n  }\n\n  render() {\n    const { events } = this.state;\n    console.log(events);\n    return <Calendar events={events} />;\n  }\n}\n","import React, { Component } from \"react\";\nimport { Card, CardBody, CardHeader } from \"reactstrap\";\nimport BigCalendar from \"react-big-calendar\";\nimport moment from \"moment\";\n// import { getEventsForCalendar } from \"../../utils/api\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\n\nconst localizer = BigCalendar.momentLocalizer(moment);\n\nconst currDate = new Date();\nconst currYear = currDate.getFullYear();\nconst currMonth = currDate.getMonth();\n\nexport default class Calendar extends Component {\n  state = {\n    events: []\n  };\n\n  static getDerivedStateFromProps(nextProps) {\n    console.log(nextProps);\n    if (nextProps.events !== undefined && nextProps.events.length > 0) {\n      const modifiedEvents = nextProps.events.map(event => {\n        const title = event.title;\n        const start = moment(event.start).toDate();\n        const addHour = moment(event.start).add(1, \"hour\");\n        const end = moment(addHour).toDate();\n\n        return {\n          title,\n          start,\n          end\n        };\n      });\n\n      return {\n        events: modifiedEvents\n      };\n    }\n\n    return {\n      events: []\n    };\n  }\n\n  handleSelect = ({ start, end }) => {\n    const title = window.prompt(\"New Event name\");\n    if (title)\n      this.setState({\n        events: [\n          ...this.state.events,\n          {\n            start,\n            end,\n            title\n          }\n        ]\n      });\n  };\n\n  render() {\n    const { events } = this.state;\n\n    return (\n      <div className=\"animated\">\n        <Card>\n          <CardHeader>\n            <i className=\"icon-calendar\" />\n            Calendar\n          </CardHeader>\n          <CardBody style={{ height: \"40em\" }}>\n            <BigCalendar\n              selectable\n              popup\n              localizer={localizer}\n              // className=\"d-sm-down-none\"\n              events={events}\n              views={[\"month\", \"week\", \"day\"]}\n              step={30}\n              defaultDate={new Date(currYear, currMonth, 1)}\n              defaultView=\"month\"\n              toolbar={true}\n              onSelectEvent={event =>\n                alert(\n                  `Candidate: ${event.title}, Date: ${moment(\n                    event.start\n                  ).format(\"LLLL\")}`\n                )\n              }\n              onSelectSlot={this.handleSelect}\n              startAccessor=\"start\"\n              endAccessor=\"end\"\n              // {...this.props}\n            />\n          </CardBody>\n        </Card>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}